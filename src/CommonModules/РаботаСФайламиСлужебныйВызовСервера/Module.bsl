
&Вместо("ЗанестиИнформациюФайлаВРегистр")
Процедура БЗ_ЗанестиИнформациюФайлаВРегистр(Версия, ПолныйПуть, ИмяКаталога, НаЧтение, РазмерФайла, ВРабочемКаталогеВладельца)
	
	Если ТипЗнч(Версия) = Тип("СправочникСсылка.БЗ_СтатьиБазыЗнанийПрисоединенныеФайлы") Тогда
		БЗ_ЗанестиИнформациюФайлаВРегистрПродолжение(Версия,ПолныйПуть, ИмяКаталога, НаЧтение, РазмерФайла, ВРабочемКаталогеВладельца);
	Иначе
		ПродолжитьВызов(Версия, ПолныйПуть, ИмяКаталога, НаЧтение, РазмерФайла, ВРабочемКаталогеВладельца);
	КонецЕсли;
	
КонецПроцедуры

// Записать в регистр сведений ФайлыВРабочемКаталоге информацию о пути файла.
// 
// Параметры:
//  Версия - СправочникСсылка.ВерсииФайлов - версия.
//  ПолныйПуть - Строка - полный путь файла.
//  ИмяКаталога - Строка - путь рабочего каталога.
//  НаЧтение - Булево - файл помещен на чтение.
//  РазмерФайла  - Число - размер файла в байтах.
//  ВРабочемКаталогеВладельца - Булево - файл в рабочем каталоге владельца (а не в основном рабочем каталоге).
//
Процедура БЗ_ЗанестиИнформациюФайлаВРегистрПродолжение(Версия,
                                         ПолныйПуть,
                                         ИмяКаталога,
                                         НаЧтение,
                                         РазмерФайла,
                                         ВРабочемКаталогеВладельца) Экспорт
	ПолноеИмяФайла = ПолныйПуть;
	
	Если ВРабочемКаталогеВладельца = Ложь Тогда
		Если СтрНайти(ПолныйПуть, ИмяКаталога) = 1 Тогда
			ПолноеИмяФайла = Сред(ПолныйПуть, СтрДлина(ИмяКаталога) + 1);
		КонецЕсли;
	КонецЕсли;
	
	ЕстьПраваНаОбъект = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Версия, "Ссылка", Истина);
	
	Если ЕстьПраваНаОбъект = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Создать набор записей
	НаборЗаписей = РегистрыСведений.БЗ_ФайлыВРабочемКаталоге.СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.Файл.Установить(Версия.Ссылка);
	НаборЗаписей.Отбор.Пользователь.Установить(Пользователи.АвторизованныйПользователь());

	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.Файл = Версия.Ссылка;
	НоваяЗапись.Путь = ПолноеИмяФайла;

	Если РазмерФайла <> 0 Тогда
		НоваяЗапись.Размер = РазмерФайла;
	Иначе
		НоваяЗапись.Размер = Версия.Размер;
	КонецЕсли;

	НоваяЗапись.ДатаПомещенияВРабочийКаталог = ТекущаяДатаСеанса();
	НоваяЗапись.Пользователь = Пользователи.АвторизованныйПользователь();
	НоваяЗапись.НаЧтение = НаЧтение;
	НоваяЗапись.ВРабочемКаталогеВладельца = ВРабочемКаталогеВладельца;

	НаборЗаписей.Записать();
	
КонецПроцедуры

&Вместо("УдалитьИзРегистра")
Процедура БЗ_УдалитьИзРегистра(Файл)
	
	Если ТипЗнч(Файл) = Тип("СправочникСсылка.БЗ_СтатьиБазыЗнанийПрисоединенныеФайлы") Тогда
		БЗ_УдалитьИзРегистраПродолжение(Файл);
	Иначе
		ПродолжитьВызов(Файл);
	КонецЕсли;
	
КонецПроцедуры

Процедура БЗ_УдалитьИзРегистраПродолжение(Файл) Экспорт
	
	ЕстьПраваНаОбъект = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Файл, "Ссылка", Истина);
	Если ЕстьПраваНаОбъект = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = РегистрыСведений.БЗ_ФайлыВРабочемКаталоге.СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.Файл.Установить(Файл);
	НаборЗаписей.Отбор.Пользователь.Установить(Пользователи.АвторизованныйПользователь());
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

&Вместо("ЗаписатьПолноеИмяФайлаВРегистр")
Процедура БЗ_ЗаписатьПолноеИмяФайлаВРегистр(ТекущаяВерсия, ПолноеИмяФайла, НаЧтение, ВРабочемКаталогеВладельца)
	
	Если ТипЗнч(ТекущаяВерсия) = Тип("СправочникСсылка.БЗ_СтатьиБазыЗнанийПрисоединенныеФайлы") Тогда
		БЗ_ЗаписатьПолноеИмяФайлаВРегистрПродолжение(ТекущаяВерсия, ПолноеИмяФайла, НаЧтение, ВРабочемКаталогеВладельца);
	Иначе
		ПродолжитьВызов(ТекущаяВерсия, ПолноеИмяФайла, НаЧтение, ВРабочемКаталогеВладельца);
	КонецЕсли;
	
КонецПроцедуры

Процедура БЗ_ЗаписатьПолноеИмяФайлаВРегистрПродолжение(ТекущаяВерсия,
                                         ПолноеИмяФайла,
                                         НаЧтение,
                                         ВРабочемКаталогеВладельца) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Создать набор записей
	НаборЗаписей = РегистрыСведений.БЗ_ФайлыВРабочемКаталоге.СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.Файл.Установить(ТекущаяВерсия.Ссылка);
	НаборЗаписей.Отбор.Пользователь.Установить(Пользователи.АвторизованныйПользователь());

	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.Файл = ТекущаяВерсия.Ссылка;
	НоваяЗапись.Путь = ПолноеИмяФайла;
	НоваяЗапись.Размер = ТекущаяВерсия.Размер;
	НоваяЗапись.ДатаПомещенияВРабочийКаталог = ТекущаяДатаСеанса();
	НоваяЗапись.Пользователь = Пользователи.АвторизованныйПользователь();

	НоваяЗапись.НаЧтение = НаЧтение;
	НоваяЗапись.ВРабочемКаталогеВладельца = ВРабочемКаталогеВладельца;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

&Вместо("ПолноеИмяФайлаВРабочемКаталоге")
Функция БЗ_ПолноеИмяФайлаВРабочемКаталоге(Знач Версия, Знач ИмяКаталога, ВРабочемКаталогеНаЧтение, ВРабочемКаталогеВладельца)
	
	Если ТипЗнч(Версия) = Тип("СправочникСсылка.БЗ_СтатьиБазыЗнанийПрисоединенныеФайлы") Тогда
		Возврат БЗ_ПолноеИмяФайлаВРабочемКаталогеПродолжение(Версия, ИмяКаталога, ВРабочемКаталогеНаЧтение, ВРабочемКаталогеВладельца);
	Иначе
		Результат = ПродолжитьВызов(Версия, ИмяКаталога, ВРабочемКаталогеНаЧтение, ВРабочемКаталогеВладельца);
		Возврат Результат;
	КонецЕсли;
	
КонецФункции

Функция БЗ_ПолноеИмяФайлаВРабочемКаталогеПродолжение(Знач Версия, Знач ИмяКаталога, 
	ВРабочемКаталогеНаЧтение, ВРабочемКаталогеВладельца) Экспорт
	
	ЕстьПраваНаОбъект = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Версия, "Ссылка", Истина);
	Если ЕстьПраваНаОбъект = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	УстановитьОтключениеБезопасногоРежима(Истина);
	УстановитьПривилегированныйРежим(Истина);
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Файл", Версия.Ссылка);
	СтруктураОтбора.Вставить("Пользователь", Пользователи.АвторизованныйПользователь());

	СтруктураРесурсов = РегистрыСведений.БЗ_ФайлыВРабочемКаталоге.Получить(СтруктураОтбора);
	ПолноеИмяФайла = СтруктураРесурсов.Путь;
	ВРабочемКаталогеНаЧтение = СтруктураРесурсов.НаЧтение;
	ВРабочемКаталогеВладельца = СтруктураРесурсов.ВРабочемКаталогеВладельца;
	Если ПолноеИмяФайла <> "" И ВРабочемКаталогеВладельца = Ложь Тогда
		ОбщегоНазначения.СократитьИмяФайла(ПолноеИмяФайла);
		ПолноеИмяФайла = ИмяКаталога + ОбщегоНазначенияКлиентСервер.ПолучитьИмяСРасширением(ПолноеИмяФайла, "");
	КонецЕсли;
	
	Возврат ПолноеИмяФайла;
	
КонецФункции

&Вместо("НайтиВРегистреПоПути")
Функция БЗ_НайтиВРегистреПоПути(ИмяФайла)
	
	БЗ_Результат = БЗ_НайтиВРегистреПоПутиПродолжение(ИмяФайла);
	
	Если ЗначениеЗаполнено(БЗ_Результат.Файл) Тогда 
		Возврат БЗ_Результат;
	Иначе
		Результат = ПродолжитьВызов(ИмяФайла);
		Возврат Результат;
	КонецЕсли;
КонецФункции

Функция БЗ_НайтиВРегистреПоПутиПродолжение(ИмяФайла) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Новый Структура;
	Результат.Вставить("ФайлЕстьВРегистре", Ложь);
	Результат.Вставить("Файл", Справочники.БЗ_ВерсииФайлов.ПустаяСсылка());
	Результат.Вставить("ДатаПомещения");
	Результат.Вставить("Владелец");
	Результат.Вставить("НомерВерсии");
	Результат.Вставить("ВРегистреНаЧтение");
	Результат.Вставить("ВРегистреКодФайла");
	Результат.Вставить("ВРегистреПапка");
	
	// Для каждого по пути находим запись в регистре сведений - оттуда берем поле.
	// Версия и Размер и ДатаПомещенияВРабочийКаталог.
	
	АвторизованныйПользователь = Пользователи.АвторизованныйПользователь();
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.БЗ_ФайлыВРабочемКаталоге");
	ЭлементБлокировки.УстановитьЗначение("Пользователь", АвторизованныйПользователь);
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка.Заблокировать();
		
		ЗапросВРегистр = Новый Запрос;
		ЗапросВРегистр.УстановитьПараметр("ИмяФайла", ИмяФайла);
		ЗапросВРегистр.УстановитьПараметр("Пользователь", АвторизованныйПользователь);
		ЗапросВРегистр.Текст =
		"ВЫБРАТЬ
		|	ФайлыВРабочемКаталоге.Файл КАК Файл,
		|	ФайлыВРабочемКаталоге.ДатаПомещенияВРабочийКаталог КАК ДатаПомещения,
		|	ФайлыВРабочемКаталоге.НаЧтение КАК ВРегистреНаЧтение,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ФайлыВРабочемКаталоге.Файл) = ТИП(Справочник.БЗ_ВерсииФайлов)
		|			ТОГДА ВЫРАЗИТЬ(ФайлыВРабочемКаталоге.Файл КАК Справочник.БЗ_ВерсииФайлов).Владелец
		|		ИНАЧЕ ФайлыВРабочемКаталоге.Файл
		|	КОНЕЦ КАК Владелец,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ФайлыВРабочемКаталоге.Файл) = ТИП(Справочник.БЗ_ВерсииФайлов)
		|			ТОГДА ВЫРАЗИТЬ(ФайлыВРабочемКаталоге.Файл КАК Справочник.БЗ_ВерсииФайлов).НомерВерсии
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК НомерВерсии
		|ИЗ
		|	РегистрСведений.БЗ_ФайлыВРабочемКаталоге КАК ФайлыВРабочемКаталоге
		|ГДЕ
		|	ФайлыВРабочемКаталоге.Путь = &ИмяФайла
		|	И ФайлыВРабочемКаталоге.Пользователь = &Пользователь";
		
		РезультатЗапроса = ЗапросВРегистр.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			
			ЗаполнитьЗначенияСвойств(Результат, Выборка);
			
			Результат.ФайлЕстьВРегистре = Истина;
			Результат.ВРегистреПапка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				Выборка.Владелец, "ВладелецФайла");
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции
