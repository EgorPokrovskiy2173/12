Функция СтатьяВИерархииКатегорииБазыЗнаний(СтатьяБазыЗнаний, Категория) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СтатьиБазыЗнанийКатегории.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.БЗ_СтатьиБазыЗнаний.Категории КАК СтатьиБазыЗнанийКатегории
		|ГДЕ
		|	СтатьиБазыЗнанийКатегории.Категория В ИЕРАРХИИ(&Категория)
		|	И СтатьиБазыЗнанийКатегории.Ссылка = &СтатьяБазыЗнаний";
	
	Запрос.УстановитьПараметр("Категория", Категория);
	Запрос.УстановитьПараметр("СтатьяБазыЗнаний", СтатьяБазыЗнаний);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат НЕ РезультатЗапроса.Пустой();
	
КонецФункции // ()

//Функция определяет сотрудника по пользователю
//-------------------------------------------------------------------------
//Пользователь - ссылка справочник Пользователи,
//Возврат - ссылка справочник Сотрудкники;
//-------------------------------------------------------------------------
//автор: Макаров А.
Функция ОпределитьСотрудникаПоПользователю(Пользователь = Неопределено) Экспорт
	
	Если Пользователь = Неопределено Тогда
		Пользователь = ПараметрыСеанса.ТекущийПользователь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	СотрудникиПользователя.Сотрудник КАК Сотрудник
	|ИЗ
	|	РегистрСведений.СотрудникиПользователя КАК СотрудникиПользователя
	|ГДЕ
	|	СотрудникиПользователя.Пользователь = &Ответственный";
	
	Запрос.УстановитьПараметр("Ответственный", Пользователь);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;	
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ВыборкаДетальныеЗаписи.Следующий();
	
	Возврат ВыборкаДетальныеЗаписи.Сотрудник;
	
КонецФункции

Функция СтруктураИТипСсылкиИзТекста(Текст) Экспорт
	
	ТекстПоиска = НРег(СокрЛП(Текст));
	
	МассивПоиска = Новый Массив;
	МассивПоиска.Добавить("http://");
	МассивПоиска.Добавить("https://");
	МассивПоиска.Добавить("www.");
	
	МассивПоиска.Добавить(".ru");
	МассивПоиска.Добавить(".com");
	МассивПоиска.Добавить(".net");
	МассивПоиска.Добавить(".org");
	МассивПоиска.Добавить(".рф");
	МассивПоиска.Добавить(".info");
	
	МассивПоиска.Добавить(".online");
	МассивПоиска.Добавить(".top");
	МассивПоиска.Добавить(".xyz");
	МассивПоиска.Добавить(".loan");
	МассивПоиска.Добавить(".club");
	МассивПоиска.Добавить(".shop");
	МассивПоиска.Добавить(".work");
	
	МассивПоиска.Добавить(".biz");
	МассивПоиска.Добавить(".de");
	МассивПоиска.Добавить(".uk");
	МассивПоиска.Добавить(".cn");
	МассивПоиска.Добавить(".nl");
	МассивПоиска.Добавить(".eu");
	
	СтруктураСсылки = РазбитьСтрокуПоКлючевомуСлову(ТекстПоиска, СокрЛП(Текст), МассивПоиска);
	Если СтруктураСсылки <> Неопределено Тогда
		Возврат СтруктураСсылки;
	КонецЕсли;
	
	
	МассивПоиска = Новый Массив;
	МассивПоиска.Добавить("e1cib/");
	
	СтруктураСсылки = РазбитьСтрокуПоКлючевомуСлову(ТекстПоиска, СокрЛП(Текст), МассивПоиска);
	Если СтруктураСсылки <> Неопределено Тогда
		МассивСсылок = Новый Массив;
		МассивСсылок.Добавить(СтруктураСсылки.ТекстСсылки);
		МассивПредставленияСсылок = ПолучитьПредставленияНавигационныхСсылок(МассивСсылок);
		
		Если ЗначениеЗаполнено(МассивПредставленияСсылок) Тогда
			СтруктураСсылки.Вставить("ПредставлениеСсылки", МассивПредставленияСсылок[0].Текст);
		КонецЕсли;
		
		Возврат СтруктураСсылки;
	КонецЕсли;
	
	МассивПоиска = Новый Массив;
	МассивПоиска.Добавить("\\");
	
	СтруктураСсылки = РазбитьСтрокуПоКлючевомуСлову(ТекстПоиска, СокрЛП(Текст), МассивПоиска);
	Если СтруктураСсылки <> Неопределено Тогда
		Возврат СтруктураСсылки;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции // ()    

Функция РазбитьСтрокуПоКлючевомуСлову(ТекстПоиска, Текст, МассивПоиска) Экспорт
	
	Для каждого ЭлементМассива Из МассивПоиска Цикл
		Результат = СтрНайти(ТекстПоиска, ЭлементМассива);
		Если Результат > 0 Тогда
			
			НомерНачалаСсылки = СтрНайти(Текст, " ", НаправлениеПоиска.СКонца, Результат);
			НомерКонцаСсылки = СтрНайти(Текст, " ", НаправлениеПоиска.СНачала, Результат);
			
			СтруктураВозврата = Новый Структура;
			Если НомерНачалаСсылки > 0 Тогда
				СтруктураВозврата.Вставить("ТекстДо", СокрЛП(Лев(Текст, НомерНачалаСсылки)));
			КонецЕсли;
			
			Если ЗначениеЗаполнено(НомерКонцаСсылки) Тогда
				СтруктураВозврата.Вставить("ТекстСсылки", СокрЛП(Сред(Текст, НомерНачалаСсылки, НомерКонцаСсылки - НомерНачалаСсылки)));
			ИначеЕсли ЗначениеЗаполнено(НомерНачалаСсылки) Тогда
				СтруктураВозврата.Вставить("ТекстСсылки", СокрЛП(Сред(Текст, НомерНачалаСсылки)));
			Иначе
				СтруктураВозврата.Вставить("ТекстСсылки", СокрЛП(Текст));
			КонецЕсли;
			
			Если НомерКонцаСсылки > 0 Тогда
				СтруктураВозврата.Вставить("ТекстПосле", СокрЛП(Сред(Текст, НомерКонцаСсылки)));
			КонецЕсли;
			
			Возврат СтруктураВозврата;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции // ()

Процедура ЗаписатьСтатьиБазыЗнаний(пСсылка, пСтатьяБазыЗнаний, пИсключитьСтатью = Ложь) Экспорт
	
	//НаборЗаписей 	= РегистрыСведений.АйТи_СтатьиБазыЗнанийПоЗадаче.СоздатьНаборЗаписей();
	//НаборЗаписей.Отбор.Объект.Установить(пСсылка); 
	//НаборЗаписей.Отбор.СтатьяБазыЗнаний.Установить(пСтатьяБазыЗнаний); 
	//
	//НаборЗаписей.Прочитать();
	//Если НаборЗаписей.Количество() = 0 Тогда //Значит эта статья ещё не помогла
	//	НоваяЗапись 	= НаборЗаписей.Добавить();
	//	НоваяЗапись.Объект 				= пСсылка;
	//	НоваяЗапись.СтатьяБазыЗнаний	= пСтатьяБазыЗнаний;
	//ИначеЕсли пИсключитьСтатью Тогда //Когда надо искоючить переданную "СтатьяБазыЗнаний" из регистра
	//	НаборЗаписей 	= РегистрыСведений.АйТи_СтатьиБазыЗнанийПоЗадаче.СоздатьНаборЗаписей();
	//	НаборЗаписей.Отбор.Объект.Установить(пСсылка);
	//	
	//	Запрос = Новый Запрос;
	//	Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	АйТи_СтатьиБазыЗнанийПоЗадаче.СтатьяБазыЗнаний КАК СтатьяБазыЗнаний
	//	|ИЗ
	//	|	РегистрСведений.АйТи_СтатьиБазыЗнанийПоЗадаче КАК АйТи_СтатьиБазыЗнанийПоЗадаче
	//	|ГДЕ
	//	|	АйТи_СтатьиБазыЗнанийПоЗадаче.Объект = &Объект
	//	|	И АйТи_СтатьиБазыЗнанийПоЗадаче.СтатьяБазыЗнаний <> &СтатьяБазыЗнаний";
	//	
	//	Запрос.УстановитьПараметр("Объект"			, пСсылка);
	//	Запрос.УстановитьПараметр("СтатьяБазыЗнаний", пСтатьяБазыЗнаний);
	//	
	//	РезультатЗапроса = Запрос.Выполнить();
	//	
	//	лВыборка 	= РезультатЗапроса.Выбрать();
	//	Пока лВыборка.Следующий() Цикл
	//		НоваяЗапись 	= НаборЗаписей.Добавить();
	//		НоваяЗапись.Объект 				= пСсылка;
	//		НоваяЗапись.СтатьяБазыЗнаний 	= лВыборка.СтатьяБазыЗнаний;
	//	КонецЦикла;
	//	
	//КонецЕсли; 
	//
	//НаборЗаписей.Записать();
	
КонецПроцедуры // ЗаписатьСтатьиБазыЗнаний()

Функция ПолучитьСсылкуПоИдентификатору(ВидСправочника, Идентификатор) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Идентификатор) Тогда
		Возврат Справочники[ВидСправочника].ПустаяСсылка();
	КонецЕсли;
	
	УникальныйИдентификатор = Новый УникальныйИдентификатор(Идентификатор);
	Возврат Справочники[ВидСправочника].ПолучитьСсылку(УникальныйИдентификатор);
	
КонецФункции