// Возвращает двоичные данные файла.
//
// Параметры:
//   ПрисоединенныйФайл - ОпределяемыйТип.ПрисоединенныйФайл - ссылка на элемент справочника с файлом.
//   ВызыватьИсключение - Булево - если указать Ложь, то функция будет возвращать Неопределено
//                     вместо вызова исключений. Значение по умолчанию - Истина.
//
// Возвращаемое значение:
//   ДвоичныеДанные, Неопределено - двоичные данные присоединенного файла. Если двоичные данные файла не найдены
//                               в информационной базе или в томах, вызывает исключение. Если двоичные данные не
//                               найдены и параметр ВызыватьИсключение принимает значение Ложь, тогда
//                               возвращаемое значение - Неопределено.
//
Функция ДанныеФайла(ПрисоединенныйФайл, Знач ВызыватьИсключение = Истина) Экспорт
	
	СвойстваФайла = СвойстваФайлаВТоме(ПрисоединенныйФайл);
	Попытка
		Возврат Новый ДвоичныеДанные(РаботаСФайламиВТомахСлужебный.ПолноеИмяФайлаВТоме(СвойстваФайла));
	Исключение
		ФайлОбъект = РаботаСФайламиСлужебный.ФайлОбъект(ПрисоединенныйФайл);
		РаботаСФайламиСлужебный.СообщитьОбОшибкеФайлНеНайден(ФайлОбъект, ВызыватьИсключение);
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

// Инициализирует структуру свойств файла для получения полного пути к файлу в томе.
// 
// Если для файла используется хранение версий и нет ни одной версии, 
// то данные будут заполнены по файлу, а в качестве Тома и пути будут возвращены пустые значения.
//
// Параметры:
//   Файл - ОпределяемыйТип.ПрисоединенныйФайл
//        - Неопределено - если значение параметра заполнено, свойства
//          заполняются значениями одноименных реквизитов файла, иначе - свойства принимают значение Неопределено.
//
// Возвращаемое значение:
//   Структура:
//     * Наименование - Строка - наименование файла;
//     * Том - СправочникСсылка.ТомаХраненияФайлов
//     * ПутьКФайлу - Строка - путь к файлу в томе;
//     * ВладелецФайла - ОпределяемыйТип.ВладелецПрисоединенныхФайлов
//                     - ОпределяемыйТип.ВладелецФайлов
//                     - Неопределено
//     * Расширение - Строка - расширение файла;
//     * НомерВерсии - Строка - номер версии файла.
//
Функция СвойстваФайлаВТоме(Файл = Неопределено) Экспорт
	
	СвойстваФайла = Новый Структура;
	СвойстваФайла.Вставить("Наименование", "");
	СвойстваФайла.Вставить("Расширение", "");
	СвойстваФайла.Вставить("Том", Справочники.ТомаХраненияФайлов.ПустаяСсылка());
	СвойстваФайла.Вставить("ПутьКФайлу", "");
	СвойстваФайла.Вставить("ВладелецФайла", Неопределено);
	СвойстваФайла.Вставить("НомерВерсии", "");
	
	Если ЗначениеЗаполнено(Файл) Тогда
		
		Если ТипЗнч(Файл) = Тип("СправочникСсылка.БЗ_Файлы") Тогда
			СсылкаНаВерсию = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Файл, "ТекущаяВерсия");
		Иначе
			СсылкаНаВерсию = Файл;
		КонецЕсли;
		
		// Во время удаления файла версии могут не существовать.
		ПроверяемоеСвойство = Новый Структура("ВерсияДанных");
		ЗаполнитьЗначенияСвойств(ПроверяемоеСвойство, СсылкаНаВерсию);
		Если НЕ ЗначениеЗаполнено(ПроверяемоеСвойство.ВерсияДанных) Тогда
			СсылкаНаВерсию = Файл;
		КонецЕсли;
		
		РеквизитыФайла = Новый Массив;
		РеквизитыФайла.Добавить("Наименование");
		РеквизитыФайла.Добавить("Расширение");
		РеквизитыФайла.Добавить("Том");
		РеквизитыФайла.Добавить("ПутьКФайлу");
		Если ТипЗнч(СсылкаНаВерсию) = Тип("СправочникСсылка.БЗ_ВерсииФайлов") Тогда
			РеквизитыФайла.Добавить("Владелец");
			РеквизитыФайла.Добавить("НомерВерсии");
		Иначе
			РеквизитыФайла.Добавить("ВладелецФайла");
		КонецЕсли;
		
		ИменаРеквизитов = СтрСоединить(РеквизитыФайла, ",");
		РеквизитыФайла = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаВерсию, ИменаРеквизитов);
		ЗаполнитьЗначенияСвойств(СвойстваФайла, РеквизитыФайла);
		 
		Если РеквизитыФайла.Свойство("Владелец") И ЗначениеЗаполнено(РеквизитыФайла.Владелец) Тогда
			СвойстваФайла.ВладелецФайла = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеквизитыФайла.Владелец, "ВладелецФайла");
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТипЗнч(СвойстваФайла.НомерВерсии) <> Тип("Строка") Тогда
		СвойстваФайла.НомерВерсии = Строка(СвойстваФайла.НомерВерсии);
	КонецЕсли;
	
	Возврат СвойстваФайла;
	
КонецФункции

//// Возвращает полное имя для файла в томе с учетом настроек
//// хранения файлов в томах и значений разделителя.
////
//// Параметры:
////   СвойстваФайла - см. СвойстваФайлаВТоме.
////   ДатаДляРазмещенияВТоме - Дата
////   
//// Возвращаемое значение:
////   Строка
////
//Функция ПолноеИмяФайлаВТоме(СвойстваФайла, ДатаДляРазмещенияВТоме = Неопределено) Экспорт
//	
//	Разделитель = ПолучитьРазделительПути();
//	
//	Если НЕ ЗначениеЗаполнено(СвойстваФайла.Том) Тогда
//		Возврат "";
//	КонецЕсли;
//	
//	ПолныйПутьТома = ПолныйПутьТома(СвойстваФайла.Том);
//	Если Не ПустаяСтрока(СвойстваФайла.ПутьКФайлу) Тогда
//		Возврат ПолныйПутьТома + СвойстваФайла.ПутьКФайлу;
//	КонецЕсли;
//	
//	КорневойКаталог = ПолныйПутьТома + ?(Прав(ПолныйПутьТома, 1) = Разделитель, "", Разделитель);
//	Если СоздаватьПодкаталогиСИменамиВладельцев() Тогда
//		КорневойКаталог = КорневойКаталог + ИмяКаталогаВладельцаФайла(СвойстваФайла.ВладелецФайла) + Разделитель;
//	КонецЕсли;
//	
//	ДатаРазмещения = ?(ЗначениеЗаполнено(ДатаДляРазмещенияВТоме), ДатаДляРазмещенияВТоме, ТекущаяДатаСеанса());
//	КорневойКаталог = КорневойКаталог + Формат(ДатаРазмещения, "ДФ=ггггММдд") + Разделитель;
//	
//	ИмяФайла = ОбщегоНазначенияКлиентСервер.ПолучитьИмяСРасширением(СвойстваФайла.Наименование
//		+ ?(ЗначениеЗаполнено(СвойстваФайла.НомерВерсии), "." + СвойстваФайла.НомерВерсии, ""), СвойстваФайла.Расширение);
//	
//	ОбщегоНазначения.СократитьИмяФайла(ИмяФайла);
//		
//	Попытка
//		Возврат КорневойКаталог
//			+ РаботаСФайламиСлужебныйКлиентСервер.УникальноеИмяСПутем(КорневойКаталог, ИмяФайла);
//	Исключение
//		Том = Новый Файл(ПолныйПутьТома);
//		Если Не Том.Существует() Или Не Том.ЭтоКаталог() Тогда
//			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
//				НСтр("ru = 'Не существует сетевой каталог для тома хранения файлов ""%1"": %2
//					|Обратитесь к администратору.'"), СвойстваФайла.Том, ПолныйПутьТома);
//		КонецЕсли;
//		ВызватьИсключение;
//	КонецПопытки	
//КонецФункции
