
&Вместо("ПриОбновленииДанныхФайла")
Процедура БЗ_ПриОбновленииДанныхФайла(Контекст, ПрисоединенныйФайл)
	
	//Если ТипЗнч(ПрисоединенныйФайл) = Тип("СправочникСсылка.БЗ_СтатьиБазыЗнанийПрисоединенныеФайлы") Тогда
	//	Возврат;
	//КонецЕсли;
	ПродолжитьВызов(Контекст, ПрисоединенныйФайл);
	
КонецПроцедуры


&Вместо("ЗаписатьФайлВИнформационнуюБазу")
Процедура БЗ_ЗаписатьФайлВИнформационнуюБазу(Знач ПрисоединенныйФайл, Знач ДвоичныеДанные)
	
	Если ТипЗнч(ПрисоединенныйФайл) = Тип("СправочникСсылка.БЗ_СтатьиБазыЗнанийПрисоединенныеФайлы") Тогда
		УстановитьОтключениеБезопасногоРежима(Истина);
		УстановитьПривилегированныйРежим(Истина);
		
		МенеджерЗаписи                     = РегистрыСведений.БЗ_ДвоичныеДанныеФайлов.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Файл                = ПрисоединенныйФайл;
		МенеджерЗаписи.ДвоичныеДанныеФайла = Новый ХранилищеЗначения(ДвоичныеДанные, Новый СжатиеДанных(9));
		МенеджерЗаписи.Записать(Истина);
	Иначе	
		ПродолжитьВызов(ПрисоединенныйФайл, ДвоичныеДанные); 
	КонецЕсли;
КонецПроцедуры


&Вместо("ЗаполнитьДополнительныеДанныеФайла")
Процедура БЗ_ЗаполнитьДополнительныеДанныеФайла(Результат, ПрисоединенныйФайл, ВерсияФайла)
	
	Если ТипЗнч(ПрисоединенныйФайл) = Тип("СправочникОбъект.БЗ_СтатьиБазыЗнанийПрисоединенныеФайлы") Тогда
		БЗ_ЗаполнитьДополнительныеДанныеФайлаИзмененный(Результат, ПрисоединенныйФайл, ВерсияФайла);
	Иначе
		ПродолжитьВызов(Результат, ПрисоединенныйФайл, ВерсияФайла);
	КонецЕсли;
КонецПроцедуры

// Параметры:
//   Результат - Структура
//   ПрисоединенныйФайл - ОпределяемыйТип.ПрисоединенныйФайлОбъект
//   ВерсияФайла - СправочникСсылка.ВерсииФайлов
//
Процедура БЗ_ЗаполнитьДополнительныеДанныеФайлаИзмененный(Результат, ПрисоединенныйФайл, ВерсияФайла = Неопределено) Экспорт
	
	СправочникПоддерживаетВозможностьХранитьВерсии = ОбщегоНазначения.ЕстьРеквизитОбъекта("ТекущаяВерсия", Метаданные.НайтиПоТипу(ТипЗнч(ПрисоединенныйФайл)));
	
	Если СправочникПоддерживаетВозможностьХранитьВерсии И ЗначениеЗаполнено(ПрисоединенныйФайл.ТекущаяВерсия) Тогда
		ТекущаяВерсияФайла = ПрисоединенныйФайл.ТекущаяВерсия;
	Иначе
		ТекущаяВерсияФайла = ПрисоединенныйФайл.Ссылка;
	КонецЕсли;
	
	Результат.Вставить("ТекущаяВерсия", ТекущаяВерсияФайла);
	
	Если ВерсияФайла <> Неопределено Тогда
		Результат.Вставить("Версия", ВерсияФайла);
	ИначеЕсли СправочникПоддерживаетВозможностьХранитьВерсии И ЗначениеЗаполнено(ПрисоединенныйФайл.ТекущаяВерсия) Тогда
		Результат.Вставить("Версия", ПрисоединенныйФайл.ТекущаяВерсия);
	Иначе
		Результат.Вставить("Версия", ПрисоединенныйФайл.Ссылка);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВерсияФайла) Тогда
		ТекущаяВерсияОбъект = ВерсияФайла.ПолучитьОбъект();
		Результат.Вставить("НомерВерсии", ТекущаяВерсияОбъект.НомерВерсии);
		ТекущаяВерсияФайла = ВерсияФайла;
	Иначе
		Результат.Вставить("НомерВерсии", 0);
		ТекущаяВерсияФайла = Результат.Версия;
		ТекущаяВерсияОбъект = ПрисоединенныйФайл;
	КонецЕсли;
	
	Результат.Вставить("Наименование",                 ТекущаяВерсияОбъект.Наименование);
	Результат.Вставить("Расширение",                   ТекущаяВерсияОбъект.Расширение);
	Результат.Вставить("Размер",                       ТекущаяВерсияОбъект.Размер);
	Результат.Вставить("ДатаМодификацииУниверсальная", ТекущаяВерсияОбъект.ДатаМодификацииУниверсальная);
	Результат.Вставить("Том",                          ТекущаяВерсияОбъект.Том);
	Результат.Вставить("Автор",                        ТекущаяВерсияОбъект.Автор);
	Результат.Вставить("СтатусИзвлеченияТекста",       ТекущаяВерсияОбъект.СтатусИзвлеченияТекста);
	Результат.Вставить("ПолноеНаименованиеВерсии",     СокрЛП(ТекущаяВерсияОбъект.Наименование));
	
	СтруктураКлюча = Новый Структура("Файл", ТекущаяВерсияФайла);
	КлючЗаписи = РегистрыСведений.БЗ_ДвоичныеДанныеФайлов.СоздатьКлючЗаписи(СтруктураКлюча);
	НавигационнаяСсылкаТекущейВерсии = ПолучитьНавигационнуюСсылку(КлючЗаписи, "ДвоичныеДанныеФайла");
	Результат.Вставить("НавигационнаяСсылкаТекущейВерсии", НавигационнаяСсылкаТекущейВерсии);
	
	КодировкаТекущейВерсии = РегистрыСведений.БЗ_КодировкиФайлов.КодировкаВерсииФайла(ТекущаяВерсияФайла);
	Результат.Вставить("КодировкаТекущейВерсии", КодировкаТекущейВерсии);
	ТекущийПользователь = Пользователи.АвторизованныйПользователь();
	НаЧтение = Результат.Редактирует <> ТекущийПользователь;
	Результат.Вставить("НаЧтение", НаЧтение);
	
	ВРабочемКаталогеНаЧтение = Истина;
	ВРабочемКаталогеВладельца = Ложь;
	ИмяКаталога = РабочийКаталогПользователя();
	
	Если ЗначениеЗаполнено(ТекущаяВерсияФайла) Тогда
		ПолноеИмяФайлаВРабочемКаталоге = БЗ_РаботаСФайламиСлужебныйВызовСервера.ПолноеИмяФайлаВРабочемКаталоге(ТекущаяВерсияФайла, ИмяКаталога, ВРабочемКаталогеНаЧтение, ВРабочемКаталогеВладельца);
	
		Результат.Вставить("ПолноеИмяФайлаВРабочемКаталоге", ПолноеИмяФайлаВРабочемКаталоге);
	КонецЕсли;
	Результат.Вставить("ВРабочемКаталогеНаЧтение", ВРабочемКаталогеНаЧтение);
	Результат.Вставить("РабочийКаталогВладельца", "");
	
	РедактируетТекущийПользователь = (Результат.Редактирует = ТекущийПользователь);
	Результат.Вставить("ФайлРедактируетТекущийПользователь", РедактируетТекущийПользователь);
	
	СтатусИзвлеченияТекстаСтрока = "НеИзвлечен";
	Если Результат.СтатусИзвлеченияТекста = Перечисления.СтатусыИзвлеченияТекстаФайлов.НеИзвлечен Тогда
		СтатусИзвлеченияТекстаСтрока = "НеИзвлечен";
	ИначеЕсли Результат.СтатусИзвлеченияТекста = Перечисления.СтатусыИзвлеченияТекстаФайлов.Извлечен Тогда
		СтатусИзвлеченияТекстаСтрока = "Извлечен";
	ИначеЕсли Результат.СтатусИзвлеченияТекста = Перечисления.СтатусыИзвлеченияТекстаФайлов.ИзвлечьНеУдалось Тогда
		СтатусИзвлеченияТекстаСтрока = "ИзвлечьНеУдалось";
	КонецЕсли;
	Результат.Вставить("СтатусИзвлеченияТекста", СтатусИзвлеченияТекстаСтрока);
	
	ПапкаДляСохранитьКак = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиПрограммы", "ПапкаДляСохранитьКак");
	Результат.Вставить("ПапкаДляСохранитьКак", ПапкаДляСохранитьКак);
	
КонецПроцедуры



