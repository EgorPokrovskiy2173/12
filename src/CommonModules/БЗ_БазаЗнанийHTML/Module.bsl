////////////////////////////////////////////////////////////////////////////////
// ФОРМИРОВАНИЕ СТРАНИЦ БАЗЫ ЗНАНИЙ

// Возвращает готовый контент для вывода на главной странице
//
// Параметры:
//	ПараметрыСтраницы - Структура
//		ОснКартинки - Структура. Основные картинки базы знаний
//			Ключ - имя картинки
//			Значение - путь к картинке
//		
Функция ПолучитьКонтентГлавнойСтраницы(ПараметрыКонтента) Экспорт
	
	ПустаяКатегория	= Справочники.БЗ_КатегорииБазыЗнаний.ПустаяСсылка();
	
	#Область ТекстНовости
	ПараметрыБлока	= Новый Структура("ОснКартинки, ГлавнаяСтраница",
		ПараметрыКонтента.ОснКартинки,
		Истина);
	ТекстНовости	= ПолучитьБлокНовости(ПараметрыБлока);
	#КонецОбласти
	
	#Область ТекстКатегории
	// Командная панель
	ДанныеПанели	= ПолучитьКоманднуюПанель_Категория(ПараметрыКонтента.ОснКартинки, Неопределено, "Добавить");
	КоманднаяПанель	= ПолучитьHTML_КоманднаяПанель(ПараметрыКонтента.ОснКартинки, ДанныеПанели);
	
	// Категории
	НастройкаОтбора	= Новый Массив;
	БЗ_БазаЗнанийКлиентСервер.ДобавитьЭлементОтбора(НастройкаОтбора, "Родитель", ПустаяКатегория);
	
	ТаблицаКатегории = БЗ_БазаЗнаний.ПолучитьКатегории(НастройкаОтбора);
	
	ПараметрыВывода	= Новый Структура("КоманднаяПанель", КоманднаяПанель);
	ТекстКатегории	= ПолучитьHTML_Категории(ПараметрыКонтента.ОснКартинки, ТаблицаКатегории, ПараметрыВывода);
	#КонецОбласти
	
	#Область ТекстТеги
	ТекстТеги		= ПолучитьHTML_Теги(Неопределено);
	#КонецОбласти
	
	#Область ТекстСтатьи
	СтруктураСтатей	= ПолучитьСтатьиГлавнойСтраницы();
	ТекстСтатьи		= ПолучитьHTML_СтатьиТитульнойСтраницы(ПараметрыКонтента.ОснКартинки, СтруктураСтатей);
	#КонецОбласти
	
	//Возврат ТекстНовости + ТекстКатегории + ТекстТеги + ТекстСтатьи;
	Возврат ТекстКатегории;
	
КонецФункции

// Возвращает готовый контент для вывода на странице по заданной категории
//
// Параметры:
//	ПараметрыКонтента - Структура
//		Ссылка - Справочники.КатегорииБазыЗнаний
//		ОснКартинки - Структура
//			Ключ - имя картинки
//			Значение - путь к картинке
//		
Функция ПолучитьКонтентКатегории(ПараметрыКонтента) Экспорт
	
	#Область ТекстПуть
	МассивПуть		= ПолучитьПутьТекущейСтраницы(ПараметрыКонтента.Ссылка);
	ТекстПуть		= ПолучитьHTML_Путь(ПараметрыКонтента.ОснКартинки, МассивПуть);
	#КонецОбласти
	
	#Область ТекстКатегории
	// Командная панель
	ПараметрыПанели	= Новый Структура("Ссылка", ПараметрыКонтента.Ссылка);
	КнопкиПанели	= ПолучитьКоманднуюПанель_Категория(
		ПараметрыКонтента.ОснКартинки,
		ПараметрыПанели,
		"Добавить, Изменить, Подписаться");
	КоманднаяПанель	= ПолучитьHTML_КоманднаяПанель(ПараметрыКонтента.ОснКартинки, КнопкиПанели);
	
	// Категории
	НастройкаОтбора	= Новый Массив;
	БЗ_БазаЗнанийКлиентСервер.ДобавитьЭлементОтбора(НастройкаОтбора, "Родитель", ПараметрыКонтента.Ссылка);
	
	ТаблицаКатегории = БЗ_БазаЗнаний.ПолучитьКатегории(НастройкаОтбора);
	
	ПараметрыВывода	= Новый Структура("КоманднаяПанель, Категория", 
		КоманднаяПанель,
		ПараметрыКонтента.Ссылка);
	ТекстКатегории	= ПолучитьHTML_Категории(
		ПараметрыКонтента.ОснКартинки,
		ТаблицаКатегории,
		ПараметрыВывода);
	#КонецОбласти
	
	#Область ТекстТеги
	ТекстТеги = ПолучитьHTML_Теги(ПараметрыКонтента.Ссылка);
	#КонецОбласти
	
	#Область ТекстСтатьи
	ПараметрыБлока = Новый Структура("ОснКартинки, ВидСтраницы, Категория, Количество",
		ПараметрыКонтента.ОснКартинки,
		"category_articles",
		ПараметрыКонтента.Ссылка,
		20);
	ТекстСтатьи = ПолучитьБлокСтатьи(ПараметрыБлока);
	#КонецОбласти
	
	// Текст о изученности статьи
	ТекстИнформацияОИзучености = ПолучитьHTML_ИнформацияОИзученостиКатегории(ПараметрыКонтента.ОснКартинки, ПараметрыВывода.Категория);
	Если ЗначениеЗаполнено(ТекстИнформацияОИзучености) Тогда
		ТекстИнформацияОИзучености = "<div id='comments'>
		|		<div class='h1'>
		|			Состояние изучения категории
		|		</div>
		|	</div>
		|<div class='info-gray'>" + ТекстИнформацияОИзучености + "</div>";
	КонецЕсли;
	
	// Итоговый результат
	Возврат ТекстПуть + ТекстКатегории + ТекстТеги + ТекстСтатьи + ТекстИнформацияОИзучености;
	
КонецФункции

// Возвращает готовый контент для вывода на странице по виду рейтинга
//
// Параметры:
//	ПараметрыКонтента - Структура
//		ОснКартинки - Структура
//			Ключ - имя картинки
//			Значение - путь к картинке
//		ВидСтраницы - Строка
//			featured_articles, recently_added, most_popular, top_rated
//		
Функция ПолучитьКонтентСтатьиПоРейтингу(ПараметрыКонтента) Экспорт
	
	ПараметрыПоВиду	= БЗ_БазаЗнанийHTMLКлиентСервер.ПолучитьПараметрыВыводаСтраницыПоВиду(ПараметрыКонтента.ВидСтраницы);
	
	#Область ТекстПуть
	МассивПуть = Новый Массив;
	МассивПуть.Добавить("home");
	МассивПуть.Добавить(ПараметрыПоВиду.Заголовок);
	ТекстПуть = ПолучитьHTML_Путь(ПараметрыКонтента.ОснКартинки, МассивПуть);
	#КонецОбласти
	
	#Область ТекстСтатьи
	ПараметрыБлока = Новый Структура("ОснКартинки, ВидСтраницы, Количество, Кнопки",
		ПараметрыКонтента.ОснКартинки,
		ПараметрыКонтента.ВидСтраницы,
		20,
		"");
	ТекстСтатьи = ПолучитьБлокСтатьи(ПараметрыБлока);
	#КонецОбласти
	
	// Итоговый результат
	Возврат ТекстПуть + ТекстСтатьи;
	
КонецФункции

// Возвращает готовый контент для вывода на странице по заданной статье
//
// Параметры:
//	ПараметрыКонтента - Структура
//		ОснКартинки - Структура
//			Ключ - имя картинки
//			Значение - путь к картинке
//		Ссылка - СправочникСсылка.СтатьиБазыЗнаний
//		ДопКартинки - Структура. Возвращаются адреса во временном хранилище на картинки в статье
//			ОписаниеФайла - Тип: ОписаниеПередаваемогоФайла
//			ДатаОбновления - Дата
//		
Функция ПолучитьКонтентСтатьи(ПараметрыКонтента) Экспорт
	
	// Считывание картинок статьи
	ПараметрыКонтента.ДопКартинки = ПолучитьАдресаКартинокИзСтатьи(ПараметрыКонтента.ОснКартинки, ПараметрыКонтента.Ссылка);
	
	#Область ТекстПуть
	МассивПуть		= ПолучитьПутьТекущейСтраницы(ПараметрыКонтента.Ссылка);
	ТекстПуть		= ПолучитьHTML_Путь(ПараметрыКонтента.ОснКартинки, МассивПуть);
	#КонецОбласти
	
	#Область ТекстСтатьи
	// Командная панель 
	ПараметрыПанели	= Новый Структура("Ссылка", ПараметрыКонтента.Ссылка);
	 //+++ АйТи Гречкин А.В. 12.05.2022 ТЗ № ИС00-005239 >> e1cib/data/Документ.ЗаданиеНаРаботу?ref=a90efc3497141b3f11ec4203a57b1d84, добавил в параметры панели "Избранное"		КнопкиПанели	= ПолучитьКоманднуюПанель_Статья(
		ПараметрыКонтента.ОснКартинки,
		ПараметрыПанели,
		"Изменить, ТребуетсяАктуализация, ПолучитьСсылку,Избранное");
	КоманднаяПанель	= ПолучитьHTML_КоманднаяПанель(ПараметрыКонтента.ОснКартинки, КнопкиПанели);
	 //--- АйТи Гречкин А.В. 12.05.2022 ТЗ № ИС00-005239 >> e1cib/data/Документ.ЗаданиеНаРаботу?ref=a90efc3497141b3f11ec4203a57b1d84

	ПараметрыВывода	= Новый Структура("КоманднаяПанель, Картинки",
		КоманднаяПанель,
		ПараметрыКонтента.ДопКартинки);
	ТекстСтатьи		= ПолучитьHTML_ОписаниеСтатьи(ПараметрыКонтента.ОснКартинки, ПараметрыКонтента.Ссылка, ПараметрыВывода);
	#КонецОбласти
	
	Возврат ТекстПуть + ТекстСтатьи;

КонецФункции

// Возвращает готовый контент для вывода на странице по ключевому слову
//
// Параметры:
//	ПараметрыКонтента - Структура
//		ОснКартинки - Структура
//			Ключ - имя картинки
//			Значение - путь к картинке
//		Ссылка - СправочникСсылка.СтатьиБазыЗнаний
//		
Функция ПолучитьКонтентКлючевогоСлова(ПараметрыКонтента) Экспорт
	
	#Область ТекстПуть
	МассивПуть		= ПолучитьПутьТекущейСтраницы(ПараметрыКонтента.КлючевоеСлово);
	Если ЗначениеЗаполнено(ПараметрыКонтента.Категория) Тогда
		МассивПуть.Вставить(1, ПараметрыКонтента.Категория);
	КонецЕсли;
	ТекстПуть		= ПолучитьHTML_Путь(ПараметрыКонтента.ОснКартинки, МассивПуть);
	#КонецОбласти
	
	#Область ТекстСтатьи
	ТаблицаСтатей	= ПолучитьСтатьиПоКлючевомуСлову(ПараметрыКонтента.КлючевоеСлово, ПараметрыКонтента.Категория);
	ПараметрыВывода	= Новый Структура("Информация, Заголовок, КраткийТекст",
		"КраткоеОписание",
		"Статьи по ключевому слову: " + Строка(ПараметрыКонтента.КлючевоеСлово),
		Истина);
	ТекстСтатьи		= ПолучитьHTML_Статьи_Кратко(ПараметрыКонтента.ОснКартинки, ТаблицаСтатей, ПараметрыВывода);
	ТекстСтатьи	 	= "<div id='articles'>" + ТекстСтатьи + "</div>";
	#КонецОбласти
	
	// Итоговый результат
	Возврат ТекстПуть + ТекстСтатьи;
	
КонецФункции

// Возвращает готовый контент для вывода на странице новостной ленты
//
// Параметры:
//	ПараметрыКонтента - Структура
//		ОснКартинки - Структура
//			Ключ - имя картинки
//			Значение - путь к картинке
//		
Функция ПолучитьКонтентНовостнаяЛента(ПараметрыКонтента) Экспорт
	
	#Область ТекстПуть
	МассивПуть = Новый Массив;
	МассивПуть.Добавить("home");
	МассивПуть.Добавить("Новостная лента");
	ТекстПуть		= ПолучитьHTML_Путь(ПараметрыКонтента.ОснКартинки, МассивПуть);
	#КонецОбласти
	
	#Область ТекстНовости
	ПараметрыБлока	= Новый Структура("ОснКартинки, ГлавнаяСтраница, Количество",
		ПараметрыКонтента.ОснКартинки,
		Ложь,
		20);
	ТекстНовости	= ПолучитьБлокНовости(ПараметрыБлока);
	#КонецОбласти
	
	Возврат ТекстПуть + ТекстНовости;
	
КонецФункции

// Возвращает готовый контент для вывода на странице по заданной новости
//
// Параметры:
//	ПараметрыКонтента - Структура
//		ОснКартинки - Структура
//			Ключ - имя картинки
//			Значение - путь к картинке
//		Ссылка - СправочникСсылка.НовостиБазыЗнаний
//		ДопКартинки - Структура. Возвращаются адреса во временном хранилище на картинки в статье
//			ОписаниеФайла - Тип: ОписаниеПередаваемогоФайла
//			ДатаОбновления - Дата
//		
Функция ПолучитьКонтентНовости(ПараметрыКонтента) Экспорт
	
	#Область ТекстПуть
	ПараметрыСсылки = Новый Структура("pagenum", "1");
	АдресСсылки		= БЗ_БазаЗнанийAPIКлиентСервер.КонструкторСсылки_page("news", ПараметрыСсылки);
	НовострнаяЛента	= "<a href='" + АдресСсылки + "'>" + НСтр("ru='Новостная лента'") + "</a>";
	
	МассивПуть = Новый Массив;
	МассивПуть.Добавить("home");
	МассивПуть.Добавить(НовострнаяЛента);
	МассивПуть.Добавить(Строка(ПараметрыКонтента.Ссылка));
	ТекстПуть		= ПолучитьHTML_Путь(ПараметрыКонтента.ОснКартинки, МассивПуть);
	#КонецОбласти
	
	#Область ТекстНовости
	ПараметрыВывода	= Новый Структура("КоманднаяПанель", "");
	ТекстНовости	= ПолучитьHTML_ОписаниеНовости(ПараметрыКонтента.ОснКартинки, ПараметрыКонтента.Ссылка, ПараметрыВывода);
	#КонецОбласти
	
	Возврат ТекстПуть + ТекстНовости;
	
КонецФункции

Функция ПолучитьКонтентПрофиляПользователя(Параметры) Экспорт
	
	// Путь к странице
	МассивПуть		= ПолучитьПутьТекущейСтраницы(Параметры.Пользователь);
	ТекстПуть		= ПолучитьHTML_Путь(Параметры.ОснКартинки, МассивПуть);
	
	// Профиль
	ТекстПрофиля	= ПолучитьHTML_Профиль(Параметры.ОснКартинки, Параметры.Пользователь);

	// Итоговый результат
	ТекстСтраницы	= ТекстПуть + ТекстПрофиля;
	Возврат ТекстСтраницы;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ФОРМИРОВАНИЕ БЛОКОВ СТРАНИЦ БАЗЫ ЗНАНИЙ

Функция ПолучитьБлокКомментарии(знач Параметры = Неопределено) Экспорт
	
	#Область ПодготовкаДанных
	ДанныеСтатьи = БЗ_БазаЗнаний.ПолучитьДанныеСтатьи(Параметры.Ссылка, "Комментарии");
	ДанныеСтатьи.Вставить("Ссылка", Параметры.Ссылка);
	#КонецОбласти
	
	#Область КоманднаяПанель
	#КонецОбласти
	
	#Область ТекстHTML
	ПараметрыВерстки	= Новый Структура("Картинки",
		Параметры.ДопКартинки);
	ТекстHTML = ПолучитьHTML_Комментарии(Параметры.ОснКартинки, ДанныеСтатьи, ПараметрыВерстки);
	#КонецОбласти
	
	Возврат ТекстHTML;
	
КонецФункции

Функция ПолучитьБлокНовости(знач Параметры = Неопределено) Экспорт
	
	ПустаяСсылка	= Справочники.БЗ_НовостиБазыЗнаний.ПустаяСсылка();
	
	Если НЕ ТипЗнч(Параметры) = Тип("Структура") Тогда
		Параметры = Новый Структура;
	КонецЕсли;
	
	БЗ_БазаЗнанийHTMLКлиентСервер.ПроверитьСвойствоКоллекции(Параметры, "ГлавнаяСтраница"	, Ложь);
	БЗ_БазаЗнанийHTMLКлиентСервер.ПроверитьСвойствоКоллекции(Параметры, "Количество"			, 7);
	БЗ_БазаЗнанийHTMLКлиентСервер.ПроверитьСвойствоКоллекции(Параметры, "ПредыдущаяСтраница"	, 0);
	БЗ_БазаЗнанийHTMLКлиентСервер.ПроверитьСвойствоКоллекции(Параметры, "ТекущаяСтраница"		, 1);
	БЗ_БазаЗнанийHTMLКлиентСервер.ПроверитьСвойствоКоллекции(Параметры, "Ссылка"				, ПустаяСсылка);
	
	#Область ПодготовкаДанных
	СтраницаНазад = (Параметры.ПредыдущаяСтраница > Параметры.ТекущаяСтраница);
	
	// Настройка упорядочивания
	НастройкиПорядка = "Дата ВОЗР, Ссылка ВОЗР";
	Если СтраницаНазад Тогда
		НапрСравнения		= ВидСравненияКомпоновкиДанных.Больше;
		НастройкиПорядка	= СтрЗаменить(НастройкиПорядка, " ВОЗР", "");
	Иначе 
		НапрСравнения		= ВидСравненияКомпоновкиДанных.Меньше;
		НастройкиПорядка	= СтрЗаменить(НастройкиПорядка, " ВОЗР", " УБЫВ");
	КонецЕсли;
	
	// Настройка отбора
	НастройкиОтбора		= Новый Массив;
	Если ЗначениеЗаполнено(Параметры.Ссылка) Тогда
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Параметры.Ссылка, "Дата, Ссылка");
		
		ГруппаИЛИ = БЗ_БазаЗнанийКлиентСервер.ДобавитьГруппуОтбора(НастройкиОтбора, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
		БЗ_БазаЗнанийКлиентСервер.ДобавитьЭлементОтбора(ГруппаИЛИ.Элементы, "Дата", Реквизиты.Дата, НапрСравнения);
		
		ГруппаИ = БЗ_БазаЗнанийКлиентСервер.ДобавитьГруппуОтбора(ГруппаИЛИ.Элементы);
		БЗ_БазаЗнанийКлиентСервер.ДобавитьЭлементОтбора(ГруппаИ.Элементы, "Дата", Реквизиты.Ссылка, ВидСравненияКомпоновкиДанных.Равно);
		БЗ_БазаЗнанийКлиентСервер.ДобавитьЭлементОтбора(ГруппаИ.Элементы, "Ссылка", Реквизиты.Ссылка, НапрСравнения);
	КонецЕсли;
	
	// Запрос данных
	ТаблицаНовостей	= БЗ_БазаЗнаний.ПолучитьНовости(НастройкиОтбора, НастройкиПорядка, Параметры.Количество + 1);
	КоличествоСтрок	= ТаблицаНовостей.Количество();
	Если КоличествоСтрок <= Параметры.Количество Тогда
		КонецСтраниц = ?(СтраницаНазад, Ложь, Истина);
	Иначе
		КонецСтраниц = Ложь;
		КоличествоСтрок = КоличествоСтрок - 1;
		ТаблицаНовостей.Удалить(КоличествоСтрок);
	КонецЕсли;
	#КонецОбласти
	
	#Область КоманднаяПанель
	ПараметрыПанели = Новый Структура("Количество, НомерСтраницы, ПерваяЗапись, ПоследняяЗапись, ГлавнаяСтраница, Конец",
		Параметры.Количество,
		Параметры.ТекущаяСтраница,
		?(КоличествоСтрок = 0, ПустаяСсылка, ТаблицаНовостей[0].Ссылка),
		?(КоличествоСтрок = 0, ПустаяСсылка, ТаблицаНовостей[КоличествоСтрок-1].Ссылка),
		Параметры.ГлавнаяСтраница,
		КонецСтраниц);
	ДанныеПанели	= ПолучитьКоманднуюПанель_Новости(Параметры.ОснКартинки, ПараметрыПанели, "ПереключениеСтраниц");
	КоманднаяПанель	= ПолучитьHTML_КоманднаяПанель(Параметры.ОснКартинки, ДанныеПанели);
	#КонецОбласти
	
	#Область ТекстHTML
	ПараметрыВерстки	= Новый Структура("КоманднаяПанель, ГлавнаяСтраница",
		КоманднаяПанель,
		Параметры.ГлавнаяСтраница);
	ТекстHTML			= ПолучитьHTML_Новости(Параметры.ОснКартинки, ТаблицаНовостей, ПараметрыВерстки);
	#КонецОбласти
	
	Возврат ТекстHTML;
	
КонецФункции

Функция ПолучитьБлокСтатьи(знач Параметры = Неопределено) Экспорт
	
	ПустаяСсылка	= Справочники.БЗ_СтатьиБазыЗнаний.ПустаяСсылка();
	ПустаяКатегория	= Справочники.БЗ_КатегорииБазыЗнаний.ПустаяСсылка();
	
	Если НЕ ТипЗнч(Параметры) = Тип("Структура") Тогда
		Параметры = Новый Структура;
	КонецЕсли;
	
	БЗ_БазаЗнанийHTMLКлиентСервер.ПроверитьСвойствоКоллекции(Параметры, "ВидСтраницы"			, "category_articles");
	БЗ_БазаЗнанийHTMLКлиентСервер.ПроверитьСвойствоКоллекции(Параметры, "Количество"			, 20);
	БЗ_БазаЗнанийHTMLКлиентСервер.ПроверитьСвойствоКоллекции(Параметры, "ПредыдущаяСтраница"	, 0);
	БЗ_БазаЗнанийHTMLКлиентСервер.ПроверитьСвойствоКоллекции(Параметры, "ТекущаяСтраница"		, 1);
	БЗ_БазаЗнанийHTMLКлиентСервер.ПроверитьСвойствоКоллекции(Параметры, "Ссылка"				, ПустаяСсылка);
	БЗ_БазаЗнанийHTMLКлиентСервер.ПроверитьСвойствоКоллекции(Параметры, "Категория"			, ПустаяКатегория);
	
	ПараметрыПоВиду	= БЗ_БазаЗнанийHTMLКлиентСервер.ПолучитьПараметрыВыводаСтраницыПоВиду(Параметры.ВидСтраницы);
	
	#Область ПодготовкаДанных
	СтраницаНазад	= (Параметры.ПредыдущаяСтраница > Параметры.ТекущаяСтраница);
	Направление		= ?(СтраницаНазад, "УБЫВ", "");
	
	// Настройка упорядочивания
	НастройкиПорядка	= ПолучитьНастройкуПорядкаПоВидуСтраницыСтатей(Параметры.ВидСтраницы, Направление);
	
	// Настройка отбора
	НастройкиОтбора		= ПолучитьНастройкуОтбораПоВидуСтраницыСтатей(Параметры.ВидСтраницы, Направление, Параметры.Ссылка);
	Если Параметры.ВидСтраницы = "category_articles" Тогда
		БЗ_БазаЗнанийКлиентСервер.ДобавитьЭлементОтбора(НастройкиОтбора, "Категории.Категория", Параметры.Категория, ВидСравненияКомпоновкиДанных.Равно);
	КонецЕсли;
	
	// Запрос данных
	ТаблицаСтатей	= БЗ_БазаЗнаний.ПолучитьСтатьи(НастройкиОтбора, НастройкиПорядка, Параметры.Количество + 1);
	КоличествоСтрок	= ТаблицаСтатей.Количество();
	Если КоличествоСтрок <= Параметры.Количество Тогда
		КонецСтраниц = ?(СтраницаНазад, Ложь, Истина);
	Иначе
		КонецСтраниц = Ложь;
		КоличествоСтрок = КоличествоСтрок - 1;
		ТаблицаСтатей.Удалить(КоличествоСтрок);
	КонецЕсли;
	
	ТаблицаСтатей.Сортировать(ПараметрыПоВиду.Порядок);
	#КонецОбласти
	
	#Область КоманднаяПанель
	ПараметрыПанели = Новый Структура("ВидСтраницы, Количество, НомерСтраницы, ПерваяЗапись, ПоследняяЗапись, Конец, Категория",
		Параметры.ВидСтраницы,
		Параметры.Количество,
		Параметры.ТекущаяСтраница,
		?(КоличествоСтрок = 0, ПустаяСсылка, ТаблицаСтатей[0].Ссылка),
		?(КоличествоСтрок = 0, ПустаяСсылка, ТаблицаСтатей[КоличествоСтрок-1].Ссылка),
		КонецСтраниц,
		Параметры.Категория);
	ДанныеПанели	= ПолучитьКоманднуюПанель_Статьи(Параметры.ОснКартинки, ПараметрыПанели, ПараметрыПоВиду.Кнопки);
	КоманднаяПанель	= ПолучитьHTML_КоманднаяПанель(Параметры.ОснКартинки, ДанныеПанели);
	#КонецОбласти
	
	#Область ТекстHTML
	ПараметрыВерстки	= Новый Структура("Информация, Заголовок, КраткийТекст, КоманднаяПанель",
		ПараметрыПоВиду.Информация,
		ПараметрыПоВиду.Заголовок,
		Истина,
		КоманднаяПанель);
	ТекстHTML		= ПолучитьHTML_Статьи_Кратко(Параметры.ОснКартинки, ТаблицаСтатей, ПараметрыВерстки);
	ТекстHTML	 	= "<div id='articles' style='margin-right:0'>" + ТекстHTML + "</div>";
	#КонецОбласти
	
	Возврат ТекстHTML;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////

#Область ПолучитьHTML

// Формирует текст HTML блока "Путь"
//
// Параметры
//	АдресаКартинок - Структура
//	МассивПуть - Массив
//		СправочникСсылка.СтатьиБазыЗнаний, СправочникСсылка.КатегорииБазыЗнаний, Строка
//
// Возвращаемое значение
//	Строка
//
Функция ПолучитьHTML_Путь(АдресаКартинок, МассивПуть)
	                                                         
	Если МассивПуть.Количество() = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	ПутьКСтранице = "";
	Для Каждого ЗначениеПути Из МассивПуть Цикл
		ПутьКСтранице = ПутьКСтранице + ?(ПустаяСтрока(ПутьКСтранице), "", " &rArr; ");
		
		ТипЗначения = ТипЗнч(ЗначениеПути);
		Если ЗначениеПути = "home" Тогда
			АдресСсылки		= БЗ_БазаЗнанийAPIКлиентСервер.КонструкторСсылки_page("home");
			ПутьКСтранице	= ПутьКСтранице + "<a href='" + АдресСсылки + "'>Home</a>";
		ИначеЕсли ТипЗначения = Тип("СправочникСсылка.БЗ_КатегорииБазыЗнаний") Тогда
			ПараметрыСсылки	= Новый Структура("id", Строка(ЗначениеПути.УникальныйИдентификатор()));
			АдресСсылки		= БЗ_БазаЗнанийAPIКлиентСервер.КонструкторСсылки_page("category", ПараметрыСсылки);
			ПутьКСтранице	= ПутьКСтранице + "<a href='" + АдресСсылки + "'>" + Строка(ЗначениеПути) + "</a>";
		ИначеЕсли ТипЗначения = Тип("СправочникСсылка.БЗ_СтатьиБазыЗнаний") Тогда
			ПараметрыСсылки	= Новый Структура("id", Строка(ЗначениеПути.УникальныйИдентификатор()));
			АдресСсылки		= БЗ_БазаЗнанийAPIКлиентСервер.КонструкторСсылки_page("article", ПараметрыСсылки);
			ПутьКСтранице = ПутьКСтранице + "<a href='" + АдресСсылки + "'>" + Строка(ЗначениеПути) + "</a>";
		ИначеЕсли ТипЗначения = Тип("СправочникСсылка.БЗ_КлючевыеСловаБазыЗнаний") Тогда
			ПараметрыСсылки	= Новый Структура("id", Строка(ЗначениеПути.УникальныйИдентификатор()));
			АдресСсылки		= БЗ_БазаЗнанийAPIКлиентСервер.КонструкторСсылки_page("tag", ПараметрыСсылки);
			ПутьКСтранице = ПутьКСтранице + "<a href='" + АдресСсылки + "'>" + Строка(ЗначениеПути) + "</a>";
		ИначеЕсли ТипЗначения = Тип("СправочникСсылка.Пользователи") Тогда
			ПараметрыСсылки	= Новый Структура("id", Строка(ЗначениеПути.УникальныйИдентификатор()));
			АдресСсылки		= БЗ_БазаЗнанийAPIКлиентСервер.КонструкторСсылки_page("user", ЗначениеПути);
			ПутьКСтранице = ПутьКСтранице + "<a href='" + АдресСсылки + "'>" + Строка(ЗначениеПути) + "</a>";
		ИначеЕсли ТипЗначения = Тип("СправочникСсылка.БЗ_НовостиБазыЗнаний") Тогда
			ПараметрыСсылки	= Новый Структура("id", Строка(ЗначениеПути.УникальныйИдентификатор()));
			АдресСсылки		= БЗ_БазаЗнанийAPIКлиентСервер.КонструкторСсылки_page("news_item", ЗначениеПути);
			ПутьКСтранице = ПутьКСтранице + "<a href='" + АдресСсылки + "'>" + Строка(ЗначениеПути) + "</a>";
		ИначеЕсли ТипЗначения = Тип("Строка") Тогда 
			ПутьКСтранице = ПутьКСтранице + ЗначениеПути;
		КонецЕсли;
	КонецЦикла;
	
	ТекстСтраницы = "
	|<div id='page_path'>
	|	<img src='" + АдресаКартинок.Путь + "' class='flt_l'>
	|	<div>" + ПутьКСтранице + "</div>
	|</div>";
	
	Возврат ТекстСтраницы;
	
КонецФункции

// Формирует текст HTML блока "Новостная лента"
//
// Параметры
//	АдресаКартинок - Структура
//	МассивНовостей - Массив
//		Структура
//			Идентификатор - УникальныйИдентификатор
//			Наименование - Строка
//			Описание - Строка
//
// Возвращаемое значение
//	Строка
//
Функция ПолучитьHTML_Новости(АдресаКартинок, ТаблицаНовостей, знач Параметры = Неопределено)
	
	Если Параметры = Неопределено Тогда
		Параметры = Новый Структура;
	КонецЕсли;
	
	БЗ_БазаЗнанийHTMLКлиентСервер.ПроверитьСвойствоКоллекции(Параметры, "ГлавнаяСтраница", Ложь);
	БЗ_БазаЗнанийHTMLКлиентСервер.ПроверитьСвойствоКоллекции(Параметры, "КоманднаяПанель", "");
	
	Если Параметры.ГлавнаяСтраница Тогда
		ПараметрыСсылки = Новый Структура("pagenum", "1");
		АдресСсылки		= БЗ_БазаЗнанийAPIКлиентСервер.КонструкторСсылки_page("news", ПараметрыСсылки);
		ТекстЗаголовок	= "<a href='" + АдресСсылки + "'>" + НСтр("ru='Новостная лента'") + "</a>";
	Иначе 
		ТекстЗаголовок	= НСтр("ru='Новостная лента'");
	КонецЕсли;
	
	ТекстНовости	= 
	"<div id='news'>
	|	<h1>" + Параметры.КоманднаяПанель + ТекстЗаголовок + "</h1>
	|";
	
	ПеречислениеМенеджер = Перечисления.БЗ_ВидыНовостейБазыЗнаний;
	КартинкиПоВиду = Новый Соответствие;
	КартинкиПоВиду.Вставить(ПеречислениеМенеджер.Создание	, АдресаКартинок.НовостьСоздание);
	КартинкиПоВиду.Вставить(ПеречислениеМенеджер.Изменение	, АдресаКартинок.НовостьИзменение);
	КартинкиПоВиду.Вставить(ПеречислениеМенеджер.Удаление	, АдресаКартинок.НовостьУдаление);
	КартинкиПоВиду.Вставить(ПеречислениеМенеджер.Оповещение	, АдресаКартинок.НовостьОповещение);
	КартинкиПоВиду.Вставить(ПеречислениеМенеджер.Прочее		, АдресаКартинок.НовостьПрочее);
	
	Для Каждого СтрокаТаблицы Из ТаблицаНовостей Цикл
		ПараметрыСсылки	= Новый Структура("id", Строка(СтрокаТаблицы.Идентификатор));
		АдресСсылки		= БЗ_БазаЗнанийAPIКлиентСервер.КонструкторСсылки_page("news_item", ПараметрыСсылки);
		
		СтильСсылки		= "";
		Если СтрокаТаблицы.Просмотрено Тогда
			СтильСсылки = "color:#fa7373; ";
		КонецЕсли;
		
		ПутьККартинке = КартинкиПоВиду.Получить(СтрокаТаблицы.Вид);
		Если ПутьККартинке = Неопределено Тогда
			ПутьККартинке = АдресаКартинок.НовостьПрочее;
		КонецЕсли;
		
		СтрИнформация	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru=' добавлена: %1; автор: %2; просмотров: %3.'"),
			Формат(СтрокаТаблицы.Дата, "ДЛФ=D"),
			Строка(СтрокаТаблицы.Автор),
			Формат(СтрокаТаблицы.Просмотров, "ЧН=0; ЧГ="));
		
		ТекстНовости = ТекстНовости + "
		|	<div class='news'>
		|		<div class='descr flt_l'>
		|			<img src='" + ПутьККартинке + "' class='flt_l'>
		|			<a style='" + СтильСсылки + "' href='" + АдресСсылки + "'>" + СокрЛП(СтрокаТаблицы.Заголовок) + "</a>
		|		</div>
		|		<div class='info'>
		|			<span style='font-size:13px;'>|</span> " + СтрИнформация + "
		|		</div>
		|		[[КраткийТекстНовости]]
		|	</div>";
		
		Если Параметры.ГлавнаяСтраница Тогда
			КраткийТекстНовости	= "";
		Иначе
			КраткийТекстНовости	= "<div class='text'>" + Лев(СтрокаТаблицы.Текст, 300) + "..." + "</div>";			
		КонецЕсли;
		
		ТекстНовости = СтрЗаменить(ТекстНовости, "[[КраткийТекстНовости]]", КраткийТекстНовости);
	КонецЦикла;
	
	ТекстНовости = ТекстНовости + "
	|</div>";
	
	Возврат ТекстНовости;
	
КонецФункции

// Формирует текст HTML блока "Новостная лента"
//
// Параметры
//	АдресаКартинок - Структура
//	МассивНовостей - Массив
//		Структура
//			Идентификатор - УникальныйИдентификатор
//			Наименование - Строка
//			Описание - Строка
//
// Возвращаемое значение
//	Строка
//
Функция ПолучитьHTML_ОписаниеНовости(АдресаКартинок, НовостьСсылка, знач Параметры = Неопределено)
	
	Если Параметры = Неопределено Тогда
		Параметры = Новый Структура;
	КонецЕсли;
	
	БЗ_БазаЗнанийHTMLКлиентСервер.ПроверитьСвойствоКоллекции(Параметры, "КоманднаяПанель", "");
	
	ДанныеНовости	= ОбщегоНазначения.ЗначенияРеквизитовОбъекта(НовостьСсылка, "Наименование, Дата, ТекстHTML, Важность, Автор");
	
	ТекстНовости	= 
	"<div id='newsitem'>
	|	<h1>" + Параметры.КоманднаяПанель + ДанныеНовости.Наименование + "</h1>
	|	<div class='text'>
	|		" + ДанныеНовости.ТекстHTML;
	
	ТекстНовости = ТекстНовости + "	</div>
	|</div>";
	
	Возврат ТекстНовости;
	
КонецФункции

// Формирует текст HTML блока "Категории"
//
// Параметры
//	АдресаКартинок - Структура
//	МассивКатегорий - Массив
//		Структура
//			Идентификатор - УникальныйИдентификатор
//			Наименование - Строка
//			КоличествоСтатей - Число
//			Описание - Строка
// 	Параметры - Структура.
//		КнопкаДобавить - Булево
//		КнопкаИзменить - Булево
//		Категория - СправочникСсылка.КатегорииБазыЗнаний
//		Заголовок - Строка (возможно использование HTML)
//
// Возвращаемое значение
//	Строка
//
Функция ПолучитьHTML_Категории(АдресаКартинок, ТаблицаКатегории, знач Параметры = Неопределено)
	
	Если Параметры = Неопределено Тогда
		Параметры = Новый Структура;
	КонецЕсли;
	
	ЗаголовокПоУмолчанию = ?(Параметры.Свойство("Категория") И ЗначениеЗаполнено(Параметры.Категория), 
		"Категория: " + Строка(Параметры.Категория),
		"Категории");
	
	БЗ_БазаЗнанийHTMLКлиентСервер.ПроверитьСвойствоКоллекции(Параметры, "Категория"			, Неопределено);
	БЗ_БазаЗнанийHTMLКлиентСервер.ПроверитьСвойствоКоллекции(Параметры, "Заголовок"			, ЗаголовокПоУмолчанию);
	БЗ_БазаЗнанийHTMLКлиентСервер.ПроверитьСвойствоКоллекции(Параметры, "КоманднаяПанель"	, "");
	
	КатегорияРодитель		= Параметры.Категория;
	ИдентификаторРодитель	= ?(НЕ ЗначениеЗаполнено(КатегорияРодитель), "", Строка(КатегорияРодитель.УникальныйИдентификатор()));
	
	Количество	= ТаблицаКатегории.Количество();
	
	ТекстСтраницы = "
	|<div id='categories'>
	|	<h1>" + Параметры.КоманднаяПанель + Параметры.Заголовок + "</h1>
	|	[[ТаблицаКатегорий]]
	|</div>
	|";
	
	Если Количество = 0 Тогда
		Возврат СтрЗаменить(ТекстСтраницы, "[[ТаблицаКатегорий]]", "");
	КонецЕсли;
	
	КоличествоНаСтраницу = 0;
	Если Количество > 6 Тогда
		ТекстВнутр = "
		|			<td>[[Категории_1_3]]</td>
		|			<td>[[Категории_4_6]]</td>
		|			<td>[[Категории_7_9]]</td>
		|";
		КоличествоНаСтраницу = Цел(Количество / 3);
	ИначеЕсли Количество > 3 Тогда
		ТекстВнутр = "
		|			<td>[[Категории_1_3]]</td>
		|			<td>[[Категории_4_6]]</td>
		|";
		КоличествоНаСтраницу = Цел(Количество / 2);
	Иначе 
		ТекстВнутр = "
		|			<td>[[Категории_1_3]]</td>
		|";
		КоличествоНаСтраницу = Количество;
	КонецЕсли;
	
	ТекстСтраницы = СтрЗаменить(ТекстСтраницы, "[[ТаблицаКатегорий]]", "
	|	<table>
	|		<tr>" + ТекстВнутр + "</tr>
	|	</table>
	|");
	
	// Добавим записи по категориям
	Категории_1_3 = "";
	Категории_4_6 = "";
	Категории_7_9 = "";
	
	НомерСтраницы	= 1;
	Счетчик			= 0;
	Для Каждого СтрокаТаблицы Из ТаблицаКатегории Цикл
		Счетчик = Счетчик + 1;
		Если Счетчик > КоличествоНаСтраницу Тогда
			Счетчик = 0;
			НомерСтраницы = НомерСтраницы + 1;
		КонецЕсли;
		
		Идентификатор	= Строка(СтрокаТаблицы.Идентификатор);
		АдресКартинки	= ?(СтрокаТаблицы.Тип = 0, АдресаКартинок.КатегорияПубличная, АдресаКартинок.Категория);
		
		ПараметрыСсылки	= Новый Структура("id", Идентификатор);
		АдресСсылки		= БЗ_БазаЗнанийAPIКлиентСервер.КонструкторСсылки_page("category", ПараметрыСсылки);
		
		ЕстьВИзбранном	= (СтрокаТаблицы.Избранное <> Неопределено);
		
		ТекстКатегории = "
		|				<div class='category'>
		|					<div class='title'>
		|						<div class='stat flt_r'>
		|							" + ?(ЕстьВИзбранном, "<img src='" + АдресаКартинок.Кнопка + "' class='flt_l' title='Вы подписаны на данную категорию'>", "") + "
		|							<div class='text' title='Количество статей'>" + Формат(СтрокаТаблицы.КоличествоСтатей, "ЧДЦ=; ЧН=0; ЧГ=") + "</div>
		|						</div>
		|						<img src='" + АдресКартинки + "' class='flt_l'>
		|						<h2><a href='" + АдресСсылки + "'>" + СтрокаТаблицы.Наименование + "</a></h2>
		|					</div>
		|					<div class='info'>" + СокрЛП(СтрокаТаблицы.Описание) + "</div>
		|				</div>
		|			";
		
		Если НомерСтраницы = 1 Тогда
			Категории_1_3 = Категории_1_3 + ТекстКатегории;
		ИначеЕсли НомерСтраницы = 2 Тогда
			Категории_4_6 = Категории_4_6 + ТекстКатегории;
		ИначеЕсли НомерСтраницы = 3 Тогда
			Категории_7_9 = Категории_7_9 + ТекстКатегории;
		КонецЕсли;
	КонецЦикла;
	
	ТекстСтраницы = СтрЗаменить(ТекстСтраницы, "[[Категории_1_3]]", Категории_1_3);
	ТекстСтраницы = СтрЗаменить(ТекстСтраницы, "[[Категории_4_6]]", Категории_4_6);
	ТекстСтраницы = СтрЗаменить(ТекстСтраницы, "[[Категории_7_9]]", Категории_7_9);
	
	Возврат ТекстСтраницы;
	
КонецФункции

// Формирует текст HTML блока "Облако тегов"
Функция ПолучитьHTML_Теги(КатегорияСсылка)
	
	ТаблицаТегов = БЗ_БазаЗнаний.ПолучитьМассивКлючевыхСловПоКатегории(КатегорияСсылка, 30);
	Максимум = ?(ТаблицаТегов.Количество() > 0, ТаблицаТегов[0].Количество, 0);
	
	СтраницаТегов = "
	|<div id='tags'><ul>";
	
	ТаблицаТегов.Сортировать("Наименование");
	Для Каждого СтрокаТаблицы Из ТаблицаТегов Цикл
		НомерТега	= Цел(СтрокаТаблицы.Количество / ?(Максимум = 0, 1, Максимум) * 5);
		
		ПараметрыСсылки	= Новый Структура;
		ПараметрыСсылки.Вставить("id", Строка(СтрокаТаблицы.КлючевоеСлово.УникальныйИдентификатор()));
		Если ЗначениеЗаполнено(КатегорияСсылка) Тогда
			ПараметрыСсылки.Вставить("category", КатегорияСсылка.УникальныйИдентификатор());
		КонецЕсли;
		АдресСсылки		= БЗ_БазаЗнанийAPIКлиентСервер.КонструкторСсылки_page("tag", ПараметрыСсылки);
		
		СтраницаТегов = СтраницаТегов + "
		|	<li class='tag" + Формат(НомерТега, "ЧГ=") + "'><a href='" + АдресСсылки + "'>" + СокрЛП(СтрокаТаблицы.Наименование) + "</a></li>";
	КонецЦикла;
	
	СтраницаТегов = СтраницаТегов + "</ul></div>";
	
	Возврат ?(ТаблицаТегов.Количество() = 0, "", СтраницаТегов);
	
КонецФункции

// Формирует текст HTML блока "Статьи"
//
// Параметры
//	АдресаКартинок - Структура
//	МассивСтатей - Массив
//		Структура
//			Идентификатор - УникальныйИдентификатор
//			Заголовок - Строка
//			и пр. поля из запроса в процедуре ДополнитьМассивСтатейДанными
//	Параметры
//		Информация - Строка
//			Допустимые значения: любое поле из запроса в процедуре ДополнитьМассивСтатейДанными
//			кроме полей вложенных подзапросов
//		КнопкаДобавить - Булево
//		КнопкаИзменить - Булево
//		Статья - СправочникСсылка.СтатьиБазыЗнаний
//		Заголовок - Строка (возможно использование HTML)
//
// Возвращаемое значение
//	Строка
//
Функция ПолучитьHTML_Статьи_Кратко(АдресаКартинок, ТаблицаСтатей, знач Параметры = Неопределено)
	
	Если Параметры = Неопределено Тогда
		Параметры = Новый Структура;
	КонецЕсли;
	
	ЗаголовокПоУмолчанию = ?(Параметры.Свойство("Статья") И ЗначениеЗаполнено(Параметры.Статья), 
		Строка(Параметры.Статья),
		"Статьи");
	
	Количество	= ТаблицаСтатей.Количество();

	БЗ_БазаЗнанийHTMLКлиентСервер.ПроверитьСвойствоКоллекции(Параметры, "Статья"			, Неопределено);
	БЗ_БазаЗнанийHTMLКлиентСервер.ПроверитьСвойствоКоллекции(Параметры, "Заголовок"		, ЗаголовокПоУмолчанию);
	БЗ_БазаЗнанийHTMLКлиентСервер.ПроверитьСвойствоКоллекции(Параметры, "КраткийТекст"		, Ложь);
	БЗ_БазаЗнанийHTMLКлиентСервер.ПроверитьСвойствоКоллекции(Параметры, "КоманднаяПанель"	, "");
	
	ТекстСтраницы = "
	|	<h1>" + Параметры.КоманднаяПанель + Параметры.Заголовок + "</h1>
	|	[[Статьи]]
//{{MRG[ <-> ]
	|" + ?(Количество<>0, "<br></br>" + Параметры.КоманднаяПанель,""); //+++ АйТи Чириков В.А. 15.07.2022 Продублировал вывод командной панели после списка статей. Задача: e1cib/data/Документ.ЗаданиеНаРаботу?ref=a91bfc3497141b3f11ecda6dbd021512 
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//	|";
//}}MRG[ <-> ]
	
	Если Количество = 0 Тогда
		Возврат СтрЗаменить(ТекстСтраницы, "[[Статьи]]", "");
	КонецЕсли;
	
	ТаблицаСтатей.Колонки.Добавить("Опубликована");
	ТаблицаСтатей.Колонки.Добавить("Просмотрена");
	ТаблицаСтатей.Колонки.Добавить("Оценена");
	ТаблицаСтатей.Колонки.Добавить("СтатьяПомогла");
	
	ЗаполнитьСтатьяПомогла(ТаблицаСтатей);
	
	ТекстСтатей		= "";
	Для Каждого СтрокаТаблицы Из ТаблицаСтатей Цикл
		ДополнитьИнформациюПоСтатье(СтрокаТаблицы);
		
		ПараметрыСсылки	= Новый Структура("id", Строка(СтрокаТаблицы.Идентификатор));
		АдресСсылки		= БЗ_БазаЗнанийAPIКлиентСервер.КонструкторСсылки_page("article", ПараметрыСсылки);
		
		ТекстСтатей = ТекстСтатей + "
		|				<div class='article_s'>
		|					<div class='head'>
		|						<div class='stat'>
		|							<div class='text' title='Количество комментариев'>
		|								<img src='" + АдресаКартинок.Комментарии + "'>
		|								" + Формат(СтрокаТаблицы.Комментарии, "ЧН=0; ЧГ=") + "
		|							</div>
		|							<div class='text' title='Статья помогла'>
		//|								<img src='" + АдресаКартинок.ЗвездаПолная + "'>
		//|								" + Формат(СтрокаТаблицы.СредняяОценка, "ЧН=0; ЧГ=") + "
		|								<img src='" + АдресаКартинок.ЗеленнаяГалка + "'>
		|								" + СтрокаТаблицы.СтатьяПомогла + "
		|							</div>
		|						</div>
		|						<h2><a href='" + АдресСсылки + "'>" + СтрокаТаблицы.Наименование + "</a></h2>
		|						<div class='info'>" + СтрокаТаблицы[Параметры.Информация] + "</div>
		|						[[КраткийТекстСтатьи]]
		|					</div>
		|				</div>
		|";
		
		Если Параметры.КраткийТекст Тогда
			ПодготовленныйТекст	= БЗ_БазаЗнанийКлиентСервер.ОбработатьТекстСтатьи(СтрокаТаблицы.Текст);
			КраткийТекстСтатьи	= "<div class='text'>" + Лев(ПодготовленныйТекст, 300) + "..." + "</div>";
		Иначе
			КраткийТекстСтатьи	= "";
		КонецЕсли;
		
		ТекстСтатей = СтрЗаменить(ТекстСтатей, "[[КраткийТекстСтатьи]]", КраткийТекстСтатьи);
	КонецЦикла;
	
	Возврат СтрЗаменить(ТекстСтраницы, "[[Статьи]]", ТекстСтатей);
	
КонецФункции

// Формирует текст HTML блока "Статьи" на главной странице
//
// Параметры
//	АдресаКартинок - Структура
//	СтруктураСтатей - Структура
//		Рекомендуемые - Массив (см. МассивСтатей функции ТекстHTML_Статьи)
//		Новые - Массив (см. МассивСтатей функции ТекстHTML_Статьи)
//		Популярные - Массив (см. МассивСтатей функции ТекстHTML_Статьи)
//		Рейтинговые - Массив (см. МассивСтатей функции ТекстHTML_Статьи)
//
// Возвращаемое значение
//	Строка
//
Функция ПолучитьHTML_СтатьиТитульнойСтраницы(АдресаКартинок, СтруктураСтатей)
	
	Если СтруктураСтатей.Количество() = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	МассивТекстов = Новый Массив;
	Для Каждого КлючИЗначение Из СтруктураСтатей Цикл
		ВидСтраницы		= КлючИЗначение.Ключ;
		ТаблицаДанных	= КлючИЗначение.Значение;
		ПараметрыПоВиду	= БЗ_БазаЗнанийHTMLКлиентСервер.ПолучитьПараметрыВыводаСтраницыПоВиду(ВидСтраницы);
		
		АдресСсылки = БЗ_БазаЗнанийAPIКлиентСервер.КонструкторСсылки_page(ВидСтраницы);
		
		ПараметрыВывода = Новый Структура("Информация, Заголовок",
			ПараметрыПоВиду.Информация,
			"<a href='" + АдресСсылки + "'>" + ПараметрыПоВиду.Заголовок + "</a>");
		ТекстHTML = ПолучитьHTML_Статьи_Кратко(АдресаКартинок, ТаблицаДанных, ПараметрыВывода);
		
		МассивТекстов.Добавить(ТекстHTML);
	КонецЦикла;
	
	КоличествоБлоков = МассивТекстов.Количество();
	
	ТекстСтраницы = "
	|<div id='articles'>
	|	<table width='100%'>
	|		<tr>
	|			<td style='padding:0 5px 0 0;'>
	|				" + ?(КоличествоБлоков > 0, МассивТекстов[0], "") + "
	|			</td>
	|			<td style='padding:0 0 0 5px;'>
	|				" + ?(КоличествоБлоков > 1, МассивТекстов[1], "") + "
	|			</td>
	|		</tr>
	|		<tr>
	|			<td style='padding:10px 5px 0 0;'>
	|				" + ?(КоличествоБлоков > 2, МассивТекстов[2], "") + "
	|			</td>
	|			<td style='padding:10px 0 0 5px;'>
	|				" + ?(КоличествоБлоков > 3, МассивТекстов[3], "") + "
	|			</td>
	|		</tr>
	|	</table>
	|</div>
	|";
	
	Возврат ТекстСтраницы;
	
КонецФункции

// Формирует текст HTML блока "Статья"
//
// Параметры
//	АдресаКартинок - Структура
//	СтатьяСсылка - СправочникСсылка.СтатьиБазыЗнаний
//	Параметры
//		КнопкаИзменить - Булево
//		КнопкаОценить - Булево
//
// Возвращаемое значение
//	Строка
//
Функция ПолучитьHTML_ОписаниеСтатьи(АдресаКартинок, СтатьяСсылка, знач Параметры = Неопределено)
	
	Если Параметры = Неопределено Тогда
		Параметры = Новый Структура;
	КонецЕсли;
	
	БЗ_БазаЗнанийHTMLКлиентСервер.ПроверитьСвойствоКоллекции(Параметры, "Картинки"			, Новый Соответствие);
	БЗ_БазаЗнанийHTMLКлиентСервер.ПроверитьСвойствоКоллекции(Параметры, "КоманднаяПанель"	, "");
	
	ДанныеСтатьи	= БЗ_БазаЗнаний.ПолучитьДанныеСтатьи(СтатьяСсылка);
	Идентификатор	= Строка(ДанныеСтатьи.Идентификатор);
	
	// Содержание статьи
	ТекстСодержание = "
	|	" + ПолучитьHTML_СодержаниеСтатьи(АдресаКартинок, ДанныеСтатьи, Параметры) + "
	|";
	
	// Дополнительная информация
	ЗначениеОценки		= Строка(ДанныеСтатьи.СредняяОценка) + "/5";
	КоличествоГолосов	= Формат(ДанныеСтатьи.Проголосовало, "ЧН=0; ЧГ=") + " голос" + ?(ДанныеСтатьи.Проголосовало > 1, "ов", "");
	
	ПараметрыСсылки		= Новый Структура("id", Строка(ДанныеСтатьи.Ответственный.УникальныйИдентификатор()));
	АдресСсылкиСоздал	= БЗ_БазаЗнанийAPIКлиентСервер.КонструкторСсылки_page("user", ПараметрыСсылки);
	
	//+++ Иванов
	СтатьяПомогла = Строка(КоличествоРазСтатьяПомогла(СтатьяСсылка));
	
	ТекстДопИнформация	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"Создал: %1 | Статья помогла: %2 раз | Обновлена: %3",
		"<a href='" + АдресСсылкиСоздал + "'>" + Строка(ДанныеСтатьи.Ответственный) + "</a>",
		//?(ДанныеСтатьи.СредняяОценка > 0, ЗначениеОценки + " (" + КоличествоГолосов + ")", "нет данных") ,
		СтатьяПомогла,
		Формат(ДанныеСтатьи.Изменена, "ДФ='ддд, дд/ММ/гггг'"));
	
	// Ключевые слова (теги)
	ТекстКлючевыеСлова = "";
	Для Каждого СтрокаТаблицы Из ДанныеСтатьи.КлючевыеСлова Цикл
		ПараметрСсылки		= Новый Структура("id", Строка(СтрокаТаблицы.Ссылка.УникальныйИдентификатор()));
		АдресСсылки			= БЗ_БазаЗнанийAPIКлиентСервер.КонструкторСсылки_page("tag", ПараметрСсылки);
		ТекстКлючевыеСлова	= ТекстКлючевыеСлова + "
		|	<li><a href='" + АдресСсылки + "'>" + СокрЛП(СтрокаТаблицы.Наименование) + "</a></li>";
	КонецЦикла;
	ТекстКлючевыеСлова = "Теги: <ul>" + ?(ДанныеСтатьи.КлючевыеСлова.Количество() = 0, "<li>не указаны</li>", ТекстКлючевыеСлова) + "</ul>";
	
	// Комментарии
	ТекстКомментарии = ПолучитьHTML_Комментарии(АдресаКартинок, ДанныеСтатьи, Параметры);
	
	//+++ Иванов
	// Прикрепленные файлы
	ТекстПрикрепленныеФайлы = ПолучитьHTML_ПрикрепленныеФайлы(АдресаКартинок, ДанныеСтатьи.Ссылка);
	Если ЗначениеЗаполнено(ТекстПрикрепленныеФайлы) Тогда
		ТекстПрикрепленныеФайлы = "<div class='info'>" + ТекстПрикрепленныеФайлы + "</div>";
	КонецЕсли;
	
	// История изменений
	ТекстИсторияИзменений = ПолучитьHTML_ИсторияИзменений(АдресаКартинок, ДанныеСтатьи.Ссылка);
	Если ЗначениеЗаполнено(ТекстИсторияИзменений) Тогда
		ТекстИсторияИзменений = "<div style='background: #D3D3D3;padding: 1rem;margin: 0 0 1.5rem;'>" + ТекстИсторияИзменений + "</div>";
	КонецЕсли;
	
	// Кнопки
	ТекстКнопкиСтатьяИзучена = ПолучитьHTML_СтатьяИзучена(ДанныеСтатьи.Ссылка);
	Если ЗначениеЗаполнено(ТекстКнопкиСтатьяИзучена) Тогда
		ТекстКнопкиСтатьяИзучена = "<div>" + ТекстКнопкиСтатьяИзучена + "</div>";
	КонецЕсли;
	
	// Текст о изеченности статьи
	ТекстИнформацияОИзучености = ПолучитьHTML_ИнформацияОИзучености(АдресаКартинок, ДанныеСтатьи.Ссылка);
	Если ЗначениеЗаполнено(ТекстИнформацияОИзучености) Тогда
		ТекстИнформацияОИзучености = "<div id='comments'>
		|		<div class='h1'>
		|			Состояние изучения статьи
		|		</div>
		|	</div>
		|<div class='info-gray'>" + ТекстИнформацияОИзучености + "</div>";
	КонецЕсли;
	
	// Код страницы
	ТекстСтраницы = "
	|<div class='article'>
	|	<h1>" + Параметры.КоманднаяПанель + "Статья: " + Строка(СтатьяСсылка) + "</h1>
	|	<div class='info'>" + ТекстДопИнформация + "</div>
	|	" + ТекстПрикрепленныеФайлы + "
	|	" + ТекстИсторияИзменений + "
	|	<div class='text'>" + ТекстСодержание + "</div>
	|	" + ТекстКнопкиСтатьяИзучена + "
	|	<div id='article_tags'>" + ТекстКлючевыеСлова + "</div>
	|	" + ТекстКомментарии + "
	|	" + ТекстИнформацияОИзучености + "
	|</div>
	|";
	
	Возврат ТекстСтраницы;
	
КонецФункции

Функция ПолучитьHTML_ПрикрепленныеФайлы(АдресаКартинок, Ссылка)
	
	Текст = "";
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	БЗ_СтатьиБазыЗнанийПрисоединенныеФайлы.Ссылка КАК Ссылка,
		|	БЗ_СтатьиБазыЗнанийПрисоединенныеФайлы.Наименование КАК Наименование,
		|	БЗ_СтатьиБазыЗнанийПрисоединенныеФайлы.Расширение КАК Расширение,
		|	БЗ_СтатьиБазыЗнанийПрисоединенныеФайлы.ИндексКартинки КАК ИндексКартинки
		|ИЗ
		|	Справочник.БЗ_СтатьиБазыЗнанийПрисоединенныеФайлы КАК БЗ_СтатьиБазыЗнанийПрисоединенныеФайлы
		|ГДЕ
		|	БЗ_СтатьиБазыЗнанийПрисоединенныеФайлы.ВладелецФайла = &ВладелецФайла
		|	И НЕ БЗ_СтатьиБазыЗнанийПрисоединенныеФайлы.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("ВладелецФайла", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат "";
	КонецЕсли;
	
	Текст = Текст + "
	|	<p>Прикреплённые файлы: </p>";
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ПараметрыСсылки		= Новый Структура("id", Строка(ВыборкаДетальныеЗаписи.Ссылка.УникальныйИдентификатор()));
		АдресСсылки			= БЗ_БазаЗнанийAPIКлиентСервер.АдресСсылкиУниверсальный("OpenFile", ПараметрыСсылки);
		
		ТекстКартинки = "<img style='padding: 0px 5px 0px 0px; vertical-align: middle;' src='" + АдресаКартинок["TypeIconFile_" + (ВыборкаДетальныеЗаписи.ИндексКартинки + 1)] + "'>";
		Текст = Текст + "
		|	<p><a href='" + АдресСсылки + "'>" + ТекстКартинки + СокрЛП(ВыборкаДетальныеЗаписи.Наименование + "." + ВыборкаДетальныеЗаписи.Расширение) + "</a></p>"; 
		
	КонецЦикла;
	
	Возврат Текст;
	
КонецФункции // ()

Функция ПолучитьHTML_ИсторияИзменений(АдресаКартинок, Ссылка)
	
	Текст = "";
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	БЗ_ИсторияСтатейБазыЗнаний.Изменено КАК Изменено,
		|	БЗ_ИсторияСтатейБазыЗнаний.АйТи_ОписаниеИзменений КАК АйТи_ОписаниеИзменений,
		|	БЗ_ИсторияСтатейБазыЗнаний.Ответственный КАК Ответственный,
		|	БЗ_ИсторияСтатейБазыЗнаний.Ответственный.Наименование КАК ОтветственныйНаименование
		|ИЗ
		|	РегистрСведений.БЗ_ИсторияСтатейБазыЗнаний КАК БЗ_ИсторияСтатейБазыЗнаний
		|ГДЕ
		|	БЗ_ИсторияСтатейБазыЗнаний.СтатьяБазыЗнаний = &СтатьяБазыЗнаний
		|	И НЕ БЗ_ИсторияСтатейБазыЗнаний.АйТи_ОписаниеИзменений ПОДОБНО """"
		|
		|УПОРЯДОЧИТЬ ПО
		|	Изменено УБЫВ";
	
	Запрос.УстановитьПараметр("СтатьяБазыЗнаний", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат "";
	КонецЕсли;
	
	Текст = Текст + "
	|<input type='checkbox' class='read-more-checker' id='read-more-checker' />
	|<div class='limiter'>";
	
	Текст = Текст + "
	|	<p><H2>История изменений: </H2></p>";
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ТекстЗаголовкаИзменения = "<B>[" + ВыборкаДетальныеЗаписи.Изменено + "] Автор - " + ВыборкаДетальныеЗаписи.ОтветственныйНаименование + " : </B>";
		
		Текст = Текст + "
		|	<p>" + ТекстЗаголовкаИзменения + ВыборкаДетальныеЗаписи.АйТи_ОписаниеИзменений + "</p>"; 
		
	КонецЦикла;
	
	Текст = Текст + "
	|</div>
	|<label for='read-more-checker' class='read-more-button'></label>";
	
	Возврат Текст;
	
КонецФункции // ()

Функция ПолучитьHTML_СтатьяИзучена(Ссылка)
	
	Текст = "";
	
	ТекПользователь = ПараметрыСеанса.ТекущийПользователь;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	БЗ_СтатьяПомоглаСрезПоследних.СтатьяБазыЗнаний КАК СтатьяБазыЗнаний
		|ИЗ
		|	РегистрСведений.БЗ_СтатьяПомогла.СрезПоследних(, ) КАК БЗ_СтатьяПомоглаСрезПоследних
		|ГДЕ
		|	БЗ_СтатьяПомоглаСрезПоследних.Пользователь = &Пользователь
		|	И БЗ_СтатьяПомоглаСрезПоследних.СтатьяБазыЗнаний = &СтатьяБазыЗнаний
		|	И БЗ_СтатьяПомоглаСрезПоследних.Период = &ТекДень";
	
	Запрос.УстановитьПараметр("Пользователь", ТекПользователь);
	Запрос.УстановитьПараметр("СтатьяБазыЗнаний", Ссылка);
	Запрос.УстановитьПараметр("ТекДень", НачалоДня(ТекущаяДата()));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если РезультатЗапроса.Пустой() Тогда
		ПараметрыСсылки		= Новый Структура("id", Строка(Ссылка.УникальныйИдентификатор()));
		АдресСсылки 		= БЗ_БазаЗнанийAPIКлиентСервер.АдресСсылкиУниверсальный("ArticleHelped", ПараметрыСсылки);
		
		Если ТекПользователь = Ссылка.Ответственный Тогда //+++АйТи Смирнов Даниил 30.11.2021
			Текст = " ";
		Иначе
			Текст = Текст + "<left><a href='" + АдресСсылки + "'class='action-btn-2'><span>✓</span>Статья помогла</a></left>";
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	БЗ_СостояниеСтатейБазыЗнаний.СтатьяБазыЗнаний КАК СтатьяБазыЗнаний,
		|	БЗ_СостояниеСтатейБазыЗнаний.Изучена КАК Изучена
		|ИЗ
		|	РегистрСведений.БЗ_СостояниеСтатейБазыЗнаний КАК БЗ_СостояниеСтатейБазыЗнаний
		|ГДЕ                               
		|	БЗ_СостояниеСтатейБазыЗнаний.СтатьяБазыЗнаний = &СтатьяБазыЗнаний
		|	И БЗ_СостояниеСтатейБазыЗнаний.Пользователь = &Пользователь
		|	И БЗ_СостояниеСтатейБазыЗнаний.Изучена <> ДАТАВРЕМЯ(1,1,1)";
	
	Запрос.УстановитьПараметр("СтатьяБазыЗнаний", Ссылка);
	Запрос.УстановитьПараметр("Пользователь", ТекПользователь);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		ПараметрыСсылки		= Новый Структура("id", Строка(Ссылка.УникальныйИдентификатор()));
		АдресСсылки 		= БЗ_БазаЗнанийAPIКлиентСервер.АдресСсылкиУниверсальный("ArticleAssimilated", ПараметрыСсылки);
		
		КатегорияРегламентов = Справочники.БЗ_КатегорииБазыЗнаний.ПолучитьСсылку(Новый УникальныйИдентификатор("fdc8e126-6780-11e5-ba6c-74d4350fde48"));
		СтатьяВИерархииРегламентов = БЗ_ОбщиеФункцииСервер.СтатьяВИерархииКатегорииБазыЗнаний(Ссылка, КатегорияРегламентов);
		
		Если СтатьяВИерархииРегламентов Тогда
			ЗаголовокКнопки = "Прочёл. Изменения принимаю";
		Иначе
			ЗаголовокКнопки = "Статья изучена мной";
		КонецЕсли;
		Текст = Текст + "<center><a href='" + АдресСсылки + "'class='action-btn-1'>" + ЗаголовокКнопки + "</a></center>"; 
	КонецЕсли;
	
	Возврат Текст;
	
КонецФункции // ()

Функция ПолучитьHTML_ИнформацияОИзучености(АдресаКартинок, Ссылка)
	
	Текст = "";
	
	ТекПользователь = ПараметрыСеанса.ТекущийПользователь;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	БЗ_СостояниеСтатейБазыЗнаний.Пользователь КАК Пользователь,
		|	БЗ_СостояниеСтатейБазыЗнаний.Изучена <> ДАТАВРЕМЯ(1, 1, 1) КАК Изучена
		|ИЗ
		|	РегистрСведений.БЗ_СостояниеСтатейБазыЗнаний КАК БЗ_СостояниеСтатейБазыЗнаний
		|ГДЕ
		|	БЗ_СостояниеСтатейБазыЗнаний.СтатьяБазыЗнаний = &СтатьяБазыЗнаний
		|	И БЗ_СостояниеСтатейБазыЗнаний.ВыданаНаИзучение <> ДАТАВРЕМЯ(1, 1, 1)
		|	И НЕ БЗ_СостояниеСтатейБазыЗнаний.Пользователь.ПометкаУдаления
		|	И НЕ БЗ_СостояниеСтатейБазыЗнаний.Пользователь.Недействителен
		|
		|УПОРЯДОЧИТЬ ПО
		|	БЗ_СостояниеСтатейБазыЗнаний.Пользователь.Наименование";
	
	Запрос.УстановитьПараметр("СтатьяБазыЗнаний", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат "";
	КонецЕсли;
	
	КоличествоВсего = 0;
	КоличествоИзучено = 0;
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		//ПараметрыСсылки		= Новый Структура("id", Строка(Ссылка.УникальныйИдентификатор()));
		//АдресСсылки 		= БазаЗнанийAPIКлиентСервер.АдресСсылкиУниверсальный("ArticleHelped", ПараметрыСсылки);
		
		Если ВыборкаДетальныеЗаписи.Изучена Тогда
			Картинка = АдресаКартинок.ЗеленнаяГалка;
			КоличествоИзучено = КоличествоИзучено + 1;
		Иначе
			Картинка = АдресаКартинок.КрасныйКрест;
		КонецЕсли;
		
		ТекстКартинки = "<img style='padding: 0px 5px 0px 0px; vertical-align: middle;' src='" + Картинка + "'>";
		
		Текст = Текст + "
		| <p>" + ТекстКартинки + ВыборкаДетальныеЗаписи.Пользователь.Наименование + "</p>";
		
		КоличествоВсего = КоличествоВсего + 1;
	КонецЦикла;
	
	Если КоличествоИзучено <> 0 Тогда
		ПроцентИзучености = КоличествоИзучено / КоличествоВсего * 100;
	Иначе
		ПроцентИзучености = 0;
	КонецЕсли;
	
	ТекстБара = "
	|<div class='container'>
	|	" + ПолучитьПрогрессБар(ПроцентИзучености) + "
	|	<div>" + Формат(ПроцентИзучености, "ЧДЦ=1; ЧН=0") + "%</div>
	|</div>";
	
	Текст = "
	| " + ТекстБара + "
	| " + Текст;
	
	Возврат Текст;
	
КонецФункции // ()

Функция ПолучитьHTML_ИнформацияОИзученостиКатегории(АдресаКартинок, Ссылка)
	
	Текст = "";
	
	ТекПользователь = ПараметрыСеанса.ТекущийПользователь;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СтатьиБазыЗнанийКатегории.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВТ_СтатьиКатегории
		|ИЗ
		|	Справочник.БЗ_СтатьиБазыЗнаний.Категории КАК СтатьиБазыЗнанийКатегории
		|ГДЕ
		|	СтатьиБазыЗнанийКатегории.Категория В ИЕРАРХИИ(&Категория)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	БЗ_СостояниеСтатейБазыЗнаний.Пользователь КАК Пользователь,
		|	СУММА(ВЫБОР
		|			КОГДА БЗ_СостояниеСтатейБазыЗнаний.Изучена <> ДАТАВРЕМЯ(1, 1, 1)
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК Изучена,
		|	КОЛИЧЕСТВО(БЗ_СостояниеСтатейБазыЗнаний.ВыданаНаИзучение) КАК ВыданаНаИзучение
		|ИЗ
		|	РегистрСведений.БЗ_СостояниеСтатейБазыЗнаний КАК БЗ_СостояниеСтатейБазыЗнаний
		|ГДЕ
		|	БЗ_СостояниеСтатейБазыЗнаний.ВыданаНаИзучение <> ДАТАВРЕМЯ(1, 1, 1)
		|	И БЗ_СостояниеСтатейБазыЗнаний.СтатьяБазыЗнаний В
		|			(ВЫБРАТЬ
		|				ВТ_СтатьиКатегории.Ссылка КАК Ссылка
		|			ИЗ
		|				ВТ_СтатьиКатегории КАК ВТ_СтатьиКатегории)
		|	И НЕ БЗ_СостояниеСтатейБазыЗнаний.Пользователь.Недействителен
		|	И НЕ БЗ_СостояниеСтатейБазыЗнаний.Пользователь.ПометкаУдаления
		|
		|СГРУППИРОВАТЬ ПО
		|	БЗ_СостояниеСтатейБазыЗнаний.Пользователь
		|
		|УПОРЯДОЧИТЬ ПО
		|	БЗ_СостояниеСтатейБазыЗнаний.Пользователь.Наименование";
	
	Запрос.УстановитьПараметр("Категория", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат "";
	КонецЕсли;
	
	КоличествоВсего = 0;
	КоличествоИзучено = 0;
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ПараметрыСсылки		= Новый Структура("id, idUser", Строка(Ссылка.УникальныйИдентификатор()), Строка(ВыборкаДетальныеЗаписи.Пользователь.УникальныйИдентификатор()));
		АдресСсылки 		= БЗ_БазаЗнанийAPIКлиентСервер.АдресСсылкиУниверсальный("TranscriptArticleStudied", ПараметрыСсылки);
		
		Если ВыборкаДетальныеЗаписи.Изучена = ВыборкаДетальныеЗаписи.ВыданаНаИзучение Тогда
			Картинка = АдресаКартинок.ЗеленнаяГалка;
			КоличествоИзучено = КоличествоИзучено + 1;
		Иначе
			Картинка = АдресаКартинок.КрасныйКрест;
		КонецЕсли;
		
		ТекстКартинки = "<img style='padding: 0px 5px 0px 0px; vertical-align: middle;' src='" + Картинка + "'>";
		
		Текст = Текст + "
		| <p>" + ТекстКартинки + ВыборкаДетальныеЗаписи.Пользователь.Наименование + " <a href='" + АдресСсылки + "'>" + СтрШаблон(" (Изучено %1 из %2)", ВыборкаДетальныеЗаписи.Изучена, ВыборкаДетальныеЗаписи.ВыданаНаИзучение) + "</a></p>";
		
		КоличествоВсего = КоличествоВсего + 1;
	КонецЦикла;
	
	Если КоличествоИзучено <> 0 Тогда
		ПроцентИзучености = КоличествоИзучено / КоличествоВсего * 100;
	Иначе
		ПроцентИзучености = 0;
	КонецЕсли;
	
	ТекстБара = "
	|<div class='container'>
	|	" + ПолучитьПрогрессБар(ПроцентИзучености) + "
	|	<div>" + Формат(ПроцентИзучености, "ЧДЦ=1; ЧН=0") + "%</div>
	|</div>";
	
	Текст = "
	| " + ТекстБара + "
	| " + Текст;
	
	Возврат Текст;
	
КонецФункции // ()

Функция ПолучитьПрогрессБар(Процент) Экспорт
	
	Текст = "
	|<div class='progress-bar'>";
	
	Счетчик = 0;
	Пока Счетчик <> 100 Цикл
		Если Процент = 100 Тогда
			ТипЯчейки = "completed";
		Иначе
			Если Счетчик < Процент Тогда
				ТипЯчейки = "active";
			Иначе
				ТипЯчейки = "";
			КонецЕсли;
		КонецЕсли;
		
		Текст = Текст + "
		|	" + СтрШаблон("<div class='progress-block %1'></div>", ТипЯчейки);
		
		Счетчик = Счетчик + 10;
	КонецЦикла;
	
	Текст = Текст + "
	|</div>";
	
	Возврат Текст;
	
КонецФункции // ()

// Формирует текст HTML блока "Содержание" из блока "Статья"
//
// Параметры
//	АдресаКартинок - Структура
//	ДанныеСтатьи - Структура
//
// Возвращаемое значение
//	Строка
//
Функция ПолучитьHTML_СодержаниеСтатьи(АдресаКартинок, ДанныеСтатьи, Параметры)
	
	ТекстСтатьи		= "";
	Идентификатор	= Строка(ДанныеСтатьи.Ссылка.УникальныйИдентификатор());
	
	// Основная часть статьи
	ТекстСтатьи	= ДанныеСтатьи.ТекстHTML;
	БЗ_БазаЗнанийHTMLКлиентСервер.ВырезатьТекстТелаДокумента(ТекстСтатьи);
	ТекстСтатьи = УдалитьКомментарииПоТексту(ТекстСтатьи, Истина);
	
	ОбработатьВложенныеТаблицы("Главная", ТекстСтатьи, ДанныеСтатьи);
	ОбработатьВложенныеКартинки("Главная", ТекстСтатьи, ДанныеСтатьи, Параметры.Картинки);
	
	// Содержание
	ВыводитьСодержание = (ДанныеСтатьи.Содержание.Количество() > 3);
	Если ВыводитьСодержание И ДанныеСтатьи.ПоложениеСодержания = 1 Тогда
		ТекстСтатьи = ТекстСтатьи + "
		|__TOC__";
	ИначеЕсли ВыводитьСодержание И (ДанныеСтатьи.ПоложениеСодержания = 2 ИЛИ ДанныеСтатьи.ПоложениеСодержания = 3) Тогда
		ТекстСтатьи = "__TOC__
		|" + ТекстСтатьи;
	КонецЕсли;
	
	// Вложенные уровни
	Счетчик = 0;
	Для Каждого СтрокаСодержание Из ДанныеСтатьи.Содержание Цикл
		
		Счетчик		= Счетчик + 1;
		ТегФормата	= ?(СтрокаСодержание.Уровень >= 5, "h5", "h" + Строка(СтрокаСодержание.Уровень));
		
		ТекстСтроки	= СтрокаСодержание.ТекстHTML;
		БЗ_БазаЗнанийHTMLКлиентСервер.ВырезатьТекстТелаДокумента(ТекстСтроки);
		
		ОбработатьВложенныеТаблицы(СтрокаСодержание.Область, ТекстСтроки, ДанныеСтатьи);
		ОбработатьВложенныеКартинки(СтрокаСодержание.Область, ТекстСтроки, ДанныеСтатьи, Параметры.Картинки);
		
		ТекстСсылкиСкрыть = 
		"<span style='font-size:12px; font-weight:normal;'>[ 
		|	<a href='#content_" + СтрокаСодержание.Область + "' id='visible_" + СтрокаСодержание.Область + "'>скрыть</a> ]
		|</span>";
		
		ТекстСтатьи = ТекстСтатьи + "
		|	<" + ТегФормата + " id='" + СтрокаСодержание.Область + "'>" + СтрокаСодержание.Наименование + " 
		|		" + ?(СтрокаСодержание.РазрешитьСворачивание, ТекстСсылкиСкрыть, "") + "
		|	</" + ТегФормата + ">
		|	<div id='content_" + СтрокаСодержание.Область + "' style='margin-left:" + Формат(2 * СтрокаСодержание.Уровень, "ЧГ=") +"px;'>
		|		" + ТекстСтроки + "
		|	</div>";
		
	КонецЦикла;
	
	// Подстановка строки разделителя
	ОбработатьРазделительныеЛинии(ТекстСтатьи);
	
	// Удалим открытие ссылок в отдельных окнах
	ТекстСтатьи = СтрЗаменить(ТекстСтатьи, "target='_blank'", "");
	
	// Сноски
	ОбработатьСноски(ТекстСтатьи, ДанныеСтатьи);
	
	// Подстановка содержания статьи
	Если ВыводитьСодержание И ДанныеСтатьи.ПоложениеСодержания > 0 Тогда
		Если ДанныеСтатьи.ПоложениеСодержания = 2 Тогда
			ДопСтиль = " style='float:left; margin: 0 10px 15px 0;'";
		ИначеЕсли ДанныеСтатьи.ПоложениеСодержания = 3 Тогда
			ДопСтиль = " style='float:right; margin: 0 0 15px 10px;'";
		Иначе
			ДопСтиль = " style='margin: 15px 10px 15px 0;'";
		КонецЕсли;
		
		ТекстОглавление = "<div class='contents'" + ДопСтиль + ">
		|<p style='text-align:center; font-weight:bold' id='contents_title'>Содержание 
		|	<span style='font-size:12px; font-weight:normal;'>[ <a href='#contens_ul' id='visible'>скрыть</a> ]</span>
		|</p>";			
		ТекУровень		= -1;
		Для Каждого СтрокаСодержание Из ДанныеСтатьи.Содержание Цикл
			Если ТекУровень < СтрокаСодержание.Уровень Тогда
				ТекстОглавление = ТекстОглавление + "<ul id='contens_ul'>";
			ИначеЕсли ТекУровень > СтрокаСодержание.Уровень Тогда
				ТекстОглавление = ТекстОглавление + "</ul>";
			КонецЕсли;
			ТекУровень = СтрокаСодержание.Уровень;
			
			ТекстОглавление = ТекстОглавление + "
			|	<li><a href='#" + СтрокаСодержание.Область + "'>" + СтрокаСодержание.Наименование + "</a></li>";
		КонецЦикла;
		ТекстОглавление = ТекстОглавление + "</ul></div>";
		
		ТекстСтатьи = СтрЗаменить(ТекстСтатьи, "__TOC__", ТекстОглавление);
	КонецЕсли;
	
	Возврат ТекстСтатьи;
	
КонецФункции

// Формирует текст HTML блока "Комментарии" из блока "Статья"
//
// Параметры
//	АдресаКартинок - Структура
//	ДанныеСтатьи - Структура
//
// Возвращаемое значение
//	Строка
//
Функция ПолучитьHTML_Комментарии(АдресаКартинок, ДанныеСтатьи, Параметры)
	
	ТекПользователь	= Пользователи.ТекущийПользователь();
	Параметры.Вставить("Пользователь", ТекПользователь);
	
	Идентификатор = Строка(ДанныеСтатьи.Ссылка.УникальныйИдентификатор());
	
	АдресСсылкиСоздать	= БЗ_БазаЗнанийAPIКлиентСервер.КонструкторСсылки_create("comment", Новый Структура("article", Идентификатор));
	АдресСсылкиОбновить	= БЗ_БазаЗнанийAPIКлиентСервер.КонструкторСсылки_refresh("comments", Новый Структура("article", Идентификатор));
	
	ТекстHTML = "<div id='comments'>
	|		<div class='h1'>
	|			<div id='comments_panel'>
	|				<a href='" + АдресСсылкиСоздать + "'>добавить</a>
	|				<a href='" + АдресСсылкиОбновить + "'>обновить</a>
	|			</div>
	|			Комментарии
	|		</div>
	|		[[МассивКомментариев]]
	|	</div>";
	
	МассивКомментарии = ДанныеСтатьи.Комментарии;
	Если ТипЗнч(МассивКомментарии) <> Тип("Массив") Тогда
		ТекстHTML_комментарии = "";
	ИначеЕсли МассивКомментарии.Количество() = 0 Тогда
		ТекстHTML_комментарии = "";
	Иначе 
		ТекстHTML_комментарии = ПолучитьHTML_Комментарии_ПоМассиву(АдресаКартинок, МассивКомментарии, Параметры, 0);
	КонецЕсли;
	
	Возврат СтрЗаменить(ТекстHTML, "[[МассивКомментариев]]", ТекстHTML_комментарии);
	
КонецФункции

// Вложенные строки блока "Комментарии"
Функция ПолучитьHTML_Комментарии_ПоМассиву(АдресаКартинок, МассивКомментарии, Параметры, Уровень)
	
	ТекстHTML = "";
	
	Для Каждого СтруктураКомментария Из МассивКомментарии Цикл
		Сдвиг	= Формат(40 * Уровень, "ЧН=0; ЧГ=");
		
		КомментарийHTML	= СтруктураКомментария.ТекстHTML;
		БЗ_БазаЗнанийHTMLКлиентСервер.ВырезатьТекстТелаДокумента(КомментарийHTML);
		
		ИДАвтор			= Строка(СтруктураКомментария.АвторИдентификатор);
		ИДКомментарий	= Строка(СтруктураКомментария.Идентификатор);
		ДатаКомментирия	= Формат(СтруктураКомментария.Период, "ДФ='МММ дд, гггг'");
		ТекПользователь	= (СтруктураКомментария.Автор = Параметры.Пользователь);
		
		АдресСсылкиПрофиль	= БЗ_БазаЗнанийAPIКлиентСервер.КонструкторСсылки_page("user", Новый Структура("id", ИДАвтор));
		АдресСсылкиИзменить = БЗ_БазаЗнанийAPIКлиентСервер.КонструкторСсылки_edit("comment", Новый Структура("id", ИДКомментарий));
		АдресСсылкиУдалить	= БЗ_БазаЗнанийAPIКлиентСервер.КонструкторСсылки_delete("comment", Новый Структура("id", ИДКомментарий));
		АдресСсылкиОтветить	= БЗ_БазаЗнанийAPIКлиентСервер.КонструкторСсылки_create("comment", Новый Структура("id", ИДКомментарий));
		
		КомандаИзменить	= "<a href='" + АдресСсылкиИзменить + "'>Редактировать</a> &bull;";
		КомандаУдалить	= "<a href='" + АдресСсылкиУдалить + "'>Удалить</a> &bull;";
		
		ТекстHTML = ТекстHTML + "
		|	<div class='comment' id='comment_" + ИДКомментарий + "' style='margin-left:" + Сдвиг + "px;'>
		|		<img src='" + АдресаКартинок.Пользователь + "'>
		|		<h1><a href='" + АдресСсылкиПрофиль + "'>" + СокрЛП(СтруктураКомментария.АвторПредставление) + "</a></h1>
		|		<div class='comment_body'>
		|			<div class='comment_body_text'>" + КомментарийHTML + "</div>
		|			<div class='comment_body_panel'>
		|				<a href='" + АдресСсылкиОтветить + "'>Ответить</a> &bull; 
		|				" + ?(ТекПользователь, КомандаИзменить, "") + "
		|				" + ?(ТекПользователь, КомандаУдалить, "") + "
		//|				<a href='comment:like:" + ИДКомментарий + "'>Мне нравится</a> &bull;
		|				" + ДатаКомментирия + "
		|			</div>
		|		</div>
		|	</div>";
		
		ТекстHTML = ТекстHTML + ПолучитьHTML_Комментарии_ПоМассиву(АдресаКартинок, СтруктураКомментария.Элементы, Параметры, Уровень + 1);
		
	КонецЦикла;
	
	Возврат ТекстHTML;
	
КонецФункции

// Формирует текст HTML блока "Профиль пользователя"
//
// Параметры
//	АдресаКартинок - Структура
//	Пользователь - СправочникСсылка.Пользователи
//
// Возвращаемое значение
//	Строка
//
Функция ПолучитьHTML_Профиль(АдресаКартинок, Пользователь)
	
	ПользовательИД		= Строка(Пользователь.УникальныйИдентификатор());
	ПользовательНаим	= Строка(Пользователь);
	
	АдресСсылкиПрофиль		= "";
	АдресСсылкиИзбранное	= "";
	АдресСсылкиПодписка		= "";
	АдресСсылкиИстория		= "";
	
	ТекстHTML = 
	"<div class='user'>
	|	<div class='user_head'>
	|		<img src='" + АдресаКартинок.Пользователь + "'>
	|		<h1><a href='" + АдресСсылкиПрофиль + "'>" + ПользовательНаим + "</a></h1>
	|		</br>
	|	</div>                                                        
	|</div>
	|<div id='panel_button'>
	//|	<ul>
	//|		<li style='border-bottom:1px solid #fff; background-color:#fff;'><a href='" + АдресСсылкиПрофиль + "'>Профиль</a></li>
	//|		<li><a href='" + АдресСсылкиИзбранное + "'>Избранное</a></li>
	//|		<li><a href='" + АдресСсылкиПодписка + "'>Подписка</a></li>
	//|		<li><a href='" + АдресСсылкиИстория + "'>История</a></li>
	//|	</ul>
	//|</div>
	//|<div id='panel_content'>
	//|	aaffss
	|</div>";
	
	Возврат ТекстHTML;
	
КонецФункции

// Формирует текст HTML блока "Командная панель"
//
// Параметры
//	Кнопки - Массив[Структура, Строка]
//		Использование - Булево
//		Заголовок - Строка
//		Картинка - Строка. Путь к картинке. Если не задан не выводится.
//		Подсказка - Строка
//		АдресСсылки - Строка
//	Настройки - Структура
//		Выравнивание - Строка. Лево, Право
//
// Возвращаемое значение
//	Строка
//
Функция ПолучитьHTML_КоманднаяПанель(АдресаКартинок, КоманднаяПанель)
	
	БЗ_БазаЗнанийHTMLКлиентСервер.ПроверитьСвойствоКоллекции(КоманднаяПанель, "Кнопки"		, Новый Массив);
	БЗ_БазаЗнанийHTMLКлиентСервер.ПроверитьСвойствоКоллекции(КоманднаяПанель, "Настройки"	, Новый Структура);
	БЗ_БазаЗнанийHTMLКлиентСервер.ПроверитьСвойствоКоллекции(КоманднаяПанель.Настройки, "Выравнивание", "Право");
	
	ИмяКласса = ?(ВРег(КоманднаяПанель.Настройки.Выравнивание) = "ЛЕВО", "flt_l", "flt_r");
	
	ТекстHTML = "
	|	<div id='command_panel' class='" + ИмяКласса + "'><ul>";
	Для Каждого СтруктураКнопки Из КоманднаяПанель.Кнопки Цикл
		ТипКнопки = ТипЗнч(СтруктураКнопки);
		Если ТипКнопки = Тип("Строка") Тогда
			СтрТекстКнопки = СтруктураКнопки;
		ИначеЕсли ТипКнопки = Тип("Структура") Тогда
			БЗ_БазаЗнанийHTMLКлиентСервер.ПроверитьСвойствоКоллекции(СтруктураКнопки, "Использование"	, Ложь);
			БЗ_БазаЗнанийHTMLКлиентСервер.ПроверитьСвойствоКоллекции(СтруктураКнопки, "Заголовок"		, "");
			БЗ_БазаЗнанийHTMLКлиентСервер.ПроверитьСвойствоКоллекции(СтруктураКнопки, "Картинка"		, "");
			БЗ_БазаЗнанийHTMLКлиентСервер.ПроверитьСвойствоКоллекции(СтруктураКнопки, "Подсказка"		, "");
			БЗ_БазаЗнанийHTMLКлиентСервер.ПроверитьСвойствоКоллекции(СтруктураКнопки, "АдресСсылки"	, "");
			БЗ_БазаЗнанийHTMLКлиентСервер.ПроверитьСвойствоКоллекции(СтруктураКнопки, "Стиль"			, "");
			
			Если НЕ СтруктураКнопки.Использование Тогда
				Продолжить;
			КонецЕсли;
			
			СтрТекстКнопки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("
				|		<li><a title='%1' href='%2' class='%3'>%4 %5 </a></li>
				|",
				СтруктураКнопки.Подсказка,
				СтруктураКнопки.АдресСсылки,
				СтруктураКнопки.Стиль,
				?(ПустаяСтрока(СтруктураКнопки.Картинка), "", "<img class='flt_l' src='" + СтруктураКнопки.Картинка + "'>"),
				СтруктураКнопки.Заголовок);
		Иначе 
			СтрТекстКнопки = "";
		КонецЕсли;
		
		ТекстHTML = ТекстHTML + СтрТекстКнопки;
	КонецЦикла;
	ТекстHTML = ТекстHTML + "
	|	</ul></div>";
	
	Возврат ТекстHTML;
	
КонецФункции

#КонецОбласти

#Область ПодготовкаТекстаСтатьи

Функция УдалитьКомментарииПоТексту(знач ТекстHTML, знач ЭтоHTML)
	
	СтрНачКомм		= ?(ЭтоHTML, "&lt;!--", "<!--");
	СтрКонКомм		= ?(ЭтоHTML, "--&gt;", "-->");
	ДлинаОкончания	= СтрДлина(СтрКонКомм);
	
	ИтоговыйТекст = "";
	
	ПозицияНачКомм = Найти(ТекстHTML, СтрНачКомм);
	Пока ПозицияНачКомм > 0 Цикл
		ПозицияКонКомм = Найти(ТекстHTML, СтрКонКомм);
		Если ПозицияКонКомм <= ПозицияНачКомм Тогда
			Прервать;
		КонецЕсли;
		
		Если ЭтоHTML Тогда
			// Начало комментария
			НачПодстрокаПоиска	= БЗ_БазаЗнанийHTMLКлиентСервер.ВыделитьЭлементHTMLПоТегу(ТекстHTML, ПозицияНачКомм, "p");
			НачПозицияТекста	= Найти(ТекстHTML, НачПодстрокаПоиска);
			
			// Окончание комментария
			КонПодстрокаПоиска	= БЗ_БазаЗнанийHTMLКлиентСервер.ВыделитьЭлементHTMLПоТегу(ТекстHTML, ПозицияКонКомм, "p");
			НачПозицияКонПоиска	= Найти(ТекстHTML, КонПодстрокаПоиска);
			КонПозицияТекста	= НачПозицияКонПоиска + СтрДлина(КонПодстрокаПоиска);
		Иначе 
			НачПозицияТекста	= ПозицияНачКомм;
			КонПозицияТекста	= ПозицияКонКомм + ДлинаОкончания;
		КонецЕсли;
		
		ИтоговыйТекст	= ИтоговыйТекст + Лев(ТекстHTML, НачПозицияТекста - 1);
		ТекстHTML		= Сред(ТекстHTML, КонПозицияТекста + 1);
		ПозицияНачКомм	= Найти(ТекстHTML, СтрНачКомм);
	КонецЦикла;
	
	Возврат ИтоговыйТекст + ТекстHTML;
	
КонецФункции

Процедура ОбработатьВложенныеТаблицы(Область, ТекстHTML, ДанныеСтатьи)
	
	МассивТаблиц = ДанныеСтатьи.Таблицы.Получить(Область);
	Если МассивТаблиц = Неопределено ИЛИ МассивТаблиц.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтруктураТаблицы Из МассивТаблиц Цикл
		
		ТаблицаHTML	= СтруктураТаблицы.ТекстТаблицыHTML;
		ТаблицаHTML = СтрЗаменить(ТаблицаHTML, "width:100%", "");
		ТекстСтили	= СтруктураТаблицы.ТаблицаСтилейHTML;
		ТекстСтили	= СтрЗаменить(ТекстСтили, "width: 100%;", "");
		ИмяСтиля	= "name_" + СтруктураТаблицы.Имя;
		Оформление	= БЗ_БазаЗнанийКлиентСерверПовтИсп.ТекстHTML_Выравнивание(СтруктураТаблицы.Выравнивание);
		
		ТекстСтили	= СтрЗаменить(ТекстСтили, "t_0", ИмяСтиля);
		
		ТаблицаHTML	= 
		"	<div class='tableblock'>
		|		<style type='text/css'>" + ТекстСтили + "</style>
		|		" + СтрЗаменить(ТаблицаHTML, "t_0", ИмяСтиля) + "
		|		" + ?(НЕ ПустаяСтрока(СтруктураТаблицы.Подпись), "<br>" + СтруктураТаблицы.Подпись, "") + "
		|	</div><br>";
		
		ПолеЗамены	= "[table='" + СокрЛП(СтруктураТаблицы.Имя) + "']";
		ТекстHTML	= СтрЗаменить(ТекстHTML, ПолеЗамены, ТаблицаHTML);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработатьВложенныеКартинки(Область, ТекстHTML, ДанныеСтатьи, КартинкиСтатьи)
	
	МассивКартинок = ДанныеСтатьи.Картинки.Получить(Область);
	Если МассивКартинок = Неопределено ИЛИ МассивКартинок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтруктураКартинки Из МассивКартинок Цикл
		
		ИмяКартинки	= СтруктураКартинки.Имя;
		ИмяДанных	= "pict_" + СтрЗаменить(СтруктураКартинки.Идентификатор, "-", "");
		Оформление	= БЗ_БазаЗнанийКлиентСерверПовтИсп.ТекстHTML_Выравнивание(СтруктураКартинки.Выравнивание);
		Оформление	= Оформление + "; border:" + Формат(СтруктураКартинки.Граница, "ЧН=0; ЧГ=") + "px solid #666";
		
		ДанныеФайла	= КартинкиСтатьи.Получить(ИмяДанных);
		Если ТипЗнч(ДанныеФайла) = Тип("Структура") И ДанныеФайла.Свойство("ОписаниеФайла") Тогда
			ОписаниеФайла	= ДанныеФайла.ОписаниеФайла;
			ПутьКартинки	= ?(ТипЗнч(ОписаниеФайла) = Тип("ОписаниеПередаваемогоФайла"), ОписаниеФайла.Имя, "");
		Иначе 
			ПутьКартинки	= "";
		КонецЕсли;
		ТекстКартинки	= 
		"<div class='pictureblock' style='" + Оформление + ";'>
		|	<a href='" + ПутьКартинки + "'>
		|		<img src='" + ПутьКартинки + "' height='" + Формат(СтруктураКартинки.Высота, "ЧГ=") + "px' title='" + СтруктураКартинки.Подсказка + "'>
		|	</a>
		|	" + ?(НЕ ПустаяСтрока(СтруктураКартинки.Подпись), "<br>" + СтруктураКартинки.Подпись, "") + "
		|</div>
		|";
		
		//+++ Иванов
		ПолеИмениКартинки = СтрШаблон("src=""%1""", СтруктураКартинки.Имя);
		Если СтрНайти(ТекстHTML, ПолеИмениКартинки) > 0 Тогда
			ТекстHTML	= СтрЗаменить(ТекстHTML, ПолеИмениКартинки, СтрШаблон("src=""%1""", ПутьКартинки));
		Иначе
			ПолеЗамены	= "[picture='" + СтруктураКартинки.Имя + "']";
			ТекстHTML	= СтрЗаменить(ТекстHTML, ПолеЗамены, ТекстКартинки);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработатьСноски(ТекстHTML, ДанныеСтатьи)
	
	// Преобразование строки HTML в документ
	Построитель	= Новый ПостроительDOM;
	ЧтениеHTML	= Новый ЧтениеHTML;
	ЧтениеHTML.УстановитьСтроку(ТекстHTML);
	
	ДокументHTML = Построитель.Прочитать(ЧтениеHTML);
	
	// Обработка ссылок внутри документа
	КоллекцияЭлементов = ДокументHTML.Якоря;
	Для Каждого ЭлементЯкорь Из КоллекцияЭлементов Цикл
		
		Если Лев(ЭлементЯкорь.Гиперссылка, 4) = "ref:" Тогда
			Идентификатор = Сред(ЭлементЯкорь.Гиперссылка, 5);
			
			СтрокаТаблицы = ДанныеСтатьи.Сноски.Найти(Идентификатор, "Идентификатор");
			Если СтрокаТаблицы = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ЭлементЯкорь.УдалитьАтрибут("target");
			ЭлементЯкорь.УстановитьАтрибут("id", "sup_" + СтрЗаменить(Идентификатор, "#", "") + "_back");
			ЭлементЯкорь.УстановитьАтрибут("class", "sup");
			ЭлементЯкорь.Гиперссылка = "#sup_" + СтрЗаменить(Идентификатор, "#", "");
		КонецЕсли;
		
	КонецЦикла;
	
	// Подготовка подвала со сносками
	БлокСносок = ДокументHTML.СоздатьЭлемент("div");
	БлокСносок.УстановитьАтрибут("class", "references");
	
	//+++ АйТи Кучеров Р.М. 10.12.2018 ТЗ № ИС00-008018 >> e1cib/data/Документ.ЗаданиеНаРаботу?ref=b2cd32336337376211e8fc5be1e7c793
	Если ДокументHTML.Тело <> Неопределено Тогда
		ДокументHTML.Тело.ДобавитьДочерний(БлокСносок);
	КонецЕсли;	
	//--- АйТи Кучеров Р.М. 10.12.2018 ТЗ № ИС00-008018 >> e1cib/data/Документ.ЗаданиеНаРаботу?ref=b2cd32336337376211e8fc5be1e7c793
	
	МассивГрупп = ОбщегоНазначения.ВыгрузитьКолонку(ДанныеСтатьи.Сноски, "Группа", Истина);
	Для Каждого ИмяГруппы Из МассивГрупп Цикл
		СтрокиСноски = ДанныеСтатьи.Сноски.НайтиСтроки(Новый Структура("Группа", ИмяГруппы));
		Если СтрокиСноски.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
	    Заголовок = ДокументHTML.СоздатьЭлемент("h6");
		Заголовок.ТекстовоеСодержимое = ?(ПустаяСтрока(ИмяГруппы), "Сноски", СокрЛП(ИмяГруппы));
		БлокСносок.ДобавитьДочерний(Заголовок);
		
		СписокСносок = ДокументHTML.СоздатьЭлемент("ul");
		БлокСносок.ДобавитьДочерний(СписокСносок);
		
		Для Каждого СтрокаСноски Из СтрокиСноски Цикл
			Идентификатор = СтрокаСноски.Идентификатор;
			
			ПредставлениеСноски = СтрокаСноски.Наименование;
			Если НЕ ПустаяСтрока(СтрокаСноски.ГиперссылкаАдрес) Тогда
				АдресСсылки = ПолучитьАдресГиперссылкиПоТипу(СтрокаСноски.ГиперссылкаТип, СтрокаСноски.ГиперссылкаАдрес);
				
				СноскаПредставление = ДокументHTML.СоздатьЭлемент("a");
				СноскаПредставление.Гиперссылка			= АдресСсылки;
				СноскаПредставление.ТекстовоеСодержимое = ПредставлениеСноски;
			Иначе 
				СноскаПредставление = ДокументHTML.СоздатьТекстовыйУзел(ПредставлениеСноски);
			КонецЕсли;
			
			ЭлементСноска = ДокументHTML.СоздатьЭлемент("li");
			СписокСносок.ДобавитьДочерний(ЭлементСноска);
			
			СноскаИдентификатор = ДокументHTML.СоздатьЭлемент("span");
			СноскаИдентификатор.УстановитьАтрибут("id"		, "sup_" + СтрЗаменить(Идентификатор, "#", ""));
			СноскаИдентификатор.УстановитьАтрибут("class"	, "sup");
			СноскаИдентификатор.ТекстовоеСодержимое	= СтрокаСноски.Идентификатор;
			ЭлементСноска.ДобавитьДочерний(СноскаИдентификатор);
			
			Пробел = ДокументHTML.СоздатьТекстовыйУзел(" ");
			ЭлементСноска.ДобавитьДочерний(Пробел);
			
			СноскаВозврат = ДокументHTML.СоздатьЭлемент("a");
			СноскаВозврат.Гиперссылка			= "#sup_" + СтрЗаменить(Идентификатор, "#", "") + "_back";
			СноскаВозврат.ТекстовоеСодержимое	= "↑";
			ЭлементСноска.ДобавитьДочерний(СноскаВозврат);
			
			Пробел = ДокументHTML.СоздатьТекстовыйУзел(" ");
			ЭлементСноска.ДобавитьДочерний(Пробел);
			
			ЭлементСноска.ДобавитьДочерний(СноскаПредставление);
		КонецЦикла;
	КонецЦикла;
	
	// Замена значения реквизита на итоговый текст
	ЗаписьDOM	= Новый ЗаписьDOM;
	ЗаписьHTML	= Новый ЗаписьHTML;
	ЗаписьHTML.УстановитьСтроку();
	ЗаписьDOM.Записать(ДокументHTML, ЗаписьHTML);
	
	ТекстHTML = ЗаписьHTML.Закрыть();
	БЗ_БазаЗнанийHTMLКлиентСервер.ВырезатьТекстТелаДокумента(ТекстHTML);
	
КонецПроцедуры

Процедура ОбработатьРазделительныеЛинии(ТекстHTML)
	
	ОстатокСтроки	= ТекстHTML;
	ТекстHTML		= "";
	ПозицияЛинии	= Найти(ОстатокСтроки, "----");
	Пока ПозицияЛинии > 0 Цикл
		ПодстрокаПоиска = БЗ_БазаЗнанийHTMLКлиентСервер.ВыделитьЭлементHTMLПоТегу(ОстатокСтроки, ПозицияЛинии, "p");
		ДлинаСтрПоиска	= СтрДлина(ПодстрокаПоиска);
		
		ПервоеВхождение	= Найти(ОстатокСтроки, ПодстрокаПоиска);
		
		ТекстHTML		= ТекстHTML + Лев(ОстатокСтроки, ПервоеВхождение - 1) + "<hr>";
		ОстатокСтроки	= Сред(ОстатокСтроки, ПервоеВхождение + ДлинаСтрПоиска);
		ПозицияЛинии	= Найти(ОстатокСтроки, "----");
	КонецЦикла;
	ТекстHTML		= ТекстHTML + ОстатокСтроки;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСКартинками

Функция ПолучитьАдресаКартинокИзСтатьи(АдресаКартинок, СтатьяСсылка)

	КартинкиСтатьи	= Новый Соответствие;
	КаталогФайлов	= СтрЗаменить(АдресаКартинок.Статья, "article_32.png", "");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", СтатьяСсылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	БЗ_ХранилищеДанныхБазыЗнаний.Идентификатор,
	|	БЗ_ХранилищеДанныхБазыЗнаний.ХранилищеЗначения,
	|	БЗ_ХранилищеДанныхБазыЗнаний.ДатаОбновления
	|ИЗ
	|	РегистрСведений.БЗ_ХранилищеДанныхБазыЗнаний КАК БЗ_ХранилищеДанныхБазыЗнаний
	|ГДЕ
	|	БЗ_ХранилищеДанныхБазыЗнаний.СтатьяБазыЗнаний = &Ссылка
	|	И БЗ_ХранилищеДанныхБазыЗнаний.ВидДанных = 1";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ИмяКартинки		= "pict_" + СтрЗаменить(Выборка.Идентификатор, "-", "");
		ДвоичныеДанные	= Выборка.ХранилищеЗначения.Получить();
		
		АдресХранилища	= ПоместитьВоВременноеХранилище(ДвоичныеДанные, Новый УникальныйИдентификатор);
		ОписаниеФайла	= Новый ОписаниеПередаваемогоФайла(КаталогФайлов + ИмяКартинки, АдресХранилища);
		
		КартинкиСтатьи.Вставить(ИмяКартинки, Новый Структура("ОписаниеФайла, ДатаОбновления", ОписаниеФайла, Выборка.ДатаОбновления));
	КонецЦикла;
	
	Возврат КартинкиСтатьи;
	
КонецФункции

#КонецОбласти

#Область ПолучениеДанных

Процедура ДополнитьИнформациюПоСтатье(СтрокаТаблицы)
	
	Категория	= ?(СтрокаТаблицы.Категории.Количество() = 1, СтрокаТаблицы.Категории[0], Неопределено);
	Если ЗначениеЗаполнено(Категория) Тогда
		Идентификатор = Строка(Категория.УникальныйИдентификатор());
		ПараметрыСсылки = Новый Структура("id", Идентификатор);
		АдресСсылки		= БЗ_БазаЗнанийAPIКлиентСервер.КонструкторСсылки_page("category", ПараметрыСсылки);
		СтрКатегория = ", <a href='" + АдресСсылки + "'>" + Строка(Категория) + "</a>";
	Иначе 
		СтрКатегория = "";
	КонецЕсли;
	
	Опубликована	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Опубликована %1%2'"),
		Формат(СтрокаТаблицы.Создана, "ДФ='ддд, дд МММ, гггг'"),
		СтрКатегория);
	
	Просмотрена		= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Просмотрена %1 раз с %2%3'"),
		Формат(СтрокаТаблицы.Просмотры, "ЧН=0; ЧГ="),
		Формат(СтрокаТаблицы.Создана, "ДФ='ддд, дд МММ, гггг'"),
		СтрКатегория);
	
	Оценена			= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Оценка %1. Проголосовало: %2%3'"),
		Строка(СтрокаТаблицы.СредняяОценка) + "/5",
		Строка(СтрокаТаблицы.Проголосовало),
		СтрКатегория);
	
	СтрокаТаблицы.Опубликована	= Опубликована;
	СтрокаТаблицы.Просмотрена	= Просмотрена;
	СтрокаТаблицы.Оценена		= Оценена;
	
КонецПроцедуры

Функция ПолучитьПутьККатегории(КатегорияСсылка, ТолькоСсылки = Ложь)
	
	МассивПуть = Новый Массив;
	МассивПуть.Добавить("home");
	
	РодительСсылка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(КатегорияСсылка, "Родитель");
	Пока ЗначениеЗаполнено(РодительСсылка) Цикл
		МассивПуть.Вставить(1, РодительСсылка);
		
		РодительСсылка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РодительСсылка, "Родитель");
	КонецЦикла;
	
	МассивПуть.Добавить(?(ТолькоСсылки, КатегорияСсылка, Строка(КатегорияСсылка)));
	
	Возврат МассивПуть;
	
КонецФункции

Функция ПолучитьПутьКСтатье(СтатьяСсылка)
	
	МассивПуть = Новый Массив;
	МассивПуть.Добавить("home");
	
	Запрос = Новый Запрос("ВЫБРАТЬ Т.Категория ИЗ Справочник.БЗ_СтатьиБазыЗнаний.Категории КАК Т ГДЕ Т.Ссылка = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка", СтатьяСсылка);
	Категории = Запрос.Выполнить().Выгрузить();
	
	Если Категории.Количество() > 1 Тогда
		МассивПуть.Добавить("Несколько категорий");
	ИначеЕсли Категории.Количество() = 1 Тогда
		МассивПуть = ПолучитьПутьККатегории(Категории[0].Категория, Истина);
	КонецЕсли; 
	
	МассивПуть.Добавить(Строка(СтатьяСсылка));
	
	Возврат МассивПуть;
	
КонецФункции

Функция ПолучитьПутьТекущейСтраницы(знач ЭлементСсылка)  Экспорт
	
	ТипСсылки = ТипЗнч(ЭлементСсылка);
	
	Если ТипСсылки = Тип("СправочникСсылка.БЗ_КатегорииБазыЗнаний") Тогда
		МассивПуть = ПолучитьПутьККатегории(ЭлементСсылка);
	ИначеЕсли ТипСсылки = Тип("СправочникСсылка.БЗ_СтатьиБазыЗнаний") Тогда
		МассивПуть = ПолучитьПутьКСтатье(ЭлементСсылка);
	ИначеЕсли ТипСсылки = Тип("СправочникСсылка.БЗ_КлючевыеСловаБазыЗнаний") Тогда
		МассивПуть = Новый Массив;
		МассивПуть.Добавить("home");
		МассивПуть.Добавить(Строка(ЭлементСсылка));
	ИначеЕсли ТипСсылки = Тип("СправочникСсылка.Пользователи") Тогда
		МассивПуть = Новый Массив;
		МассивПуть.Добавить("home");
		МассивПуть.Добавить(Строка(ЭлементСсылка));
	Иначе 
		МассивПуть = Новый Массив;
	КонецЕсли;
	
	Возврат МассивПуть;
	
КонецФункции

Функция ПолучитьСтатьиГлавнойСтраницы()
	
	Таблица_1	= БЗ_БазаЗнаний.ПолучитьСтатьиПоСтатистике("featured_articles", , 6, "вперед");
	Таблица_2	= БЗ_БазаЗнаний.ПолучитьСтатьиПоСтатистике("recently_added", , 6, "вперед");
	Таблица_3	= БЗ_БазаЗнаний.ПолучитьСтатьиПоСтатистике("most_popular", , 6, "вперед");
	Таблица_4	= БЗ_БазаЗнаний.ПолучитьСтатьиПоСтатистике("top_rated", , 6, "вперед");
	
	// Возвращаемое значение
	Возврат Новый Структура("featured_articles, recently_added, most_popular, top_rated", 
		Таблица_1, Таблица_2, Таблица_3, Таблица_4);
	
КонецФункции

Функция ПолучитьСтатьиПоКлючевомуСлову(знач КлючевоеСловоСсылка, знач КатегорияСсылка)
	
	Если ТипЗнч(КлючевоеСловоСсылка) <> Тип("СправочникСсылка.БЗ_КлючевыеСловаБазыЗнаний") Тогда
		КлючевоеСловоСсылка = Справочники.БЗ_КлючевыеСловаБазыЗнаний.ПустаяСсылка();
	КонецЕсли;
	Если ТипЗнч(КатегорияСсылка) <> Тип("СправочникСсылка.БЗ_КатегорииБазыЗнаний") Тогда
		КатегорияСсылка = Справочники.БЗ_КатегорииБазыЗнаний.ПустаяСсылка();
	КонецЕсли;
	
	МассивСсылок = БЗ_БазаЗнаний.ПолучитьСтатьиПоКлючевомуСлову(КлючевоеСловоСсылка, КатегорияСсылка);
	
	ОтборПоСсылке = Новый Структура("Поле, ВидСравнения, Значение",
		"Ссылка",
		ВидСравненияКомпоновкиДанных.ВСписке,
		Новый СписокЗначений);
	ОтборПоСсылке.Значение.ЗагрузитьЗначения(МассивСсылок);

	НастройкаОтбора = Новый Массив;
	НастройкаОтбора.Добавить(ОтборПоСсылке);
	
	ТаблицаСтатей = БЗ_БазаЗнаний.ПолучитьСтатьи(НастройкаОтбора, "Наименование");
	
	Возврат ТаблицаСтатей;
	
КонецФункции

#КонецОбласти

#Область ОбщиеМетоды

Функция ПолучитьНастройкуПорядкаПоВидуСтраницыСтатей(ВидСтраницы, знач Направление = "")
	ПараметрыПоВиду = БЗ_БазаЗнанийHTMLКлиентСервер.ПолучитьПараметрыВыводаСтраницыПоВиду(ВидСтраницы);
	Возврат СтрЗаменить(ПараметрыПоВиду.Порядок, " УБЫВ", " " + Направление);
КонецФункции

Функция ПолучитьНастройкуОтбораПоВидуСтраницыСтатей(ВидСтраницы, знач Направление = "", Ссылка)
	
	Если ВРег(Направление) = "УБЫВ" Тогда
		ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.Меньше;
	Иначе 
		ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.Больше;
	КонецЕсли;
	
	НастройкиОтбора = Новый Массив;
	
	Если ВидСтраницы = "category_articles" Тогда
		Если НЕ ЗначениеЗаполнено(Ссылка) Тогда
			Возврат НастройкиОтбора;
		КонецЕсли;
		
		ЗначениеОтбора = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "РеквизитДопУпорядочивания");
		БЗ_БазаЗнанийКлиентСервер.ДобавитьЭлементОтбора(НастройкиОтбора, "РеквизитДопУпорядочивания", ЗначениеОтбора, ВидСравненияОтбора);
	КонецЕсли;
		
	Возврат НастройкиОтбора;
	
КонецФункции

Функция ПолучитьСтрокуПоискаИзТекста(ТекстПоиска)
	
	СтрокаПоиска = "";
	
	МассивСлов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ТекстПоиска, " ");
	Для Каждого СловоПоиска Из МассивСлов Цикл
		СтрокаПоиска = СтрокаПоиска + ?(ПустаяСтрока(СтрокаПоиска), "", "+") + КодироватьСтроку(СловоПоиска, СпособКодированияСтроки.КодировкаURL);
	КонецЦикла;
	
	Возврат СтрокаПоиска;
	
КонецФункции

Функция ПолучитьАдресГиперссылкиПоТипу(Тип, Адрес) 
	
	АдресСсылки = "";
	Если Тип = 0 Тогда
		ПараметрыСсылки = Новый Структура;
		
		Разделитель	= Найти(Адрес, "#");
		Если Разделитель > 0 Тогда
			ПараметрыСсылки.Вставить("id", Лев(Адрес, Разделитель - 1));
			ПараметрыСсылки.Вставить("section", Сред(Адрес, Разделитель + 1));
		Иначе 
			ПараметрыСсылки.Вставить("id", Адрес);
		КонецЕсли;
		
		АдресСсылки = БЗ_БазаЗнанийAPIКлиентСервер.КонструкторСсылки_page("article", ПараметрыСсылки);
	ИначеЕсли Тип = 1 Тогда
		АдресСсылки = Адрес;
	ИначеЕсли Тип = 2 Тогда
		АдресСсылки = "mailto:" + Адрес;
	ИначеЕсли Тип = 3 Тогда
		АдресСсылки = БЗ_БазаЗнанийAPIКлиентСервер.КонструкторСсылки_page("category", Новый Структура("id", Адрес));
	ИначеЕсли Тип = 4 Тогда
		АдресСсылки = БЗ_БазаЗнанийAPIКлиентСервер.КонструкторСсылки_search("text", Новый Структура("text", Адрес));
	ИначеЕсли Тип = 5 Тогда
		АдресСсылки = "http://www.google.ru/search?sourceid=chrome&ie=UTF-8&q=" + ПолучитьСтрокуПоискаИзТекста(Адрес);
	КонецЕсли;
	Возврат АдресСсылки;
	
КонецФункции

#КонецОбласти

#Область КоманднаяПанель

Функция ПолучитьКнопку(Заголовок, Картинка = "", АдресСсылки, Подсказка = "", Использование = Истина, Стиль = "")
	
	СтруктураКнопки = Новый Структура;
	
	СтруктураКнопки.Вставить("Заголовок"		, Заголовок);
	СтруктураКнопки.Вставить("Картинка"			, Картинка);
	СтруктураКнопки.Вставить("АдресСсылки"		, АдресСсылки);
	СтруктураКнопки.Вставить("Подсказка"		, Подсказка);
	СтруктураКнопки.Вставить("Использование"	, Использование);
	СтруктураКнопки.Вставить("Стиль"			, Стиль);
		Возврат СтруктураКнопки;
	
КонецФункции

// Параметры
//	АдресаКартинок - Структура
//	Параметры - Структура
//		НомерСтраницы - Число (ПереключениеСтраниц)
//		
Функция ПолучитьКоманднуюПанель_Новости(АдресаКартинок, знач Параметры, знач СписокКнопки = "")
	
	Если ПустаяСтрока(СписокКнопки) Тогда
		Возврат "";
	КонецЕсли;
	
	ПустаяСсылка = Справочники.БЗ_НовостиБазыЗнаний.ПустаяСсылка();
		
	Если НЕ ТипЗнч(Параметры) = Тип("Структура") Тогда
		Параметры = Новый Структура;
	КонецЕсли;
	
	БЗ_БазаЗнанийHTMLКлиентСервер.ПроверитьСвойствоКоллекции(Параметры, "ГлавнаяСтраница"	, Ложь);
	БЗ_БазаЗнанийHTMLКлиентСервер.ПроверитьСвойствоКоллекции(Параметры, "Количество"		, 0);
	БЗ_БазаЗнанийHTMLКлиентСервер.ПроверитьСвойствоКоллекции(Параметры, "НомерСтраницы"	, 1);
	БЗ_БазаЗнанийHTMLКлиентСервер.ПроверитьСвойствоКоллекции(Параметры, "ПерваяЗапись"		, ПустаяСсылка);
	БЗ_БазаЗнанийHTMLКлиентСервер.ПроверитьСвойствоКоллекции(Параметры, "ПоследняяЗапись"	, ПустаяСсылка);
	БЗ_БазаЗнанийHTMLКлиентСервер.ПроверитьСвойствоКоллекции(Параметры, "Конец"			, Ложь);
	
	КоманднаяПанель = Новый Структура;
	БЗ_БазаЗнанийHTMLКлиентСервер.ПроверитьСвойствоКоллекции(КоманднаяПанель, "Кнопки"		, Новый Массив);
	БЗ_БазаЗнанийHTMLКлиентСервер.ПроверитьСвойствоКоллекции(КоманднаяПанель, "Настройки"	, Новый Структура);
	БЗ_БазаЗнанийHTMLКлиентСервер.ПроверитьСвойствоКоллекции(КоманднаяПанель.Настройки, "Выравнивание", "Право");
	
	МассивКнопок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СписокКнопки);
	Для Каждого ИмяКнопки Из МассивКнопок Цикл
		ВрегИмяКнопки	= ВРег(СокрЛП(ИмяКнопки));
		ПараметрыСсылки = Новый Структура;
		
		Если ВрегИмяКнопки = "ПЕРЕКЛЮЧЕНИЕСТРАНИЦ" Тогда
			
			ПараметрыСсылкиНачало	= Новый Структура("mainpage, prevpage, currpage, limit",
				?(Параметры.ГлавнаяСтраница, "true", "false"),
				"0",
				"1",
				Параметры.Количество);
			ПараметрыСсылкиНазад	= Новый Структура("mainpage, prevpage, currpage, limit, id",
				?(Параметры.ГлавнаяСтраница, "true", "false"),
				Формат(Параметры.НомерСтраницы, "ЧН=0; ЧГ="),
				Формат(Параметры.НомерСтраницы - 1, "ЧН=0; ЧГ="),
				Параметры.Количество,
				Строка(Параметры.ПерваяЗапись.УникальныйИдентификатор()));
			ПараметрыСсылкиВперед	= Новый Структура("mainpage, prevpage, currpage, limit, id",
				?(Параметры.ГлавнаяСтраница, "true", "false"),
				Формат(Параметры.НомерСтраницы, "ЧН=0; ЧГ="),
				Формат(Параметры.НомерСтраницы + 1, "ЧН=0; ЧГ="),
				Параметры.Количество,
				Строка(Параметры.ПоследняяЗапись.УникальныйИдентификатор()));

			АдресСсылкиНачало	= БЗ_БазаЗнанийAPIКлиентСервер.КонструкторСсылки_refresh("news", ПараметрыСсылкиНачало);
			АдресСсылкиНазад	= БЗ_БазаЗнанийAPIКлиентСервер.КонструкторСсылки_refresh("news", ПараметрыСсылкиНазад);
			АдресСсылкиВперед	= БЗ_БазаЗнанийAPIКлиентСервер.КонструкторСсылки_refresh("news", ПараметрыСсылкиВперед);
			
			СтруктураКнопкиНачало	= ПолучитьКнопку(
				"&#171;",
				"",
				АдресСсылкиНачало,
				"Первая страница",
				Истина,
				"first_page");
			
			Если Параметры.НомерСтраницы = 1 Тогда
				СтруктураКнопкиНазад = "<li><span class='prev_page'>&#8249;</span></li>";
			Иначе 
				СтруктураКнопкиНазад	= ПолучитьКнопку(
					"&#8249;",
					"",
					АдресСсылкиНазад,
					"Предыдущая страница",
					Истина,
					"prev_page");
			КонецЕсли;
			
			СтруктураКнопкиСтраница	= "<li><span title='Текущая страница' class='page_info'>Стр. № " + Формат(Параметры.НомерСтраницы, "ЧН=0; ЧГ=") + "</span></li>";
			
			Если Параметры.Конец Тогда
				СтруктураКнопкиВперед = "<li><span class='next_page'>&#8250;</span></li>";
			Иначе 
				СтруктураКнопкиВперед	= ПолучитьКнопку(
					"&#8250;",
					"",
					АдресСсылкиВперед,
					"Следующая страница",
					Истина,
					"next_page");
			КонецЕсли;
			
			КоманднаяПанель.Кнопки.Добавить(СтруктураКнопкиНачало);
			КоманднаяПанель.Кнопки.Добавить(СтруктураКнопкиНазад);
			КоманднаяПанель.Кнопки.Добавить(СтруктураКнопкиСтраница);
			КоманднаяПанель.Кнопки.Добавить(СтруктураКнопкиВперед);
			
		Иначе
			
			Продолжить;
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат КоманднаяПанель;
	
КонецФункции

// Параметры
//	АдресаКартинок - Структура
//	Параметры - Структура
//		Ссылка - СправочникСсылка.КатегорииБазыЗнаний (Добавить, Изменить)
//	СписокКнопки - Строка
//		Добавить, Изменить, Подписаться
//	
Функция ПолучитьКоманднуюПанель_Категория(АдресаКартинок, знач Параметры, знач СписокКнопки = "")
	
	Если ПустаяСтрока(СписокКнопки) Тогда
		Возврат "";
	КонецЕсли;
	
	Если НЕ ТипЗнч(Параметры) = Тип("Структура") Тогда
		Параметры = Новый Структура;
	КонецЕсли;
	БЗ_БазаЗнанийHTMLКлиентСервер.ПроверитьСвойствоКоллекции(Параметры, "Ссылка", Неопределено);
	
	ИДКатегория = "";
	Если ЗначениеЗаполнено(Параметры.Ссылка) Тогда
		ИДКатегория = Строка(Параметры.Ссылка.УникальныйИдентификатор());
	КонецЕсли;
	
	КоманднаяПанель = Новый Структура;
	БЗ_БазаЗнанийHTMLКлиентСервер.ПроверитьСвойствоКоллекции(КоманднаяПанель, "Кнопки"		, Новый Массив);
	БЗ_БазаЗнанийHTMLКлиентСервер.ПроверитьСвойствоКоллекции(КоманднаяПанель, "Настройки"	, Новый Структура);
	БЗ_БазаЗнанийHTMLКлиентСервер.ПроверитьСвойствоКоллекции(КоманднаяПанель.Настройки, "Выравнивание", "Право");
	
	МассивКнопок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СписокКнопки);
	Для Каждого ИмяКнопки Из МассивКнопок Цикл
		ВрегИмяКнопки	= ВРег(СокрЛП(ИмяКнопки));
		ПараметрыСсылки = Новый Структура;
		
		//Если ВрегИмяКнопки = "ДОБАВИТЬ" Тогда
		//	
		//	Если НЕ ПустаяСтрока(ИДКатегория) Тогда
		//		ПараметрыСсылки.Вставить("parent", ИДКатегория);
		//	КонецЕсли;
		//	АдресСсылки		= БазаЗнанийAPIКлиентСервер.КонструкторСсылки_create("category", ПараметрыСсылки);
		//	
		//	СтруктураКнопки = ПолучитьКнопку("Добавить",
		//		АдресаКартинок.ДобавитьКатегорию,
		//		АдресСсылки,
		//		"Добавить категорию");
		//
		//ИначеЕсли ВрегИмяКнопки = "ИЗМЕНИТЬ" Тогда
		
		Если ВрегИмяКнопки = "ИЗМЕНИТЬ" Тогда	
			ПараметрыСсылки.Вставить("id", ИДКатегория);
			АдресСсылки		= БЗ_БазаЗнанийAPIКлиентСервер.КонструкторСсылки_edit("category", ПараметрыСсылки);
			
			СтруктураКнопки = ПолучитьКнопку("Изменить",
				АдресаКартинок.Редактирование,
				АдресСсылки,
				"Изменить категорию");
		
		ИначеЕсли ВрегИмяКнопки = "ПОДПИСАТЬСЯ" Тогда
			
			ПараметрыСсылки.Вставить("id", ИДКатегория);
			АдресСсылки		= БЗ_БазаЗнанийAPIКлиентСервер.КонструкторСсылки_subscribe("category", ПараметрыСсылки);
			
			СтруктураКнопки = ПолучитьКнопку("Подписаться",
				АдресаКартинок.Кнопка,
				АдресСсылки,
				"Подписаться на категорию");
		
		Иначе
			
			Продолжить;
			
		КонецЕсли;
		
		КоманднаяПанель.Кнопки.Добавить(СтруктураКнопки);
	КонецЦикла;
	
	Возврат КоманднаяПанель;
	
КонецФункции

// Параметры
//	АдресаКартинок - Структура
//	Параметры - Структура
//		ВидСтраницы - Строка
//		Количество - Число (ПереключениеСтраниц)
//		НомерСтраницы - Число (ПереключениеСтраниц)
//		ПерваяЗапись - СправочникСсылка.СтатьиБазыЗнаний (ПереключениеСтраниц)
//		ПоследняяЗапись - СправочникСсылка.СтатьиБазыЗнаний (ПереключениеСтраниц)
//		Конец - Булево (ПереключениеСтраниц)
//		Ссылка - СправочникСсылка.СтатьиБазыЗнаний (Изменить)
//		Категория - СправочникСсылка.КатегорииБазыЗнаний (Добавить)
//			
//	СписокКнопки - Строка
//		Добавить, Изменить, ПереключениеСтраниц
//	
Функция ПолучитьКоманднуюПанель_Статьи(АдресаКартинок, знач Параметры, знач СписокКнопки = "")
	
	Если ПустаяСтрока(СписокКнопки) Тогда
		СписокКнопки = "";
	КонецЕсли;
	
	ПустаяСсылка	= Справочники.БЗ_СтатьиБазыЗнаний.ПустаяСсылка();
	ПустаяКатегория	= Справочники.БЗ_КатегорииБазыЗнаний.ПустаяСсылка();
	
	Если НЕ ТипЗнч(Параметры) = Тип("Структура") Тогда
		Параметры = Новый Структура;
	КонецЕсли;
	БЗ_БазаЗнанийHTMLКлиентСервер.ПроверитьСвойствоКоллекции(Параметры, "ВидСтраницы"		, "");
	БЗ_БазаЗнанийHTMLКлиентСервер.ПроверитьСвойствоКоллекции(Параметры, "Количество"		, 0);
	БЗ_БазаЗнанийHTMLКлиентСервер.ПроверитьСвойствоКоллекции(Параметры, "НомерСтраницы"	, 1);
	БЗ_БазаЗнанийHTMLКлиентСервер.ПроверитьСвойствоКоллекции(Параметры, "ПерваяЗапись"		, ПустаяСсылка);
	БЗ_БазаЗнанийHTMLКлиентСервер.ПроверитьСвойствоКоллекции(Параметры, "ПоследняяЗапись"	, ПустаяСсылка);
	БЗ_БазаЗнанийHTMLКлиентСервер.ПроверитьСвойствоКоллекции(Параметры, "Конец"			, Ложь);
	БЗ_БазаЗнанийHTMLКлиентСервер.ПроверитьСвойствоКоллекции(Параметры, "Ссылка"			, ПустаяСсылка);
	БЗ_БазаЗнанийHTMLКлиентСервер.ПроверитьСвойствоКоллекции(Параметры, "Категория"		, ПустаяКатегория);
	
	КоманднаяПанель = Новый Структура;
	БЗ_БазаЗнанийHTMLКлиентСервер.ПроверитьСвойствоКоллекции(КоманднаяПанель, "Кнопки"		, Новый Массив);
	БЗ_БазаЗнанийHTMLКлиентСервер.ПроверитьСвойствоКоллекции(КоманднаяПанель, "Настройки"	, Новый Структура);
	БЗ_БазаЗнанийHTMLКлиентСервер.ПроверитьСвойствоКоллекции(КоманднаяПанель.Настройки, "Выравнивание", "Право");
	
	ИДСтатья = "";
	Если ЗначениеЗаполнено(Параметры.Ссылка) Тогда
		ИДСтатья = Строка(Параметры.Ссылка.УникальныйИдентификатор());
	КонецЕсли;
	
	ИДКатегория = "";
	Если ЗначениеЗаполнено(Параметры.Категория) Тогда
		ИДКатегория = Строка(Параметры.Категория.УникальныйИдентификатор());
	КонецЕсли;
	
	МассивКнопок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СписокКнопки);
	Для Каждого ИмяКнопки Из МассивКнопок Цикл
		ВрегИмяКнопки	= ВРег(СокрЛП(ИмяКнопки));
		ПараметрыСсылки = Новый Структура;
		
		Если ВрегИмяКнопки = "ДОБАВИТЬ" Тогда
			ПараметрыСсылки	= Новый Структура("category", ИДКатегория);
			
			АдресСсылки = БЗ_БазаЗнанийAPIКлиентСервер.КонструкторСсылки_create("article", ПараметрыСсылки);
			
//{{MRG[ <-> ]
			СтруктураКнопки = ПолучитьКнопку("<font size='2'>Добавить статью</font>", //+++ Айти Чириков В.А. 15.07.2022  e1cib/data/Документ.ЗаданиеНаРаботу?ref=a91bfc3497141b3f11ecda6dbd021512  
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//			СтруктураКнопки = ПолучитьКнопку("Добавить статью",
//}}MRG[ <-> ]
				АдресаКартинок.ДобавитьСтатью,
				АдресСсылки,
				"Добавить статью");
			
			КоманднаяПанель.Кнопки.Добавить(СтруктураКнопки);
		
		ИначеЕсли ВрегИмяКнопки = "ИЗМЕНИТЬ" Тогда
			
			ПараметрыСсылки.Вставить("id", ИДСтатья);
			АдресСсылки		= БЗ_БазаЗнанийAPIКлиентСервер.КонструкторСсылки_edit("article", ПараметрыСсылки);
			
			СтруктураКнопки = ПолучитьКнопку("Изменить",
				АдресаКартинок.Редактирование,
				АдресСсылки,
				"Изменить статью");
			
			КоманднаяПанель.Кнопки.Добавить(СтруктураКнопки);
		
		ИначеЕсли ВрегИмяКнопки = "ПЕРЕКЛЮЧЕНИЕСТРАНИЦ" Тогда
			
			ПараметрыСсылкиНачало	= Новый Структура("prevpage, currpage, limit, type, category",
				"0",
				"1",
				Параметры.Количество,
				Параметры.ВидСтраницы,
				ИДКатегория);
			ПараметрыСсылкиНазад	= Новый Структура("prevpage, currpage, limit, type, category, id",
				Формат(Параметры.НомерСтраницы, "ЧН=0; ЧГ="),
				Формат(Параметры.НомерСтраницы - 1, "ЧН=0; ЧГ="),
				Параметры.Количество,
				Параметры.ВидСтраницы,
				ИДКатегория,				
				Строка(Параметры.ПерваяЗапись.УникальныйИдентификатор()));
			ПараметрыСсылкиВперед	= Новый Структура("prevpage, currpage, limit, type, category, id",
				Формат(Параметры.НомерСтраницы, "ЧН=0; ЧГ="),
				Формат(Параметры.НомерСтраницы + 1, "ЧН=0; ЧГ="),
				Параметры.Количество,
				Параметры.ВидСтраницы,
				ИДКатегория,
				Строка(Параметры.ПоследняяЗапись.УникальныйИдентификатор()));

			АдресСсылкиНачало	= БЗ_БазаЗнанийAPIКлиентСервер.КонструкторСсылки_refresh("articles", ПараметрыСсылкиНачало);
			АдресСсылкиНазад	= БЗ_БазаЗнанийAPIКлиентСервер.КонструкторСсылки_refresh("articles", ПараметрыСсылкиНазад);
			АдресСсылкиВперед	= БЗ_БазаЗнанийAPIКлиентСервер.КонструкторСсылки_refresh("articles", ПараметрыСсылкиВперед);
			
			СтруктураКнопкиНачало	= ПолучитьКнопку(
//{{MRG[ <-> ]
				"<font size='3'>&#9668;&#9668;|</font>", //+++ Айти Чириков В.А. 15.07.2022 e1cib/data/Документ.ЗаданиеНаРаботу?ref=a91bfc3497141b3f11ecda6dbd021512  Ранее было "&#171;"
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//				"&#171;",
//}}MRG[ <-> ]
				"",
				АдресСсылкиНачало,
				"Первая страница",
				Истина,
				"first_page");
			
			Если Параметры.НомерСтраницы = 1 Тогда
//{{MRG[ <-> ]
				СтруктураКнопкиНазад = "<li><span class='prev_page' ><font size='3'>&#9668</font></span></li>"; //+++ АйТи Чириков В.А. 15.07.2022 e1cib/data/Документ.ЗаданиеНаРаботу?ref=a91bfc3497141b3f11ecda6dbd021512 Ранее было "&#8249;"
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//				СтруктураКнопкиНазад = "<li><span class='prev_page'>&#8249</span></li>";
//}}MRG[ <-> ]
			Иначе 
				СтруктураКнопкиНазад	= ПолучитьКнопку(
//{{MRG[ <-> ]
					"<font size='3'>&#9668;</font>", 	//+++ Айти Чириков В.А. 15.07.2022 e1cib/data/Документ.ЗаданиеНаРаботу?ref=a91bfc3497141b3f11ecda6dbd021512 Ранее было "&#8249;"
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//					"&#8249;",
//}}MRG[ <-> ]
					"",
					АдресСсылкиНазад,
					"Предыдущая страница",
					Истина,
					"prev_page");
			КонецЕсли;
			
//{{MRG[ <-> ]
			//+++ Айти Чириков В.А. 15.07.2022 e1cib/data/Документ.ЗаданиеНаРаботу?ref=a91bfc3497141b3f11ecda6dbd021512 Немного увеличил шрифт
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//			СтруктураКнопкиСтраница	= "<li><span title='Текущая страница' class='page_info'>Стр. № " + Формат(Параметры.НомерСтраницы, "ЧН=0; ЧГ=") + "</span></li>";
//}}MRG[ <-> ]
			СтруктураКнопкиСтраница	= "<li><span title='Текущая страница' class='page_info'><font size='3'>Стр. № " + Формат(Параметры.НомерСтраницы, "ЧН=0; ЧГ=") + "</font></span></li>";
			//--- Айти Чириков В.А. 15.07.2022 e1cib/data/Документ.ЗаданиеНаРаботу?ref=a91bfc3497141b3f11ecda6dbd021512 
			
			Если Параметры.Конец Тогда
//{{MRG[ <-> ]
				СтруктураКнопкиВперед = "<li><span class='next_page'><font size='3'>&#9658;</font></span></li>"; //+++ АйТи Чириков В.А. 15.07.2022 e1cib/data/Документ.ЗаданиеНаРаботу?ref=a91bfc3497141b3f11ecda6dbd021512 ранее было &#8250
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//				СтруктураКнопкиВперед = "<li><span class='next_page'>&#8250;</span></li>";
//}}MRG[ <-> ]
			Иначе 
				СтруктураКнопкиВперед	= ПолучитьКнопку(
//{{MRG[ <-> ]
					"<font size='3'>&#9658;</font>", //+++ АйТи Чириков В.А. 15.07.2022 e1cib/data/Документ.ЗаданиеНаРаботу?ref=a91bfc3497141b3f11ecda6dbd021512 ранее было &#8250
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//					"&#8250;",
//}}MRG[ <-> ]
					"",
					АдресСсылкиВперед,
					"Следующая страница",
					Истина,
					"next_page");
			КонецЕсли;
			
			КоманднаяПанель.Кнопки.Добавить(СтруктураКнопкиНачало);
			КоманднаяПанель.Кнопки.Добавить(СтруктураКнопкиНазад);
			КоманднаяПанель.Кнопки.Добавить(СтруктураКнопкиСтраница);
			КоманднаяПанель.Кнопки.Добавить(СтруктураКнопкиВперед);
		
		Иначе
			
			Продолжить;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат КоманднаяПанель;
	
КонецФункции

// Параметры
//	АдресаКартинок - Структура
//	Параметры - Структура
//		Ссылка - СправочникСсылка.СтатьиБазыЗнаний (Изменить)
//			
//	СписокКнопки - Строка
//		Добавить, Изменить, ПереключениеСтраниц
//	
Функция ПолучитьКоманднуюПанель_Статья(АдресаКартинок, знач Параметры, знач СписокКнопки = "")
	
	Если ПустаяСтрока(СписокКнопки) Тогда
		СписокКнопки = "";
	КонецЕсли;
	
	ПустаяСсылка	= Справочники.БЗ_СтатьиБазыЗнаний.ПустаяСсылка();
	
	Если НЕ ТипЗнч(Параметры) = Тип("Структура") Тогда
		Параметры = Новый Структура;
	КонецЕсли;
	БЗ_БазаЗнанийHTMLКлиентСервер.ПроверитьСвойствоКоллекции(Параметры, "Ссылка", ПустаяСсылка);
	
	КоманднаяПанель = Новый Структура;
	БЗ_БазаЗнанийHTMLКлиентСервер.ПроверитьСвойствоКоллекции(КоманднаяПанель, "Кнопки"		, Новый Массив);
	БЗ_БазаЗнанийHTMLКлиентСервер.ПроверитьСвойствоКоллекции(КоманднаяПанель, "Настройки"	, Новый Структура);
	БЗ_БазаЗнанийHTMLКлиентСервер.ПроверитьСвойствоКоллекции(КоманднаяПанель.Настройки, "Выравнивание", "Право");
	
	ИДСтатья = "";
	Если ЗначениеЗаполнено(Параметры.Ссылка) Тогда
		ИДСтатья = Строка(Параметры.Ссылка.УникальныйИдентификатор());
	КонецЕсли;
	
	МассивКнопок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СписокКнопки);
	Для Каждого ИмяКнопки Из МассивКнопок Цикл
		ВрегИмяКнопки	= ВРег(СокрЛП(ИмяКнопки));
		ПараметрыСсылки = Новый Структура;
		
		Если ВрегИмяКнопки = "ИЗМЕНИТЬ" Тогда
			
			ПараметрыСсылки.Вставить("id", ИДСтатья);
			АдресСсылки		= БЗ_БазаЗнанийAPIКлиентСервер.КонструкторСсылки_edit("article", ПараметрыСсылки);
			
			СтруктураКнопки = ПолучитьКнопку("Изменить",
				АдресаКартинок.Редактирование,
				АдресСсылки,
				"Изменить статью");
			
			КоманднаяПанель.Кнопки.Добавить(СтруктураКнопки);
		
		ИначеЕсли ВрегИмяКнопки = "ОЦЕНИТЬ" Тогда
			
			ПараметрыСсылки	= Новый Структура("id", ИДСтатья);
			АдресСсылки		= БЗ_БазаЗнанийAPIКлиентСервер.КонструкторСсылки_rating("article", ПараметрыСсылки);
			
			СтруктураКнопки = ПолучитьКнопку("Оценить",
				АдресаКартинок.ЗвездаПолная,
				АдресСсылки,
				"Оценить статью");
			
			КоманднаяПанель.Кнопки.Добавить(СтруктураКнопки);
		
		ИначеЕсли ВрегИмяКнопки = "ПОЛУЧИТЬССЫЛКУ" Тогда
			
			ПараметрыСсылки.Вставить("id", ИДСтатья);
			АдресСсылки	= БЗ_БазаЗнанийAPIКлиентСервер.АдресСсылкиУниверсальный("GetLink", ПараметрыСсылки);
			
			СтруктураКнопки = ПолучитьКнопку("Получить ссылку",
			АдресаКартинок.ПолучитьСсылку,
			АдресСсылки,
			"Получить ссылку");
			
			КоманднаяПанель.Кнопки.Добавить(СтруктураКнопки);
			
		ИначеЕсли ВрегИмяКнопки = "ТРЕБУЕТСЯАКТУАЛИЗАЦИЯ" Тогда
			
			ПараметрыСсылки.Вставить("id", ИДСтатья);
			АдресСсылки	= БЗ_БазаЗнанийAPIКлиентСервер.АдресСсылкиУниверсальный("UpdatingIsRequired", ПараметрыСсылки);
			
			СтруктураКнопки = ПолучитьКнопку("Требуется актуализация",
			АдресаКартинок.ТребуетсяАктуализация,
			АдресСсылки,
			"Требуется актуализация");
			
			КоманднаяПанель.Кнопки.Добавить(СтруктураКнопки);
			//+++ АйТи Гречкин А.В. 12.05.2022 ТЗ № ИС00-005239 >> e1cib/data/Документ.ЗаданиеНаРаботу?ref=a90efc3497141b3f11ec4203a57b1d84
			
		ИначеЕсли  ВрегИмяКнопки = "ИЗБРАННОЕ" Тогда 
			//+++ АйТи Чириков В. А. 22.03.2023 ТЗ № ИС00-001047 >> e1cib/data/Документ.ЗаданиеНаРаботу?ref=a93bfc3497141b3f11eda38f7dd40ec4
            //Изменил подсказку для индикации статьи в избранном она или нет
			ВыбраннаяСтатья = Параметры.Ссылка;
			НавСсылка = ПолучитьНавигационнуюСсылку(ВыбраннаяСтатья); 
			
			СтатьяВИзбранном = Ложь;  
			
			Избранное = ХранилищеСистемныхНастроек.Загрузить("Общее/ИзбранноеРаботыПользователя");
			Если Избранное <> Неопределено Тогда
				Для каждого Стр из Избранное Цикл
					Если Стр.НавигационнаяСсылка = НавСсылка Тогда                 
						СтатьяВИзбранном = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			ПараметрыСсылки.Вставить("id", ИДСтатья);
			АдресСсылки	= БЗ_БазаЗнанийAPIКлиентСервер.АдресСсылкиУниверсальный("AddToFavorite",ПараметрыСсылки);
			Если СтатьяВИзбранном Тогда
				СтруктураКнопки = ПолучитьКнопку("Избранное",АдресаКартинок.ЗвездаПолная,АдресСсылки,"Убрать из избранного");
			Иначе
				СтруктураКнопки = ПолучитьКнопку("Избранное",АдресаКартинок.ЗвездаПустая,АдресСсылки,"Добавить в избранное"); 
			КонецЕсли; 
			//--- АйТи Чириков В. А. 22.03.2023 ТЗ № ИС00-001047 >> e1cib/data/Документ.ЗаданиеНаРаботу?ref=a93bfc3497141b3f11eda38f7dd40ec4
			КоманднаяПанель.Кнопки.Добавить(СтруктураКнопки);
			
		Иначе
			//--- АйТи Гречкин А.В. 12.05.2022 ТЗ № ИС00-005239 >> e1cib/data/Документ.ЗаданиеНаРаботу?ref=a90efc3497141b3f11ec4203a57b1d84
			
			Продолжить;
		КонецЕсли;
		
	КонецЦикла;
		
	Возврат КоманднаяПанель;
	
КонецФункции

#КонецОбласти

Функция КоличествоРазСтатьяПомогла(СтатьяСсылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	БЗ_СтатьяПомогла.СтатьяБазыЗнаний КАК СтатьяБазыЗнаний,
		|	КОЛИЧЕСТВО(БЗ_СтатьяПомогла.Период) КАК Период
		|ИЗ
		|	РегистрСведений.БЗ_СтатьяПомогла КАК БЗ_СтатьяПомогла
		|ГДЕ
		|	БЗ_СтатьяПомогла.СтатьяБазыЗнаний = &СтатьяБазыЗнаний
		|
		|СГРУППИРОВАТЬ ПО
		|	БЗ_СтатьяПомогла.СтатьяБазыЗнаний";
	
	Запрос.УстановитьПараметр("СтатьяБазыЗнаний", СтатьяСсылка);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат 0;
	Иначе
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		ВыборкаДетальныеЗаписи.Следующий();
		
		Возврат ВыборкаДетальныеЗаписи.Период; 
	КонецЕсли;
	
КонецФункции 

Процедура ЗаполнитьСтатьяПомогла(ТаблицаСтатей)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	БЗ_СтатьяПомогла.СтатьяБазыЗнаний КАК СтатьяБазыЗнаний,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ БЗ_СтатьяПомогла.Период) КАК Период
		|ИЗ
		|	РегистрСведений.БЗ_СтатьяПомогла КАК БЗ_СтатьяПомогла
		|ГДЕ
		|	БЗ_СтатьяПомогла.СтатьяБазыЗнаний В (&Статьи)
		|
		|СГРУППИРОВАТЬ ПО
		|	БЗ_СтатьяПомогла.СтатьяБазыЗнаний";
	
	Запрос.УстановитьПараметр("Статьи", ТаблицаСтатей.ВыгрузитьКолонку("Ссылка"));
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Для каждого ЭлементСтрока Из ТаблицаСтатей Цикл
		Если ВыборкаДетальныеЗаписи.НайтиСледующий(Новый Структура("СтатьяБазыЗнаний", ЭлементСтрока.Ссылка)) Тогда
			ЭлементСтрока.СтатьяПомогла = ВыборкаДетальныеЗаписи.Период;
		Иначе
			ЭлементСтрока.СтатьяПомогла = 0;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

   
