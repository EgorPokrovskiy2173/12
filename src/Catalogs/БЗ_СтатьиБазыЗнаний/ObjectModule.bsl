Перем ОсвободитьСтатью Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ПРОЧИЕ МЕТОДЫ

//Процедура ЗаписьДокументаСпасибо();//++ АйТи Смирнов Д.В. 05.10.2021

//	НовыйДокумент = Документы.АйТи_НачислитьСпасибо.СоздатьДокумент();
//	НовыйДокумент.Дата = ТекущаяДата();
//	НоваяСтрокаПолучатели = НовыйДокумент.Получатели.Добавить();
//   	НоваяСтрокаПолучатели.Получатель = БЗ_ОбщиеФункцииСервер.ОпределитьСотрудникаПоПользователю(ЭтотОбъект.Ответственный);
//	НоваяСтрокаПолучатели.КраткоеОписание = "За статью ";
//	НоваяСтрокаПолучатели.ТекстСообщения = "За статью " + ЭтотОбъект.Наименование;
//	НоваяСтрокаПолучатели.Количество = АйТи_СпасибоСервер.КоличествоЗаСтатью();
//	НовыйДокумент.Статья = Ссылка;
//	НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
//	
//КонецПроцедуры

Процедура РекурсивныйОбходСодержанияПоДаннымРодителя(ТаблицаДанных, ЗначениеРодитель, НомерУровня)
	МассивСтрок = ТаблицаДанных.НайтиСтроки(Новый Структура("Родитель", ЗначениеРодитель));
	Для Каждого СтрокаТаблицы Из МассивСтрок Цикл
		СтрокаТаблицы.Уровень = НомерУровня + 1;
		РекурсивныйОбходСодержанияПоДаннымРодителя(ТаблицаДанных, СтрокаТаблицы.Область, СтрокаТаблицы.Уровень);
	КонецЦикла;
КонецПроцедуры

Процедура ОбновитьДанныеУровнейСодержания() Экспорт
	
	ТаблицаСодержание = ЭтотОбъект.Содержание.Выгрузить();
	ТаблицаСодержание.Индексы.Добавить("Родитель");
	
	РекурсивныйОбходСодержанияПоДаннымРодителя(ТаблицаСодержание, "", 0);
	
	ЭтотОбъект.Содержание.Загрузить(ТаблицаСодержание);
	
КонецПроцедуры

Функция ИерархияСодержанияИзменилась()
	
	Если ЭтотОбъект.Ссылка.Пустая() Тогда
		Если ЭтотОбъект.Содержание.Количество() > 0 Тогда
			Возврат Истина;
		КонецЕсли;
	Иначе
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СтатьиБазыЗнанийСодержание.НомерСтроки,
		|	СтатьиБазыЗнанийСодержание.Область,
		|	СтатьиБазыЗнанийСодержание.Родитель
		|ИЗ
		|	Справочник.БЗ_СтатьиБазыЗнаний.Содержание КАК СтатьиБазыЗнанийСодержание
		|ГДЕ
		|	СтатьиБазыЗнанийСодержание.Ссылка = &Ссылка";
		Результат = Запрос.Выполнить().Выгрузить();
		
		КоличествоСтрок = Результат.Количество();
		Если КоличествоСтрок <> ЭтотОбъект.Содержание.Количество() Тогда
			Возврат Истина;
		Иначе 
			Для Индекс = 0 По КоличествоСтрок - 1 Цикл
				СтрокаРезультат = Результат[Индекс];
				СтрокаОбъект	= ЭтотОбъект.Содержание[Индекс];
				
				Если СтрокаРезультат.Область <> СтрокаОбъект.Область
					ИЛИ СтрокаРезультат.Родитель <> СтрокаОбъект.Родитель Тогда
					Возврат Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ПолучитьКатегорииДляОбновленияСтатистики()
	
	МассивКатегорий = ЭтотОбъект.Категории.ВыгрузитьКолонку("Категория");
	
	Если ЭтотОбъект.Ссылка.Пустая() Тогда
		Возврат МассивКатегорий;
	Иначе
		ПометкаУдаленияИзменилась = (ЭтотОбъект.ПометкаУдаления <> ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭтотОбъект.Ссылка, "ПометкаУдаления"));
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
		Запрос.УстановитьПараметр("Категории", МассивКатегорий);
		Запрос.УстановитьПараметр("ПометкаУдаленияИзменилась", ПометкаУдаленияИзменилась);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СтатьиБазыЗнанийКатегории.Категория КАК Категория
		|ПОМЕСТИТЬ КатегорииПоСтатье
		|ИЗ
		|	Справочник.БЗ_СтатьиБазыЗнаний.Категории КАК СтатьиБазыЗнанийКатегории
		|ГДЕ
		|	СтатьиБазыЗнанийКатегории.Ссылка = &Ссылка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Категория
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	БЗ_КатегорииБазыЗнаний.Ссылка КАК Категория
		|ИЗ
		|	Справочник.БЗ_КатегорииБазыЗнаний КАК БЗ_КатегорииБазыЗнаний
		|		ЛЕВОЕ СОЕДИНЕНИЕ КатегорииПоСтатье КАК КатегорииПоСтатье
		|		ПО БЗ_КатегорииБазыЗнаний.Ссылка = КатегорииПоСтатье.Категория
		|ГДЕ
		|	БЗ_КатегорииБазыЗнаний.Ссылка В(&Категории)
		|	И (КатегорииПоСтатье.Категория ЕСТЬ NULL 
		|			ИЛИ &ПометкаУдаленияИзменилась)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	КатегорииПоСтатье.Категория
		|ИЗ
		|	КатегорииПоСтатье КАК КатегорииПоСтатье
		|ГДЕ
		|	НЕ КатегорииПоСтатье.Категория В (&Категории)";
		МассивКатегорий = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Категория");
	КонецЕсли;
	
	Возврат МассивКатегорий;
	
КонецФункции

Функция ПолучитьПолныйТекстСтатьи()
	
	Значение = ЭтотОбъект.Текст;
	
	Для Каждого СтрокаСодержания Из ЭтотОбъект.Содержание Цикл
		Значение = Значение + "
		|
		|Подраздел: " + СтрокаСодержания.Наименование + "
		|" + СтрокаСодержания.Текст;
	КонецЦикла;
	
	Возврат Значение;
	
КонецФункции

Функция ЗначениеДопСвойства(Имя, ПоУмолчанию)
	
	Если ЭтотОбъект.ДополнительныеСвойства.Свойство(Имя) Тогда
		Возврат ЭтотОбъект.ДополнительныеСвойства[Имя];
	Иначе 
		Возврат ПоУмолчанию;
	КонецЕсли;
	
КонецФункции

// ТипНовости: 1 - создание, 2 - изменение, 3 - удаление
Функция ДобавитьНовостьБазыЗнаний(ТипНовости)
	
	ПараметрыСсылкиОтв	= Новый Структура("id", Строка(ЭтотОбъект.Ответственный.УникальныйИдентификатор()));
	АдресСсылкиОтв		= БЗ_БазаЗнанийAPIКлиентСервер.КонструкторСсылки_page("user", ПараметрыСсылкиОтв);
	
	ПараметрыСсылкиСтат	= Новый Структура("id", Строка(ЭтотОбъект.Ссылка.УникальныйИдентификатор()));
	АдресСсылкиСтат		= БЗ_БазаЗнанийAPIКлиентСервер.КонструкторСсылки_page("article", ПараметрыСсылкиСтат);
	
	Если ТипНовости = 1 Тогда
		ВидНовости	= Перечисления.БЗ_ВидыНовостейБазыЗнаний.Создание;
		Заголовок	= "Новая статья '%3'";
		ТекстHTML	= "<div>%1 в %2 добавлена новая статья базы знаний.
		|	<br>Заголовок: %3.
		|	<br>Автор: <a href='" + АдресСсылкиОтв + "'>%4</a>
		|	<br>Категории: %5
		|	<br><a href='" + АдресСсылкиСтат + "'>Перейти</a>
		|</div>";
	ИначеЕсли ТипНовости = 2 Тогда
		ВидНовости	= Перечисления.БЗ_ВидыНовостейБазыЗнаний.Изменение;
		Заголовок	= "Изменена статья '%3'";
		ТекстHTML	= "<div>%1 в %2 пользователем <a href='" + АдресСсылкиОтв + "'>%4</a> изменена статья базы знаний.
		|	<br>Заголовок: %3.
		|	<br>Категории: %5
		|	<br><a href='" + АдресСсылкиСтат + "'>Перейти</a>
		|</div>";
	ИначеЕсли ТипНовости = 2 Тогда
		ВидНовости	= Перечисления.БЗ_ВидыНовостейБазыЗнаний.Удаление;
		Заголовок	= "Удалена статья '%3'";
		ТекстHTML	= "<div>%1 в %2 пользователем <a href='" + АдресСсылкиОтв + "'>%4</a> удалена статья базы знаний.
		|	<br>Заголовок: %3.
		|	<br>Категории: %5
		|</div>";
	КонецЕсли;
	
	ДатаНовости = ТекущаяДатаСеанса();
	
	ТекстКатегории = "";
	Для Каждого СтрокаТаблицы Из ЭтотОбъект.Категории Цикл
		ПараметрыСсылкиКат	= Новый Структура("id", Строка(СтрокаТаблицы.Категория.УникальныйИдентификатор()));
		АдресСсылкиКат		= БЗ_БазаЗнанийAPIКлиентСервер.КонструкторСсылки_page("category", ПараметрыСсылкиКат);
		
		ТекстКатегории = ТекстКатегории + ?(ПустаяСтрока(ТекстКатегории), "", "; ") + 
			"<a href='" + АдресСсылкиКат + "'>" + Строка(СтрокаТаблицы.Категория) + "</a>";
	КонецЦикла;
	
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(Формат(ДатаНовости, "ДЛФ=DD"));
	МассивПараметров.Добавить(Формат(ДатаНовости, "ДФ=HH:mm"));
	МассивПараметров.Добавить(СокрЛП(ЭтотОбъект.Наименование));
	МассивПараметров.Добавить(Строка(ЭтотОбъект.Ответственный));
	МассивПараметров.Добавить(ТекстКатегории);
	
	Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтрокуИзМассива(Заголовок, МассивПараметров);
	ТекстHTML = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтрокуИзМассива(ТекстHTML, МассивПараметров);
	
	ПараметрыНовости = Новый Структура;
	ПараметрыНовости.Вставить("Автор"				, ЭтотОбъект.Ответственный);
	ПараметрыНовости.Вставить("Заголовок"			, Заголовок);
	ПараметрыНовости.Вставить("ТекстHTML"			, ТекстHTML);
	ПараметрыНовости.Вставить("ОбъектБазыЗнаний"	, ЭтотОбъект.Ссылка);
	ПараметрыНовости.Вставить("Важность"			, 2);
	ПараметрыНовости.Вставить("ВидНовости"			, ВидНовости);
	
	БЗ_БазаЗнанийВызовСервера.ДобавитьНовость(ПараметрыНовости);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ФОРМИРОВАНИЕ ДВИЖЕНИЙ СПРАВОЧНИКА

Процедура ЗаписатьИсториюСтатьиБазыЗнаний()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(МАКСИМУМ(БЗ_ИсторияСтатейБазыЗнаний.НомерВерсии), 0) КАК НомерВерсии
	|ИЗ
	|	РегистрСведений.БЗ_ИсторияСтатейБазыЗнаний КАК БЗ_ИсторияСтатейБазыЗнаний
	|ГДЕ
	|	БЗ_ИсторияСтатейБазыЗнаний.СтатьяБазыЗнаний = &Ссылка";
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		НомерВерсии = 1;
	Иначе 
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		НомерВерсии = Выборка.НомерВерсии + 1;
	КонецЕсли;
	
	ЗаписьРегистра = РегистрыСведений.БЗ_ИсторияСтатейБазыЗнаний.СоздатьМенеджерЗаписи();
	ЗаписьРегистра.СтатьяБазыЗнаний = ЭтотОбъект.Ссылка;
	ЗаписьРегистра.НомерВерсии		= НомерВерсии;
	ЗаписьРегистра.Текст			= ЭтотОбъект.ПолныйТекст;
	ЗаписьРегистра.Описание			= ЭтотОбъект.ОписаниеИзменений;
	ЗаписьРегистра.Ответственный	= Пользователи.ТекущийПользователь();
	ЗаписьРегистра.Изменено			= ТекущаяДатаСеанса();
	
	//+++
	ЗаписьРегистра.АйТи_ОписаниеИзменений = ДополнительныеСвойства.БЗ_ОписаниеИзменений;
	
	ЗаписьРегистра.Записать(Истина);
	
КонецПроцедуры

Процедура ПроверитьКартинкиПоСтатье()
	МассивУдаления = Новый Массив;
	
	Для Каждого СтрокаТаблицы Из ЭтотОбъект.Картинки Цикл
		СтрокаПоиска = "[picture='" + СтрокаТаблицы.Имя + "']";
		СтрокаПоиска2 = СтрШаблон("src=""%1""", СтрокаТаблицы.Имя);
		Если Найти(ЭтотОбъект.ПолныйТекст, СтрокаПоиска) = 0 И Найти(ЭтотОбъект.ТекстHTML, СтрокаПоиска2) = 0 Тогда
			МассивУдаления.Добавить(СтрокаТаблицы);
		КонецЕсли;
	КонецЦикла;
	
	ДанныеУдаления = Новый Массив;
	
	Для Каждого СтрокаУдаления Из МассивУдаления Цикл
		СтруктураДанных = Новый Структура("Область, Идентификатор");
		ЗаполнитьЗначенияСвойств(СтруктураДанных, СтрокаУдаления);
		ДанныеУдаления.Добавить(СтруктураДанных);
		
		ЭтотОбъект.Картинки.Удалить(СтрокаУдаления);
	КонецЦикла;
	
	ЭтотОбъект.ДополнительныеСвойства.Вставить("КартинкиУдалить", ДанныеУдаления);
КонецПроцедуры

Процедура ПроверитьТаблицыПоСтатье()
	МассивУдаления = Новый Массив;
	
	Для Каждого СтрокаТаблицы Из ЭтотОбъект.Таблицы Цикл
		СтрокаПоиска = "[table='" + СтрокаТаблицы.Имя + "']";
		Если Найти(ЭтотОбъект.ПолныйТекст, СтрокаПоиска) = 0 Тогда
			МассивУдаления.Добавить(СтрокаТаблицы);
		КонецЕсли;
	КонецЦикла;
	
	ДанныеУдаления = Новый Массив;
	
	Для Каждого СтрокаУдаления Из МассивУдаления Цикл
		СтруктураДанных = Новый Структура("Область, Идентификатор");
		ЗаполнитьЗначенияСвойств(СтруктураДанных, СтрокаУдаления);
		ДанныеУдаления.Добавить(СтруктураДанных);
		
		ЭтотОбъект.Таблицы.Удалить(СтрокаУдаления);
	КонецЦикла;
	
	ЭтотОбъект.ДополнительныеСвойства.Вставить("ТаблицыУдалить", ДанныеУдаления);
КонецПроцедуры

Процедура ПроверитьСноскиПоСтатье()
	МассивУдаления = Новый Массив;
	
	Для Каждого СтрокаТаблицы Из ЭтотОбъект.Сноски Цикл
		СтрокаПоиска = "href='ref:" + СтрокаТаблицы.Идентификатор + "'";
		Если Найти(ЭтотОбъект.ТекстHTML, СтрокаПоиска) = 0 Тогда
			ЕстьВПодразделах = Ложь;
			Для Каждого СтрокаСодержания Из ЭтотОбъект.Содержание Цикл
				Если Найти(СтрокаСодержания.ТекстHTML, СтрокаПоиска) > 0 Тогда
					ЕстьВПодразделах = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если НЕ ЕстьВПодразделах Тогда
				МассивУдаления.Добавить(СтрокаТаблицы);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаУдаления Из МассивУдаления Цикл
		ЭтотОбъект.Сноски.Удалить(СтрокаУдаления);
	КонецЦикла;
КонецПроцедуры

Процедура УдалитьДанныеХранилищаБазыЗнаний()
	
	// Удалим картинки
	Если ЭтотОбъект.ДополнительныеСвойства.Свойство("КартинкиУдалить")
		И ТипЗнч(ЭтотОбъект.ДополнительныеСвойства.КартинкиУдалить) = Тип("Массив") Тогда
		
		Для Каждого СтруктураДанных Из ЭтотОбъект.ДополнительныеСвойства.КартинкиУдалить Цикл
			МенеджерЗаписи = РегистрыСведений.БЗ_ХранилищеДанныхБазыЗнаний.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.СтатьяБазыЗнаний = ЭтотОбъект.Ссылка;
			МенеджерЗаписи.Область			= СтруктураДанных.Область;
			МенеджерЗаписи.Идентификатор	= СтруктураДанных.Идентификатор;
			МенеджерЗаписи.Прочитать();
			Если МенеджерЗаписи.Выбран() Тогда
				МенеджерЗаписи.Удалить();
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	// Удалим таблицы
	Если ЭтотОбъект.ДополнительныеСвойства.Свойство("ТаблицыУдалить")
		И ТипЗнч(ЭтотОбъект.ДополнительныеСвойства.ТаблицыУдалить) = Тип("Массив") Тогда
		
		Для Каждого СтруктураДанных Из ЭтотОбъект.ДополнительныеСвойства.ТаблицыУдалить Цикл
			МенеджерЗаписи = РегистрыСведений.БЗ_ХранилищеДанныхБазыЗнаний.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.СтатьяБазыЗнаний = ЭтотОбъект.Ссылка;
			МенеджерЗаписи.Область			= СтруктураДанных.Область;
			МенеджерЗаписи.Идентификатор	= СтруктураДанных.Идентификатор;
			МенеджерЗаписи.Прочитать();
			Если МенеджерЗаписи.Выбран() Тогда
				МенеджерЗаписи.Удалить();
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТКА СОБЫТИЙ МОДУЛЯ

Процедура ПередЗаписью(Отказ)
	
	Если ЭтотОбъект.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ЭтотОбъект.Ответственный) Тогда
		ЭтотОбъект.Ответственный = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	Если ЭтотОбъект.ДатаСоздания = Дата(1, 1, 1) Тогда
		ЭтотОбъект.ДатаСоздания = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Если ИерархияСодержанияИзменилась() Тогда
		ОбновитьДанныеУровнейСодержания();
	КонецЕсли;
	
	ПолныйТекстИзм	= ПолучитьПолныйТекстСтатьи();
	ТекстСтатьиИзм	= (ПолныйТекстИзм <> ЭтотОбъект.ПолныйТекст);
	Если ТекстСтатьиИзм Тогда
		ЭтотОбъект.ПолныйТекст	= ПолныйТекстИзм;
	КонецЕсли;
	
	Если НЕ ЭтотОбъект.ЭтоНовый() Тогда
		ПроверитьКартинкиПоСтатье();
		ПроверитьТаблицыПоСтатье();
		ПроверитьСноскиПоСтатье();
	КонецЕсли;
	
	ЭтотОбъект.ДополнительныеСвойства.Вставить("ТекстИзменился"		, ТекстСтатьиИзм);
	ЭтотОбъект.ДополнительныеСвойства.Вставить("ЭтоНовый"			, ЭтотОбъект.ЭтоНовый());
	ЭтотОбъект.ДополнительныеСвойства.Вставить("КатегорииОбновления", ПолучитьКатегорииДляОбновленияСтатистики());
		

КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ЭтотОбъект.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// Освобождаем статью
	Если ОсвободитьСтатью Тогда
		Справочники.БЗ_СтатьиБазыЗнаний.ЗавершитьРедактированиеСтатьи(ЭтотОбъект.Ссылка);
	КонецЕсли;
	
	ЭтоНовыйЭлемент			= ЗначениеДопСвойства("ЭтоНовый", Ложь);
	ТекстСтатьИзменился		= ЗначениеДопСвойства("ТекстИзменился", Ложь);
	КатегорииОбновления		= ЗначениеДопСвойства("КатегорииОбновления", Неопределено);
	
	ЗаписатьИзменениеСтатьи = ЭтоНовыйЭлемент;
	Если ТекстСтатьИзменился Тогда
		ЗаписатьИсториюСтатьиБазыЗнаний();
		ЗаписатьИзменениеСтатьи = Истина;
	КонецЕсли;
	
	Если ЗаписатьИзменениеСтатьи Тогда
		БЗ_БазаЗнаний.ЗарегистрироватьИзменениеСтатьи(ЭтотОбъект.Ссылка);
	КонецЕсли;
	
	Если ЭтоНовыйЭлемент ИЛИ ЗаписатьИзменениеСтатьи Тогда
		ТипНовости = ?(ЭтоНовыйЭлемент, 1, 2);
		ДобавитьНовостьБазыЗнаний(ТипНовости);
		
	КонецЕсли;
	
	//Если ЭтоНовыйЭлемент Тогда
	//	ЗаписьДокументаСпасибо();
	//КонецЕсли;
	
	Если ТипЗнч(КатегорииОбновления) = Тип("Массив") И КатегорииОбновления.Количество() > 0 Тогда
		МассивПараметров = Новый Массив;
		МассивПараметров.Добавить(Новый Структура("Категории", КатегорииОбновления));
		ФоновыеЗадания.Выполнить(
			"БЗ_БазаЗнаний.ОбновитьСтатистикуКатегорий",
			МассивПараметров, ,
			"Обновление статистики по категориям статьи");
	КонецЕсли;
	
	УдалитьДанныеХранилищаБазыЗнаний();
	
	ДатаИзменения = ТекущаяДата();

КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	ЭтотОбъект.Ответственный		= Неопределено;
	ЭтотОбъект.ДатаСоздания 		= Дата(1, 1, 1);
	ЭтотОбъект.Черновик				= Истина;
	ЭтотОбъект.ОписаниеИзменений	= "";
	ЭтотОбъект.КраткоеОписание		= "";
	ЭтотОбъект.ПолныйТекст			= "";
	ЭтотОбъект.Текст				= "";
	ЭтотОбъект.ТекстHTML			= "";
	ЭтотОбъект.Содержание.Очистить();
	ЭтотОбъект.Картинки.Очистить();
	ЭтотОбъект.Таблицы.Очистить();
	ЭтотОбъект.Сноски.Очистить();
	
КонецПроцедуры

Процедура ПередУдалением(Отказ)
	ДобавитьНовостьБазыЗнаний(3);
КонецПроцедуры

ОсвободитьСтатью = Ложь;







