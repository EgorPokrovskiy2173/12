
&НаКлиенте
Процедура КатегорииБазыЗнанийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	лЭлементТекущаяСтрока 	= Элемент.ТекущаяСтрока; 
	Если НЕ ЗначениеЗаполнено(лЭлементТекущаяСтрока) Тогда
		ОткрытьСтраницуКатегории("home"); 
	КонецЕсли;
	
	лИдентификатор 	= лЭлементТекущаяСтрока.УникальныйИдентификатор();
	ОткрытьСтраницуКатегории(лИдентификатор);
	
КонецПроцедуры   

&НаКлиенте
Процедура ОткрытьСтраницуКатегории(пИдентификатор)
	
	Если ПустаяСтрока(пИдентификатор) Тогда
		Возврат;	
	КонецЕсли; 
	
	Если пИдентификатор = "home" Тогда
		АдресСсылки 	= "kb://api/page?name=home"; 
	Иначе
		АдресСсылки 	= "kb://api/page?id=" + пИдентификатор + "&name=category";
	КонецЕсли; 
	
	ПерейтиПоУказаннойСылке(АдресСсылки);
	
КонецПроцедуры // ОткрытьСтраницуКатегории()


////////////////////////////////////////////////////////////////////////////////
// УПРАВЛЕНИЕ ФОРМОЙ

&НаКлиенте
Процедура УстановитьДоступность()
	
	КолСтрокИстории = Объект.История.Количество();
	
	КнопкаНазад 	= (КолСтрокИстории > 1 И ТекущаяСтраница > 1);
	КнопкаВперед	= (КолСтрокИстории > 1 И ТекущаяСтраница < КолСтрокИстории);
	
	Элементы.ФормаСтраницаНазад.Доступность		= КнопкаНазад;
	Элементы.КонтекстноеМенюНазад.Доступность	= КнопкаНазад;
	Элементы.ФормаСтраницаВперед.Доступность	= КнопкаВперед;
	Элементы.ФормаСтраницаВперед.Доступность	= КнопкаВперед;
	
	Элементы.ФормаПоиск.Пометка = Элементы.ГруппаПоиск.Видимость;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТКА СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

// Основная страница

&НаКлиенте
Процедура ДокументHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	
	СтандартнаяОбработка = Ложь;
	
	Если ДанныеСобытия.Anchor = Неопределено Тогда
		Возврат;
	КонецЕсли; 	
		
	ПараметрСсылки = ДанныеСобытия.Href;
	
	Если Лев(ПараметрСсылки, 7) = "mailto:" Тогда
		НавигационнаяСсылка_mailto(ПараметрСсылки);
	ИначеЕсли Лев(ПараметрСсылки, 9) = "kb://api/" Тогда
		НавигационнаяСсылка_kbapi(ПараметрСсылки);
	ИначеЕсли Лев(ПараметрСсылки, 5) = "file:" Тогда
		НавигационнаяСсылка_file(ПараметрСсылки);
	ИначеЕсли Лев(ПараметрСсылки, 4) = "http" Тогда
		ОткрытьВнешнююСсылку(ПараметрСсылки);
	ИначеЕсли Лев(ПараметрСсылки, 6) = "e1c://" Тогда
	//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Ссылки внутри документа не обрабатываются. Приносим извинения за причиненные неудобства.");
	Иначе
		Сообщить(ПараметрСсылки);
	КонецЕсли;
	УстановитьДоступность();
		
	//+++ АйТи Пронькин Д. А. 01.11.2022 ТЗ № НФ00-002450 >> e1cib/data/Документ.ЗаданиеНаРаботу?ref=a929fc3497141b3f11ed4873f525c6b3
	//Масштаб картинок в базе знаний изменяется при нажатии
	Если СтрНайти(ПараметрСсылки, "pict_") Тогда
		Длин = СтрДлина(ПараметрСсылки);
		СсылкаНаФото = Прав(ПараметрСсылки, Длин - 6);
		СсылкаНаФото = СтрЗаменить(СсылкаНаФото, "/", "\");
		//СредствоПросмотра = "rundll32 ""%ProgramFiles%\Windows Photo Viewer\PhotoViewer.dll"", ImageView_Fullscreen ";
		//КомандаОткрытьФото = СредствоПросмотра + СсылкаНаФото + "&" + "exit";
		//КомандаСистемы(КомандаОткрытьФото);
		
		ПереместитьФайл(СсылкаНаФото, СсылкаНаФото+".jpg");
		ПолноеИмяФайла = СсылкаНаФото+".jpg";
		ЗапуститьПриложение("explorer " + ПолноеИмяФайла);
		ВремяОкончания = ТекущаяДата() + 1;
		Пока ТекущаяДата() <= ВремяОкончания Цикл
		КонецЦикла;
		ПереместитьФайл(ПолноеИмяФайла, СсылкаНаФото);	
	КонецЕсли;
	//--- АйТи Пронькин Д. А. 01.11.2022 ТЗ № НФ00-002450 >> e1cib/data/Документ.ЗаданиеНаРаботу?ref=a929fc3497141b3f11ed4873f525c6b3  
	
	Если ДанныеСобытия.Element.className = "read-more-button" ИЛИ ДанныеСобытия.Element.className = "read-more-checker" Тогда
		СтандартнаяОбработка = Истина;
		Возврат;
	КонецЕсли;
	
	ПараметрСсылки = ДанныеСобытия.Href;
	Если НЕ СтрНачинаетсяС(ПараметрСсылки, "kb://api/edit") Тогда
		СсылкаНаСтраницу = ПараметрСсылки;
	КонецЕсли;
	
	//+++ АйТи Кучеров Р.М. 02.10.2020 ТЗ № НФ00-001803 >> e1cib/data/Документ.ЗаданиеНаРаботу?ref=82a932336337376211eb03e02da5a7b5
	Если Лев(ПараметрСсылки, 6) = "e1c://" Тогда
		Если СтрНайти(ПараметрСсылки, "e1cib") <> 0 Тогда
			//НавигационнаяСсылка = СтрЗаменить(ПараметрСсылки, ДанныеСобытия.Anchor.baseURI, "");
			ПерейтиПоНавигационнойСсылке(ПараметрСсылки);
		ИначеЕсли СтрНайти(ДанныеСобытия.Anchor.innerHTML, "\\") <> 0 Тогда
			ЗапуститьПриложение(ДанныеСобытия.Anchor.innerHTML);
		КонецЕсли;
		
		//Попытка
		//	лСсылка = АйТи_ОбщиеФункцииСервер.ПолучитьСсылкуИзНавигационной(ПараметрСсылки);
		//	Если ЗначениеЗаполнено(лСсылка) Тогда
		//		ОткрытьЗначение(лСсылка);
		//	КонецЕсли;
		//Исключение
		//КонецПопытки; 
	КонецЕсли;
	//--- АйТи Кучеров Р.М. 02.10.2020 ТЗ № НФ00-001803 >> e1cib/data/Документ.ЗаданиеНаРаботу?ref=82a932336337376211eb03e02da5a7b5

КонецПроцедуры

&НаКлиенте
Процедура ДокументHTMLДокументСформирован(Элемент)
	Если НЕ ПустаяСтрока(Объект.Область) Тогда
		ПерейтиНаОбластьСтраницы(Объект.Область);
		
		Объект.СтатьяБазыЗнаний = Неопределено;
		Объект.Область			= "";
	КонецЕсли;
	
	Попытка
		//+++ АйТи Чириков В. А. 15.03.2023 ТЗ № ИС00-000905 >> e1cib/data/Документ.ЗаданиеНаРаботу?ref=a93afc3497141b3f11eda154fbe781b9
		ЗаголовокHTML = Элементы.ДокументHTML.Документ.title;
		Если не ЗаголовокHTML = "Категория:" и не ЗаголовокHTML = "База знаний (основная)" Тогда
			ИмяСайта = ЗаголовокHTML;
		Иначе  
			ИмяСайта = "";
			ЭтотОбъект.Заголовок = "";
			ЭтотОбъект.АвтоЗаголовок = Истина;
		КонецЕсли;
		//--- АйТи Чириков В. А. 15.03.2023 ТЗ № ИС00-000905 >> e1cib/data/Документ.ЗаданиеНаРаботу?ref=a93afc3497141b3f11eda154fbe781b9
	Исключение
		ИмяСайта = ЭтотОбъект.Заголовок;
	КонецПопытки;
	
	Если НЕ ПустаяСтрока(ИмяСайта) И НЕ ИмяСайта = ЭтотОбъект.Заголовок Тогда
		ЭтотОбъект.АвтоЗаголовок	= Ложь;
		ЭтотОбъект.Заголовок		= ИмяСайта;
		
		Если ТекущаяСтраница > 0 И ТекущаяСтраница <= Объект.История.Количество() Тогда
			Объект.История[ТекущаяСтраница-1].Представление = ИмяСайта;
		КонецЕсли;
	КонецЕсли;   		
КонецПроцедуры
// Поиск

&НаКлиенте
Процедура СтрокаПоискаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтрокаПоиска = Текст;
	
	ВыполнитьПоиск(0);
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатПоискаHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Лев(ДанныеСобытия.Href, 9) = "kb://api/" Тогда
		НавигационнаяСсылка_kbapi(ДанныеСобытия.Href, Истина);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТКА СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	//АдресWikiСтраницы = БазаЗнанийКлиентСерверПовтИсп.ПолучитьЗначениеОбщейНастройки("АдресMediaWiki");
	//Элементы.ФормаПерейтиНаСтраницуWiki.Доступность = ЗначениеЗаполнено(АдресWikiСтраницы);
	
	Объект.СтатьяБазыЗнаний = Параметры.СтатьяБазыЗнаний;
	Объект.Область			= Параметры.Область;
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	КлючСессии = БЗ_БазаЗнаний.НачатьСессиюПользователя(ТекущийПользователь);
	
	Элементы.ФормаПрофильПользователя.Заголовок = Строка(ТекущийПользователь);
	
	Если ЗначениеЗаполнено(Объект.СтатьяБазыЗнаний) Тогда
		ПараметрыСсылки	= Новый Структура;
		ПараметрыСсылки.Вставить("id", Строка(Объект.СтатьяБазыЗнаний.УникальныйИдентификатор()));
		Если НЕ ПустаяСтрока(ПараметрыСсылки) Тогда
			ПараметрыСсылки.Вставить("section", Объект.Область);
		КонецЕсли;
		
		АдресСтраницы	= КонструкторСсылки_page("article", ПараметрыСсылки);
	Иначе 
		АдресСтраницы	= КонструкторСсылки_page("home", Неопределено);
	КонецЕсли;
	
	лЕстьИсточникОткрытия 				= Параметры.Свойство("ИсточникОткрытия");
	
	лЕстьСтатьяОткрытаИзЗадания 		= Ложь;
	
	Если лЕстьИсточникОткрытия Тогда
		ИсточникОткрытия 				= Параметры.ИсточникОткрытия;
		лЕстьСтатьяОткрытаИзЗадания 	= ТипЗнч(ИсточникОткрытия) = Тип("ДокументСсылка.ЗаданиеНаРаботу");
		
		//Айти_ОбщиеФункцииСервер.ПрименитьУсловноеОфомление(УсловноеОформление.Элементы, "ИсточникОткрытия", ВидСравненияКомпоновкиДанных.НеРавно, Неопределено, "СтатьяПомогла",,, WebЦвета.Желтый);
		Элементы.СтатьяПомогла.ЦветФона = WebЦвета.Желтый;
	Иначе
		Элементы.СтатьяПомогла.ЦветФона = Новый Цвет();
	КонецЕсли;
	
	Элементы.ГруппаИсточникОткрытия.Видимость 	= лЕстьИсточникОткрытия И (лЕстьСтатьяОткрытаИзЗадания ИЛИ Элементы.ГруппаИсточникОткрытия.Видимость);
	
	//Выделим текущую категорию статьи в меню-дереве
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СтатьиБазыЗнанийКатегории.Категория КАК Категория,
		|	СтатьиБазыЗнанийКатегории.Категория.Наименование КАК КатегорияНаименование
		|ИЗ
		|	Справочник.БЗ_СтатьиБазыЗнаний.Категории КАК СтатьиБазыЗнанийКатегории
		|ГДЕ
		|	СтатьиБазыЗнанийКатегории.Ссылка = &Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	КатегорияНаименование";
	
	Запрос.УстановитьПараметр("Ссылка", Объект.СтатьяБазыЗнаний);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		лВыборка 	= РезультатЗапроса.Выбрать();
		Если лВыборка.Следующий() Тогда
			Элементы.КатегорииБазыЗнаний.ТекущаяСтрока 	= лВыборка.Категория;
		КонецЕсли;
	КонецЕсли;
	
	Элементы.ГруппаПоискаСтатей.Видимость = ИспользуетсяПолнотекстовыйПоиск();

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	//Результат = ОбщегоНазначенияКлиент.ПредложитьУстановкуРасширенияРаботыСФайлами();
	//Если НЕ Результат = "Подключено" Тогда
	//	Отказ = Истина;
	//	Возврат;
	//КонецЕсли;
	
	Элементы.ГруппаПоиск.Видимость = Ложь;
	
	УстановитьДоступность();
	
	Если ЗначениеЗаполнено(АдресСтраницы) Тогда
		ПараметрыВывода = Новый Структура("Обновление", Истина);
		ПерейтиНаСтраницу(АдресСтраницы, ПараметрыВывода);
	КонецЕсли;
	
	//ПодключитьОбработчикОжидания("ОбработатьОповещенияПользователя", 5, Ложь); 
	
	ЗаполнитьКоличествоСтатьяПомогла();
	ЗаполнитьСамыйПолезныйАвтор();
	ЗаполнитьСамыйПродуктивныйАвтор(); 
	
	//+++ АйТи Чекордина И.В. 18.02.2022 ТЗ № ИС00-001024 >> e1cib/data/Документ.ЗаданиеНаРаботу?ref=a915fc3497141b3f11ec8d5adddf1c73
    Элементы.ФормаПоиск.ЦветФона = WebЦвета.Золотой;
	//--- АйТи Чекордина И.В. 18.02.2022 ТЗ № ИС00-001024 >> e1cib/data/Документ.ЗаданиеНаРаботу?ref=a915fc3497141b3f11ec8d5adddf1c73
	
	Элементы.СтатьиДляИзучения.Видимость = БЗ_БазаЗнаний.ПроверитьВыдачуСтатейНаИзучение();
	
КонецПроцедуры

//+++ АйТи Смирнов Д.В. 13.10.2021
&НаКлиенте
Процедура ЗаполнитьКоличествоСтатьяПомогла()
	
	СчётчикКоличествоСтатьяПомогла = СчётчикКоличествоСтатьяПомогла();
	Если ЗначениеЗаполнено(СчётчикКоличествоСтатьяПомогла) Тогда
		Элементы.КоличествоСтатьяПомогла.Шрифт = Новый Шрифт(Элементы.КоличествоСтатьяПомогла.Шрифт,,, Истина);
	Иначе
		Элементы.КоличествоСтатьяПомогла.Шрифт = Новый Шрифт(Элементы.КоличествоСтатьяПомогла.Шрифт,,, Ложь);
	КонецЕсли;
	
	Элементы.КоличествоСтатьяПомогла.Заголовок = СтрШаблон("Мои статьи помогли %1 раз", Строка(СчётчикКоличествоСтатьяПомогла));
	
КонецПроцедуры 

&НаСервереБезКонтекста
Функция СчётчикКоличествоСтатьяПомогла()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(БЗ_СтатьяПомогла.СтатьяБазыЗнаний) КАК СтатьяБазыЗнаний
	|ИЗ
	|	РегистрСведений.БЗ_СтатьяПомогла КАК БЗ_СтатьяПомогла
	|ГДЕ
	|	БЗ_СтатьяПомогла.СтатьяБазыЗнаний.Ответственный = &Пользователь
	|	И БЗ_СтатьяПомогла.Период МЕЖДУ &ДатаМинусТриМесяца И &ТекущаяДата";
	Запрос.УстановитьПараметр("ДатаМинусТриМесяца",ДобавитьМесяц(ТекущаяДата(), -3));
	Запрос.УстановитьПараметр("ТекущаяДата",ТекущаяДата());
	Запрос.УстановитьПараметр("Пользователь", ПараметрыСеанса.ТекущийПользователь);
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.СтатьяБазыЗнаний;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции 

&НаКлиенте
Процедура ЗаполнитьСамыйПолезныйАвтор()
	
	ПолезныйАвтор = ПолезныйАвтор();
	Если ЗначениеЗаполнено(ПолезныйАвтор) Тогда
		Элементы.СамыйПолезныйАвтор.Шрифт = Новый Шрифт(Элементы.СамыйПолезныйАвтор.Шрифт,,, Истина);
	Иначе
		Элементы.СамыйПолезныйАвтор.Шрифт = Новый Шрифт(Элементы.СамыйПолезныйАвтор.Шрифт,,, Ложь);
	КонецЕсли;
	
	Элементы.СамыйПолезныйАвтор.Заголовок = СтрШаблон("Самый полезный автор %1 ", Строка(ПолезныйАвтор));
	
КонецПроцедуры 

&НаСервереБезКонтекста
Функция ПолезныйАвтор()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	КОЛИЧЕСТВО(БЗ_СтатьяПомогла.СтатьяБазыЗнаний) КАК СтатьяБазыЗнаний,
	|	БЗ_СтатьяПомогла.СтатьяБазыЗнаний.Ответственный КАК СтатьяБазыЗнанийОтветственный,
	|	БЗ_СтатьяПомогла.Период КАК Период
	|ИЗ
	|	РегистрСведений.БЗ_СтатьяПомогла КАК БЗ_СтатьяПомогла
	|ГДЕ
	|	БЗ_СтатьяПомогла.Период МЕЖДУ &ДатаМинусТриМесяца И &ТекущаяДата
	|
	|СГРУППИРОВАТЬ ПО
	|	БЗ_СтатьяПомогла.СтатьяБазыЗнаний.Ответственный,
	|	БЗ_СтатьяПомогла.Период
	|
	|УПОРЯДОЧИТЬ ПО
	|	СтатьяБазыЗнаний УБЫВ";
	
	Запрос.УстановитьПараметр("ДатаМинусТриМесяца",ДобавитьМесяц(ТекущаяДата(), -3));
	Запрос.УстановитьПараметр("ТекущаяДата",ТекущаяДата());
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.СтатьяБазыЗнанийОтветственный;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции 

&НаКлиенте
Процедура ЗаполнитьСамыйПродуктивныйАвтор()
	
	ПродуктивныйАвтор = ПродуктивныйАвтор();
	Если ЗначениеЗаполнено(ПродуктивныйАвтор) Тогда
		Элементы.СамыйПродуктивныйАвтор.Шрифт = Новый Шрифт(Элементы.СамыйПродуктивныйАвтор.Шрифт,,, Истина);
	Иначе
		Элементы.СамыйПродуктивныйАвтор.Шрифт = Новый Шрифт(Элементы.СамыйПродуктивныйАвтор.Шрифт,,, Ложь);
	КонецЕсли;
	
	Элементы.СамыйПродуктивныйАвтор.Заголовок = СтрШаблон("Самый продуктивный автор %1 ", Строка(ПродуктивныйАвтор));
	
КонецПроцедуры 

&НаСервереБезКонтекста
Функция ПродуктивныйАвтор()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	КОЛИЧЕСТВО(БЗ_СтатьиБазыЗнаний.Ответственный) КАК Ответственный1,
	               |	БЗ_СтатьиБазыЗнаний.Ответственный КАК Ответственный
	               |ИЗ
	               |	Справочник.БЗ_СтатьиБазыЗнаний КАК БЗ_СтатьиБазыЗнаний
	               |ГДЕ
	               |	БЗ_СтатьиБазыЗнаний.ДатаСоздания МЕЖДУ &ДатаМинусТриМесяца И &ТекущаяДата
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	БЗ_СтатьиБазыЗнаний.Ответственный
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Ответственный1 УБЫВ";
	
	Запрос.УстановитьПараметр("ДатаМинусТриМесяца",ДобавитьМесяц(ТекущаяДата(), -3));
	Запрос.УстановитьПараметр("ТекущаяДата",ТекущаяДата());
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.Ответственный;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции 
//--- АйТи Смирнов Д.В. 13.10.2021.


&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	
	//ОбновитьСтраницу(Неопределено);
	//
	//Если ТипЗнч(НовыйОбъект) = Тип("СправочникСсылка.КомментарииБазыЗнаний") Тогда
	//	Идентификатор	= НовыйОбъект.УникальныйИдентификатор();
	//	ОбластьПерехода	= "comment_" + Строка(Идентификатор);
	//	ПерейтиНаОбластьСтраницы(ОбластьПерехода);
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТКА КОМАНД ФОРМЫ

&НаКлиенте
Процедура ИнформацияОСистеме(Команда)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура Поиск(Команда)
	Если не ИспользуетсяПолнотекстовыйПоиск() Тогда
		Сообщить("Не включен полнотекстовый поиск. Для использования поиска по статьям необходимо его включить");
		Возврат;
	КонецЕсли;
	
	Элементы.ГруппаПоиск.Видимость = НЕ Элементы.ГруппаПоиск.Видимость;
	
	УстановитьДоступность();
КонецПроцедуры

&НаКлиенте
Процедура ГлавнаяСтраница(Команда)
	
	АдресСтраницы	= КонструкторСсылки_page("home", Неопределено);
	НавигационнаяСсылка_kbapi(АдресСтраницы);
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницаВперед(Команда)
	
	НоваяСтраница = ТекущаяСтраница + 1;
	
	Если НоваяСтраница >= 1 И НоваяСтраница <= Объект.История.Количество() Тогда
		ЭтотОбъект.ДокументHTML = Объект.История[НоваяСтраница-1].ТекстСтраницы;
		
		ТекущаяСтраница = НоваяСтраница;
	КонецЕсли;
	
	УстановитьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницаНазад(Команда)
	
	НоваяСтраница = ТекущаяСтраница - 1;
	
	Если НоваяСтраница >= 1 И НоваяСтраница <= Объект.История.Количество() Тогда
		ЭтотОбъект.ДокументHTML		= Объект.История[НоваяСтраница-1].ТекстСтраницы;
		
		ТекущаяСтраница = НоваяСтраница;
	КонецЕсли;
	
	УстановитьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтраницу(Команда)
	
	АдресСтраницы = ПолучитьТекущийАдресСсылки(Объект.История, ТекущаяСтраница);
	
	ПараметрыСтраницы = Новый Структура;
	ПараметрыСтраницы.Вставить("Обновление", Истина);
	
	ПерейтиНаСтраницу(АдресСтраницы, ПараметрыСтраницы);
	
КонецПроцедуры

&НаКлиенте
Процедура Сохранить(Команда)
	
	МестоСохранения = ВыбратьМестоСохранения(Истина);
	Если МестоСохранения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСсылка	= ПолучитьТекущуюСсылку(Объект.История, ТекущаяСтраница);
	ИмяФайла		= ЭтотОбъект.Заголовок;
	ИмяФайла		= ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ИмяФайла);
	ПутьКФайлу		= МестоСохранения + "\" + ИмяФайла + ".html";
	
	ТекстСтраницы = ЭтотОбъект.ДокументHTML;
	
	ЗаписьТекста = Новый ЗаписьТекста;
	ЗаписьТекста.Открыть(ПутьКФайлу);
	ЗаписьТекста.Записать(ТекстСтраницы);
	ЗаписьТекста.Закрыть();
	
	ЗапуститьПриложение(ПутьКФайлу);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьСКартинками(Команда)
	
	МестоСохранения = ВыбратьМестоСохранения(Истина);
	Если МестоСохранения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МестоСохранения = МестоСохранения + "\";
	АдресаКартинок	= Новый Соответствие;
	
	ТекстСтраницы = ЭтотОбъект.ДокументHTML;
	
	КаталогФайлов	= БЗ_БазаЗнанийКлиентСерверПовтИсп.КаталогФайлов();
	
	КопияСтроки		= ТекстСтраницы;
	ОстатокСтроки	= ТекстСтраницы;
	Позиция			= Найти(ОстатокСтроки, "img src='" + КаталогФайлов);
	Пока Позиция > 0 Цикл
		СтрокаДокумента = Сред(ОстатокСтроки, Позиция + 9);
		КонецИмени		= Найти(СтрокаДокумента, "'");
		АдресФайла		= Сред(СтрокаДокумента, 1, КонецИмени - 1);
		НовыйАдрес		= СтрЗаменить(АдресФайла, КаталогФайлов, МестоСохранения);
		
		КопироватьФайл(АдресФайла, НовыйАдрес);
		
		АдресаКартинок.Вставить(АдресФайла, НовыйАдрес);
		
		ОстатокСтроки	= Сред(СтрокаДокумента, КонецИмени + 1);
		Позиция			= Найти(ОстатокСтроки, "img src='");
	КонецЦикла;
	
	Для Каждого КлючИЗначение Из АдресаКартинок Цикл
		АдресВДокументе	= "'" + КлючИЗначение.Ключ + "'";
		НовыйАдресФайла	= "'" + КлючИЗначение.Значение + "'";
		
		КопияСтроки = СтрЗаменить(КопияСтроки, АдресВДокументе, НовыйАдресФайла);
	КонецЦикла;
	
	ТекущаяСсылка	= ПолучитьТекущуюСсылку(Объект.История, ТекущаяСтраница);
	ИмяФайла		= ЭтотОбъект.Заголовок;
	ИмяФайла		= ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ИмяФайла);
	ПутьКФайлу		= МестоСохранения + ИмяФайла + ".html";
	
	ЗаписьТекста = Новый ЗаписьТекста;
	ЗаписьТекста.Открыть(ПутьКФайлу);
	ЗаписьТекста.Записать(КопияСтроки);
	ЗаписьТекста.Закрыть();
	
	ЗапуститьПриложение(ПутьКФайлу);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьОкноПоиска(Команда)
	Элементы.ГруппаПоиск.Видимость = Ложь;
	
	УстановитьДоступность();
КонецПроцедуры

&НаКлиенте
Процедура СледующаяСтраницаПоиска(Команда)
	
	ВыполнитьПоиск(1);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредыдущаяСтраницаПоиска(Команда)
	
	ВыполнитьПоиск(-1);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиНаСтраницуWiki(Команда)
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("Адрес", БЗ_БазаЗнанийКлиентСерверПовтИсп.ПолучитьЗначениеОбщейНастройки("АдресMediaWiki"));
	ОткрытьВнешнююСсылкуВыполнить(КодВозвратаДиалога.Нет, ДопПараметры);
КонецПроцедуры

&НаКлиенте
Процедура ПрофильПользователя(Команда)
	
	ПараметрыСсылки	= Новый Структура;
	ПараметрыСсылки.Вставить("id", Строка(ТекущийПользователь.УникальныйИдентификатор()));
	АдресСтраницы = КонструкторСсылки_page("user", ПараметрыСсылки);
	
	ПерейтиНаСтраницу(АдресСтраницы); 
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// НАВИГАЦИОННЫЕ ССЫЛКИ

&НаКлиенте
Процедура ОткрытьВнешнююСсылку(АдресСсылки)
	
	СписокКнопок = Новый СписокЗначений;
	СписокКнопок.Добавить(КодВозвратаДиалога.Да		, "Да (в браузере)");
	СписокКнопок.Добавить(КодВозвратаДиалога.Нет	, "Нет (в окне 1С)");
	СписокКнопок.Добавить(КодВозвратаДиалога.Отмена	, "Отмена (не открывать)");
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьВнешнююСсылкуВыполнить", ЭтотОбъект, Новый Структура("Адрес", АдресСсылки));
	ПоказатьВопрос(ОписаниеОповещения,
		НСтр("ru='Открыть внешнюю ссылку в окне браузера по умолчанию?
		|" + АдресСсылки + "'"),
		СписокКнопок,
		,
		КодВозвратаДиалога.Отмена,
		,
		КодВозвратаДиалога.Отмена);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьАдресСсылки_create(знач ДанныеСсылки)
	
	ПараметрыСсылки = ДанныеСсылки.Параметры;
	Если НЕ ПараметрыСсылки.Свойство("name") Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСсылка = ПолучитьТекущуюСсылку(Объект.История, ТекущаяСтраница);
	           
	Если ПараметрыСсылки.name = "category" Тогда
		ИДКомментарий		= ?(ПараметрыСсылки.Свойство("parent"), ПараметрыСсылки.parent, "");
		//+++ АйТи КучеровРМ 06.11.2018 ТЗ № ИС00-002921
		// Причина заменты кода: что тут происходит!? Вроде код для категории, но кругом Комментарий
		//+++ Было до 06.11.2018 17:26:52 // Далее тут старый код, который теперь заменён
		//КомментарийСсылка	= ПолучитьСсылкуПоИдентификатору("КомментарииБазыЗнаний", ИДКомментарий);
		//--- Было до 06.11.2018 17:26:52
		КомментарийСсылка	= ПолучитьСсылкуПоИдентификатору("БЗ_КатегорииБазыЗнаний", ИДКомментарий);
		//--- АйТи КучеровРМ 06.11.2018 ТЗ № ИС00-002921
		ЗначенияЗаполнения	= Новый Структура("Родитель", КомментарийСсылка);
		ПараметрыФормы		= Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения);
		ИмяФормыСсылки		= "Справочник.БЗ_КатегорииБазыЗнаний.ФормаОбъекта";
		ОписаниеОповещения	= Новый ОписаниеОповещения("ПослеИзмененияДанныхКатегории", ЭтотОбъект, Новый Структура("ЭтоНовый", Истина));
	ИначеЕсли ПараметрыСсылки.name = "article" Тогда
		ИДКатегория			= ?(ПараметрыСсылки.Свойство("category"), ПараметрыСсылки.category, "");
		КатегорияСсылка		= ПолучитьСсылкуПоИдентификатору("БЗ_КатегорииБазыЗнаний", ИДКатегория);
		
		ЗначенияЗаполнения	= Новый Структура;
		ЗначенияЗаполнения.Вставить("Категория", КатегорияСсылка);
		
		ПараметрыФормы		= Новый Структура;
		ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
		
		//+++ АйТи КучеровРМ 06.11.2018 ТЗ № ИС00-002921
		// Причина заменты кода: Наличие присвоения "Неопределено" мешает передавать параметры
		//+++ Было до 06.11.2018 17:26:52 // Далее тут старый код, который теперь заменён
		//ПараметрыФормы		= Неопределено;
		//--- Было до 06.11.2018 17:26:52 
		//--- АйТи КучеровРМ 06.11.2018 ТЗ № ИС00-002921 
		
		ИмяФормыСсылки		= "Справочник.БЗ_СтатьиБазыЗнаний.Форма.РедактированиеСтатьи";
		ОписаниеОповещения	= Новый ОписаниеОповещения("ПослеИзмененияДанныхСтатьи", ЭтотОбъект, Новый Структура("ЭтоНовый", Истина));
	ИначеЕсли ПараметрыСсылки.name = "comment" Тогда
		ИДКомментарий	= ?(ПараметрыСсылки.Свойство("id"), ПараметрыСсылки.id, "");
		ИДСтатья		= ?(ПараметрыСсылки.Свойство("article"), ПараметрыСсылки.article, "");
		ИДАвтор			= ?(ПараметрыСсылки.Свойство("user"), ПараметрыСсылки.user, "");
		
		КомментарийСсылка	= ПолучитьСсылкуПоИдентификатору("БЗ_КомментарииБазыЗнаний", ИДКомментарий);
		СтатьяСсылка		= ПолучитьСсылкуПоИдентификатору("БЗ_СтатьиБазыЗнаний", ИДСтатья);
		ПользовательСсылка	= ПолучитьСсылкуПоИдентификатору("Пользователи", ИДАвтор);
		
		ЗначенияЗаполнения	= Новый Структура;
		ЗначенияЗаполнения.Вставить("Владелец"	, ?(ЗначениеЗаполнено(СтатьяСсылка), СтатьяСсылка, ТекущаяСсылка));
		ЗначенияЗаполнения.Вставить("Автор"		, ?(ЗначениеЗаполнено(ПользовательСсылка), ЭтотОбъект.ТекущийПользователь, ПользовательСсылка));
		
		ПараметрыФормы		= Новый Структура;
		ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
		ПараметрыФормы.Вставить("Родитель", КомментарийСсылка);
		
		ИмяФормыСсылки		= "Справочник.БЗ_КомментарииБазыЗнаний.Форма.ФормаРедактирования";
		
		ПараметрыОповещения	= Новый Структура;
		ПараметрыОповещения.Вставить("Ссылка"	, КомментарийСсылка);
		ПараметрыОповещения.Вставить("Статья"	, ТекущаяСсылка);
		ОписаниеОповещения	= Новый ОписаниеОповещения("ПослеИзмененияДанныхКомментария", ЭтотОбъект, ПараметрыОповещения);
	Иначе 
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму(ИмяФормыСсылки, ПараметрыФормы, ЭтотОбъект, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьАдресСсылки_edit(знач ДанныеСсылки)
	
	ПараметрыСсылки = ДанныеСсылки.Параметры;
	Если НЕ ПараметрыСсылки.Свойство("name") Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСсылка = ПолучитьТекущуюСсылку(Объект.История, ТекущаяСтраница);
	
	Если ПараметрыСсылки.name = "category" Тогда
		Идентификатор		= ?(ПараметрыСсылки.Свойство("id"), ПараметрыСсылки.id, "");
		ЭлементСсылка		= ПолучитьСсылкуПоИдентификатору("БЗ_КатегорииБазыЗнаний", Идентификатор);
		ИмяФормыСсылки		= "Справочник.БЗ_КатегорииБазыЗнаний.ФормаОбъекта";
		ОписаниеОповещения	= Новый ОписаниеОповещения("ПослеИзмененияДанныхКатегории", ЭтотОбъект, Новый Структура("Категория", ЭлементСсылка));
	ИначеЕсли ПараметрыСсылки.name = "article" Тогда
		Идентификатор		= ?(ПараметрыСсылки.Свойство("id"), ПараметрыСсылки.id, "");
		ЭлементСсылка		= ПолучитьСсылкуПоИдентификатору("БЗ_СтатьиБазыЗнаний", Идентификатор);
		ИмяФормыСсылки		= "Справочник.БЗ_СтатьиБазыЗнаний.Форма.РедактированиеСтатьи";
		ОписаниеОповещения	= Новый ОписаниеОповещения("ПослеИзмененияДанныхСтатьи", ЭтотОбъект, Новый Структура("Статья", ЭлементСсылка));
	ИначеЕсли ПараметрыСсылки.name = "comment" Тогда
		Идентификатор		= ?(ПараметрыСсылки.Свойство("id"), ПараметрыСсылки.id, "");
		ЭлементСсылка		= ПолучитьСсылкуПоИдентификатору("БЗ_КомментарииБазыЗнаний", Идентификатор);
		ИмяФормыСсылки		= "Справочник.БЗ_КомментарииБазыЗнаний.Форма.ФормаРедактирования";
		
		ПараметрыОповещения	= Новый Структура;
		ПараметрыОповещения.Вставить("Ссылка"	, ЭлементСсылка);
		ПараметрыОповещения.Вставить("Статья"	, ТекущаяСсылка);
		
		ОписаниеОповещения	= Новый ОписаниеОповещения("ПослеИзмененияДанныхКомментария", ЭтотОбъект, ПараметрыОповещения);
	Иначе 
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ЭлементСсылка) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Ссылка не определена.");
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("Ключ", ЭлементСсылка);
	ОткрытьФорму(ИмяФормыСсылки, ПараметрыФормы, ЭтотОбъект, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьАдресСсылки_delete(знач ДанныеСсылки)
	
	ПараметрыСсылки = ДанныеСсылки.Параметры;
	Если НЕ ПараметрыСсылки.Свойство("name") Тогда
		Возврат;
	КонецЕсли;
	
	ОбластьПерехода = "";
	
	Если ПараметрыСсылки.name = "comment" Тогда
		Идентификатор		= ?(ПараметрыСсылки.Свойство("id"), ПараметрыСсылки.id, "");
		КомментарийСсылка	= ПолучитьСсылкуПоИдентификатору("БЗ_КомментарииБазыЗнаний", Идентификатор);
		УдалитьКомментарийНаСервере(КомментарийСсылка);
		ОбластьПерехода		= "comments";
	Иначе 
		Возврат;
	КонецЕсли;
	
	ОбновитьСтраницу(Неопределено);
	
	Если НЕ ПустаяСтрока(ОбластьПерехода) Тогда
		ПерейтиНаОбластьСтраницы(ОбластьПерехода);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьАдресСсылки_rating(знач ДанныеСсылки)
	
	ПараметрыСсылки = ДанныеСсылки.Параметры;
	ИмяОбласти		= ?(ПараметрыСсылки.Свойство("name"), ПараметрыСсылки.name, "");
	Идентификатор	= ?(ПараметрыСсылки.Свойство("id"), ПараметрыСсылки.id, "");
	Если НЕ ПараметрыСсылки.name = "article" Тогда
		Возврат;
	ИначеЕсли ПустаяСтрока(Идентификатор) Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементСсылка	= ПолучитьСсылкуПоИдентификатору("БЗ_СтатьиБазыЗнаний", Идентификатор);
	Если НЕ ЗначениеЗаполнено(ЭлементСсылка) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Ссылка не определена.");
		Возврат;
	КонецЕсли;
	
	ОбработкаОповещения = Новый ОписаниеОповещения("ПослеИзмененияДанныхСтатьи", ЭтотОбъект, Новый Структура("Статья", ЭлементСсылка));
	
	ПараметрыФормы = Новый Структура("Статья, Пользователь", ЭлементСсылка, ТекущийПользователь);
	ОткрытьФорму("Справочник.БЗ_СтатьиБазыЗнаний.Форма.РедактированиеРейтинга", ПараметрыФормы, ЭтотОбъект, , , , ОбработкаОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьАдресСсылки_refresh(знач ДанныеСсылки)
	
	Если ТипЗнч(ДанныеСсылки) = Тип("Строка") Тогда
		ДанныеСсылки = РазобратьАдресСсылкиНаСервере(ДанныеСсылки);
	КонецЕсли;
	
	ПараметрыСсылки = ДанныеСсылки.Параметры;
	Если НЕ ПараметрыСсылки.Свойство("name") Тогда
		Возврат;
	КонецЕсли;
	
	ИмяОбласти	= ПараметрыСсылки.name;
	ТекстHTML	= БЗ_БазаЗнанийHTMLКлиент.ПолучитьЧастьСтраницыОбновления(ДанныеСсылки);

	НачПозиция = Найти(ДокументHTML, "id='" + ИмяОбласти + "'");
	Если НачПозиция > 0 Тогда
		ТекстHTMLУдалить = БЗ_БазаЗнанийHTMLКлиентСервер.ВыделитьЭлементHTMLПоТегу(ДокументHTML, НачПозиция, "div");
		ДокументHTML = СтрЗаменить(ДокументHTML, ТекстHTMLУдалить, ТекстHTML);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьАдресСсылки_search(знач ДанныеСсылки)
	
	ПараметрыСсылки = ДанныеСсылки.Параметры;
	ТекстПоиска	= ?(ПараметрыСсылки.Свойство("text"), ПараметрыСсылки.text, "");
	Если ПустаяСтрока(ТекстПоиска) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Значение для поиска не определено.");
		Возврат;
	КонецЕсли;
	
	Элементы.ГруппаПоиск.Видимость = Истина;
	УстановитьДоступность();
	
	СтрокаПоиска = ТекстПоиска;
	
	ВыполнитьПоиск(0);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьАдресСсылки_subscribe(знач ДанныеСсылки)
	
	ПараметрыСсылки = ДанныеСсылки.Параметры;
	Если НЕ ПараметрыСсылки.Свойство("name") Тогда
		Возврат;
	КонецЕсли;
	Если НЕ ПараметрыСсылки.name = "category" Тогда
		Возврат;
	КонецЕсли;
	
	КатегорияСсылка = ПолучитьСсылкуПоИдентификатору("БЗ_КатегорииБазыЗнаний", ПараметрыСсылки.id);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Пользователь"			, ЭтотОбъект.ТекущийПользователь);
	ПараметрыФормы.Вставить("КатегорияБазыЗнаний"	, КатегорияСсылка);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеИзмененияДанныхПодписки", ЭтотОбъект, ПараметрыФормы);
	
	ОткрытьФорму("РегистрСведений.БЗ_ИзбранноеБазыЗнаний.Форма.ФормаРедактирования", ПараметрыФормы, ЭтотОбъект, , , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура НавигационнаяСсылка_mailto(ПараметрСсылки)
	ПочтовыйАдрес = Сред(ПараметрСсылки, 8);
	
	МассивКонтакты = ПолучитьКонтактыПоEMailНаСервере(ПочтовыйАдрес);
	СоздатьНовоеВзаимодействие(
		"ЭлектронноеПисьмоИсходящее",
		Новый Структура("ЗначенияЗаполнения", Новый Структура("Контакты", МассивКонтакты)));
КонецПроцедуры

&НаКлиенте
Процедура НавигационнаяСсылка_file(ПараметрСсылки)
	
	ПутьКФайлу	= Сред(ПараметрСсылки, 6);
	Если Лев(ПутьКФайлу, 3) = "///" Тогда
		ПутьКФайлу = Сред(ПутьКФайлу, 4);
	КонецЕсли;
	
	// Уберем пробелы, с др. символами заморочимся потом
	ПутьКФайлу	= СтрЗаменить(ПутьКФайлу, "%20", " ");
	
	ОбъектФайл	= Новый Файл(ПутьКФайлу);
	Если НЕ ОбъектФайл.Существует() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Файл не найден. Открыть его не представляется возможным.");
		Возврат;
	КонецЕсли;
	
	ИмяФайла	= ОбъектФайл.ИмяБезРасширения;
	Расширение	= ОбъектФайл.Расширение;
	
	Если НЕ ЗначениеЗаполнено(Расширение) И Лев(ИмяФайла, 5) = "pict_" Тогда
		ПутьКФайлу = СтрЗаменить(ПутьКФайлу, "/", "\");
		ПараметрыФормы = Новый Структура("СтрокаHTML", "<html><body><img src='" + ПутьКФайлу + "'></body></html>");
		ОткрытьФорму("Справочник.БЗ_СтатьиБазыЗнаний.Форма.ПросмотрHTML", ПараметрыФормы);
	Иначе 
		ЗапуститьПриложение(ПутьКФайлу);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НавигационнаяСсылка_kbapi(ПараметрСсылки, ВыделятьКлючевыеСлова = Ложь)
	
	АдресСтраницы	= ПараметрСсылки;
	ДанныеСсылки	= РазобратьАдресСсылкиНаСервере(АдресСтраницы);
	
	Если ДанныеСсылки.Команда = "page" Тогда
		ПерейтиНаСтраницу(ДанныеСсылки, ВыделятьКлючевыеСлова);
	ИначеЕсли ДанныеСсылки.Команда = "create" Тогда
		ОбработатьАдресСсылки_create(ДанныеСсылки);	
	ИначеЕсли ДанныеСсылки.Команда = "edit" Тогда
		ОбработатьАдресСсылки_edit(ДанныеСсылки);	
	ИначеЕсли ДанныеСсылки.Команда = "delete" Тогда
		ОбработатьАдресСсылки_delete(ДанныеСсылки);	
	ИначеЕсли ДанныеСсылки.Команда = "rating" Тогда
		ОбработатьАдресСсылки_rating(ДанныеСсылки);	
	ИначеЕсли ДанныеСсылки.Команда = "refresh" Тогда
		ОбработатьАдресСсылки_refresh(ДанныеСсылки);	
	ИначеЕсли ДанныеСсылки.Команда = "search" Тогда
		ОбработатьАдресСсылки_search(ДанныеСсылки);	
	ИначеЕсли ДанныеСсылки.Команда = "subscribe" Тогда
		ОбработатьАдресСсылки_subscribe(ДанныеСсылки);	
	//Иначе 
	//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ПараметрСсылки);
	КонецЕсли; 

    АдресСтраницы	= ПараметрСсылки;
	ДанныеСсылки	= РазобратьАдресСсылкиНаСервере(АдресСтраницы);
	
	Если ДанныеСсылки.Команда = "GetLink" Тогда
		ОткрытьФорму("Обработка.БЗ_БазаЗнаний.Форма.ФормаКопированияСсылки",Новый Структура("Объект", Объект.СтатьяБазыЗнаний));
		ОбновитьСтраницу(Неопределено);
		//СсылкуВБуферОбмена(Неопределено);
		
		//Сообщение          = Новый СообщениеПользователю;
		//Сообщение.Текст = "Ссылка на статью скопирована в буфер";
		//Сообщение.Сообщить();
	//+++ АйТи Гречкин А.В. 12.05.2022 ТЗ № ИС00-005239 >> e1cib/data/Документ.ЗаданиеНаРаботу?ref=a90efc3497141b3f11ec4203a57b1d84
 
	ИначеЕсли ДанныеСсылки.Команда = "AddToFavorite" Тогда 
		ВыбраннаяСтатья = БЗ_ОбщиеФункцииСервер.ПолучитьСсылкуПоИдентификатору("БЗ_СтатьиБазыЗнаний", ДанныеСсылки.Параметры.id);
		
		СтрокаВозврата = ""; 
		//+++ АйТи Чириков В. А. 22.03.2023 ТЗ № ИС00-001047 >> e1cib/data/Документ.ЗаданиеНаРаботу?ref=a93bfc3497141b3f11eda38f7dd40ec4  
		ДобавитьВИзбранное(ВыбраннаяСтатья, СтрокаВозврата);
		
		Сообщение          = Новый СообщениеПользователю;
		Сообщение.Текст = СтрокаВозврата;
		Сообщение.Сообщить(); 
		
		ОбновитьИнтерфейс();
		ОбновитьСтраницу(Неопределено); 
		//--- АйТи Чириков В. А. 22.03.2023 ТЗ № ИС00-001047 >> e1cib/data/Документ.ЗаданиеНаРаботу?ref=a93bfc3497141b3f11eda38f7dd40ec4
	//--- АйТи Гречкин А.В. 12.05.2022 ТЗ № ИС00-005239 >> e1cib/data/Документ.ЗаданиеНаРаботу?ref=a90efc3497141b3f11ec4203a57b1d84

	ИначеЕсли ДанныеСсылки.Команда = "OpenFile" Тогда
		ВыбранныйФайл = БЗ_ОбщиеФункцииСервер.ПолучитьСсылкуПоИдентификатору("БЗ_СтатьиБазыЗнанийПрисоединенныеФайлы", ДанныеСсылки.Параметры.id);
		
		ДанныеФайла = РаботаСФайламиСлужебныйВызовСервера.ДанныеФайлаДляОткрытия(ВыбранныйФайл, Неопределено, УникальныйИдентификатор);
		РаботаСФайламиКлиент.ОткрытьФайл(ДанныеФайла, Ложь);
	ИначеЕсли ДанныеСсылки.Команда = "ArticleAssimilated" Тогда
		ВыбраннаяСтатья = БЗ_ОбщиеФункцииСервер.ПолучитьСсылкуПоИдентификатору("БЗ_СтатьиБазыЗнаний", ДанныеСсылки.Параметры.id);
		УстановитьПризнакИзученостиСтатьи(ВыбраннаяСтатья);
		Оповестить("СтатьяИзучена", ВыбраннаяСтатья);
		ОповеститьОбИзменении(Тип("РегистрСведенийКлючЗаписи.БЗ_СостояниеСтатейБазыЗнаний"));
		
		ОбновитьСтраницу(Неопределено);
		Объект.Область = "article_tags";
		//ПерейтиНаОбластьСтраницы("comments");
	ИначеЕсли ДанныеСсылки.Команда = "ArticleHelped" Тогда
		ВыбраннаяСтатья = БЗ_ОбщиеФункцииСервер.ПолучитьСсылкуПоИдентификатору("БЗ_СтатьиБазыЗнаний", ДанныеСсылки.Параметры.id);
		УстановитьПризнакСтатьяПомогла(ВыбраннаяСтатья);
		
		ОбновитьСтраницу(Неопределено);
		Объект.Область = "article_tags";
		//ПерейтиНаОбластьСтраницы("article_tags");
	ИначеЕсли ДанныеСсылки.Команда = "UpdatingIsRequired" Тогда
		ВыбраннаяСтатья = БЗ_ОбщиеФункцииСервер.ПолучитьСсылкуПоИдентификатору("БЗ_СтатьиБазыЗнаний", ДанныеСсылки.Параметры.id);
		
		//+++ АйТи Чириков В.А. 13.07.2022 ТЗ № ИС00-004074 >> e1cib/data/Документ.ЗаданиеНаРаботу?ref=a91cfc3497141b3f11ecec9557ec9136  
		//Заменил "" на Неопределено
		ТекстКомментария = Неопределено;
		//--- АйТи Чириков В.А. 13.07.2022 ТЗ № ИС00-004074 >> e1cib/data/Документ.ЗаданиеНаРаботу?ref=a91cfc3497141b3f11ecec9557ec9136
		ОП = Новый ОписаниеОповещения("ПослеУказанияПричиныАктуализации", ЭтаФорма, Новый Структура("Статья", ВыбраннаяСтатья));
		
		ПоказатьВводСтроки(ОП, ТекстКомментария, "Опишите причину актуализации",, Истина);
	ИначеЕсли ДанныеСсылки.Команда = "TranscriptArticleStudied" Тогда
		ВыбраннаяКатегория = БЗ_ОбщиеФункцииСервер.ПолучитьСсылкуПоИдентификатору("БЗ_КатегорииБазыЗнаний", ДанныеСсылки.Параметры.id);
		ВыбранныйПользователь = БЗ_ОбщиеФункцииСервер.ПолучитьСсылкуПоИдентификатору("Пользователи", ДанныеСсылки.Параметры.idUser);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ТолькоПросмотр", Истина);
		ПараметрыФормы.Вставить("Категория", ВыбраннаяКатегория);
		ПараметрыФормы.Вставить("Пользователь", ВыбранныйПользователь);
		
		ОткрытьФорму("РегистрСведений.БЗ_СостояниеСтатейБазыЗнаний.ФормаСписка", ПараметрыФормы, ЭтаФорма,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

//+++ АйТи Гречкин А.В. 12.05.2022 ТЗ № ИС00-005239 >> e1cib/data/Документ.ЗаданиеНаРаботу?ref=a90efc3497141b3f11ec4203a57b1d84 
Функция ДобавитьВИзбранное(ВыбраннаяСтатья, СтрокаВозврата) Экспорт
		
	Избранное = ХранилищеСистемныхНастроек.Загрузить("Общее/ИзбранноеРаботыПользователя");
	
	Если Избранное = Неопределено тогда
		Избранное = Новый ИзбранноеРаботыПользователя;
	КонецЕсли;  
	
	УжеЕстьТакой = Ложь;
	НавСсылка = ПолучитьНавигационнуюСсылку(ВыбраннаяСтатья);
	//+++ АйТи Чириков В. А. 22.03.2023 ТЗ № ИС00-001047 >> e1cib/data/Документ.ЗаданиеНаРаботу?ref=a93bfc3497141b3f11eda38f7dd40ec4  
	//Добавил возможность удалить статью из избранного
	Для каждого Стр из Избранное Цикл
		Если Стр.НавигационнаяСсылка = НавСсылка тогда                 
			УжеЕстьТакой = Истина;                                              
			Избранное.Удалить(Избранное.Индекс(Стр));
			ХранилищеСистемныхНастроек.Сохранить("Общее/ИзбранноеРаботыПользователя",,Избранное);
			СтрокаВозврата = "Статья удалена из избранного";
			Прервать;
		КонецЕсли;    
	КонецЦикла;
	
	Если Не УжеЕстьТакой Тогда  
		
		НовыйЭлемент = Новый ЭлементИзбранногоРаботыПользователя;
		НовыйЭлемент.НавигационнаяСсылка = НавСсылка;
		НовыйЭлемент.Важное = Истина;
		
		Избранное.Добавить(НовыйЭлемент);
		ХранилищеСистемныхНастроек.Сохранить("Общее/ИзбранноеРаботыПользователя",,Избранное);	
		СтрокаВозврата = "Статья добавлена в избранное";
		
	КонецЕсли;
	//--- АйТи Чириков В. А. 22.03.2023 ТЗ № ИС00-001047 >> e1cib/data/Документ.ЗаданиеНаРаботу?ref=a93bfc3497141b3f11eda38f7dd40ec4
КонецФункции	
//---АйТи Гречкин А.В. 12.05.2022 ТЗ № ИС00-005239 >> e1cib/data/Документ.ЗаданиеНаРаботу?ref=a90efc3497141b3f11ec4203a57b1d84  

&НаСервере
Процедура ПослеУказанияПричиныАктуализации(Результат, ДопПараметры) Экспорт
	
	////+++ АйТи Чириков В.А. 13.07.2022 ТЗ № ИС00-004074 >> e1cib/data/Документ.ЗаданиеНаРаботу?ref=a91cfc3497141b3f11ecec9557ec9136
	////Добавил условие на отсутствие результата при закрытии окна "Опишите причину актуализации"  
	////Условие срабатывает в случае закрытия окна или нажатия кнопки Отмена
	//Если Результат <> Неопределено Тогда
	//	СтруктураЗаполненияЗадачи = Новый Структура();
	//	СтруктураЗаполненияЗадачи.Вставить("Дата", ТекущаяДата());
	//	СтруктураЗаполненияЗадачи.Вставить("ВидОперации", Перечисления.ВидыОперацийЗаданиеНаРаботу.Внутреннее);
	//	СтруктураЗаполненияЗадачи.Вставить("Организация", Справочники.Организации.НайтиПоКоду("00-000003"));
	//	СтруктураЗаполненияЗадачи.Вставить("Заказчик", АйТи_ОбщиеФункцииСерверПовтИсп.ПолучитьАйТиКонсалтинг());
	//	СтруктураЗаполненияЗадачи.Вставить("Сотрудник", АйТи_ОбщиеФункцииСерверПовтИсп.ПолучитьСотрудникаКоординатораЛК());
	//	//+++ АйТи Аботуров Е.В. 27.07.2022 ТЗ № ИС00-005147 >> e1cib/data/Документ.ЗаданиеНаРаботу?ref=a91ffc3497141b3f11ed08d5a68c2a96 
	//	СтруктураЗаполненияЗадачи.Вставить("АйТи_ТипЗадачи", ПредопределенноеЗначение("Справочник.АйТи_ТипыЗадач.КДругимСлужбам"));	
	//	//--- АйТи Аботуров Е.В. 27.07.2022 ТЗ № ИС00-005147 >> e1cib/data/Документ.ЗаданиеНаРаботу?ref=a91ffc3497141b3f11ed08d5a68c2a96
	//	СтруктураЗаполненияЗадачи.Вставить("АйТи_ДляСлужебногоИспользования", Истина);
	//	// Описание, Комментарий
	//	НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(ДопПараметры.Статья);
	//	Описание 	= "Создано из статьи: " + ДопПараметры.Статья.Наименование + "
	//	|Ссылка на статью: " + НавигационнаяСсылка + "
	//	|
	//	|Причина актуализации указанная пользователем:
	//	|" + Результат;
	//	
	//	СтруктураЗаполненияЗадачи.Вставить("Комментарий", Описание);
	//	
	//	НовыйДокумент = Документы.ЗаданиеНаРаботу.СоздатьДокумент();
	//	НовыйДокумент.Заполнить(СтруктураЗаполненияЗадачи);
	//	НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
	//КонецЕсли;
	////--- АйТи Чириков В.А. 13.07.2022 ТЗ № ИС00-004074 >> e1cib/data/Документ.ЗаданиеНаРаботу?ref=a91cfc3497141b3f11ecec9557ec9136
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьПризнакИзученостиСтатьи(ВыбраннаяСтатья)
	
	НаборЗаписей = РегистрыСведений.БЗ_СостояниеСтатейБазыЗнаний.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Пользователь.Установить(ПараметрыСеанса.ТекущийПользователь);
	НаборЗаписей.Отбор.СтатьяБазыЗнаний.Установить(ВыбраннаяСтатья);
	НаборЗаписей.Прочитать();
	
	Если ЗначениеЗаполнено(НаборЗаписей) Тогда
		Для каждого ЭлементНабораЗаписей Из НаборЗаписей Цикл
			Если НЕ ЗначениеЗаполнено(ЭлементНабораЗаписей.Изучена) Тогда
				ЭлементНабораЗаписей.Изучена = ТекущаяДата();
			КонецЕсли;
		КонецЦикла;
	Иначе
		ЭлементНабораЗаписей = НаборЗаписей.Добавить();
		ЭлементНабораЗаписей.Пользователь = ПараметрыСеанса.ТекущийПользователь;
		ЭлементНабораЗаписей.СтатьяБазыЗнаний = ВыбраннаяСтатья;
		ЭлементНабораЗаписей.Изучена = ТекущаяДата();
	КонецЕсли;
	
	Если НаборЗаписей.Модифицированность() Тогда
		НаборЗаписей.Записать();
	КонецЕсли;
	
КонецПроцедуры // УстановитьПризнакИзученостиСтатьи()

&НаСервереБезКонтекста
Процедура УстановитьПризнакСтатьяПомогла(ВыбраннаяСтатья)
	
	МенеджерЗаписи = РегистрыСведений.БЗ_СтатьяПомогла.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Период = ТекущаяДата();
	МенеджерЗаписи.Пользователь = ПараметрыСеанса.ТекущийПользователь;
	МенеджерЗаписи.СтатьяБазыЗнаний = ВыбраннаяСтатья;
	МенеджерЗаписи.Записать();
	УстановитьПризнакИзученостиСтатьи(ВыбраннаяСтатья);
	
КонецПроцедуры // УстановитьПризнакИзученостиСтатьи()

&НаКлиенте
Процедура СсылкуВБуферОбмена(Команда)
	
	Если ЗначениеЗаполнено(Объект.СтатьяБазыЗнаний) Тогда //Типовая, обычно при открытии формы с ключом
		лЭлементСсылка 	= Объект.СтатьяБазыЗнаний;
	ИначеЕсли ЗначениеЗаполнено(ТекущаяСсылка) Тогда //Типовая, при переходе по ссылкам внутри обработки БазыЗнаний
		лЭлементСсылка 	= ТекущаяСсылка;
	ИначеЕсли ЗначениеЗаполнено(СсылкаНаСтраницу) Тогда //Наш реквизит добавленый на форму в расширении. Для перехода при открытии из заданий
		лЭлементСсылка 	= СсылкаНаСтраницу; 
	Иначе
		АдресСтраницы	= СсылкаНаСтраницу;
		ДанныеСсылки	= РазобратьАдресСсылкиНаСервере(АдресСтраницы);
		
		Если ДанныеСсылки.Команда = "page" Тогда
			ПараметрыСсылки = ДанныеСсылки.Параметры;
			Если ПараметрыСсылки.name = "article" Тогда
				лИдентификатор	= ПараметрыСсылки.id;
				лЭлементСсылка	= ПолучитьСсылкуПоИдентификатору("БЗ_СтатьиБазыЗнаний", лИдентификатор);
			КонецЕсли; 
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(лЭлементСсылка) Тогда
		лЭлементНавСсылка 	= ПолучитьНавигационнуюСсылку(лЭлементСсылка);
		УстановитьТекстВБуферОбмена(лЭлементНавСсылка);
		
		//+++ АйТи Веретенников В.И. 12.04.2022 ТЗ № ИС00-002248 >> e1cib/data/Документ.ЗаданиеНаРаботу?ref=a917fc3497141b3f11ecb3f814bbcf39
	    ПоказатьОповещениеПользователя("Уведомление!",, "Ссылка скопирована в буфер обмена!");    
	    //--- АйТи Веретенников В.И. 12.04.2022 ТЗ № ИС00-002248 >> e1cib/data/Документ.ЗаданиеНаРаботу?ref=a917fc3497141b3f11ecb3f814bbcf39 	
	КонецЕсли; 
	
КонецПроцедуры  

&НаКлиенте
Функция УстановитьТекстВБуферОбмена(Текст) Экспорт
	#Если Клиент Тогда 
		htmlfileОбъект = Новый COMОбъект("htmlfile");
		htmlfileОбъект.ParentWindow.ClipboardData.Setdata("Text", Текст);
		Возврат Текст;
	#КонецЕсли 
КонецФункции

&НаКлиенте 
// Создает новый документ взаимодействий.
//
// Параметры:
//  ТипОбъекта        - Строка - тип создаваемого объекта.
//  ПараметрыСоздания - Структура - параметры создаваемого документа.
//  Форма             - ФормаКлиентскогоПриложения.
//
Процедура СоздатьНовоеВзаимодействие(ТипОбъекта, ПараметрыСоздания = Неопределено, Форма = Неопределено) Экспорт

	ОткрытьФорму("Документ." + ТипОбъекта + ".ФормаОбъекта", ПараметрыСоздания, Форма);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ ОПОВЕЩЕНИЙ

//&НаКлиенте
//Процедура ОбработатьОповещенияПользователя()
//	
//	ОтключитьОбработчикОжидания("ОбработатьОповещенияПользователя");
//	
//	ТекущийПользователь = БЗ_БазаЗнанийКлиентСерверПовтИсп.ТекущийПользователь();
//	
//	МассивОповещений = БЗ_БазаЗнанийВызовСервера.ПолучитьОповещенияПользователя(ТекущийПользователь, 1);
//	//Если МассивОповещений = Неопределено Тогда
//	//	Возврат;
//	//КонецЕсли;
//	Если МассивОповещений <> Неопределено Тогда
//	
//		Идентификаторы = Новый Массив;
//		Для Каждого Структура Из МассивОповещений Цикл
//			НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(Структура.Объект);
//			
//			//ПерейтиПоНавигационнойСсылке = Новый ОписаниеОповещения("БЗ_ПерейтиПоНавигационнойСсылке", ЭтотОбъект, Новый Структура("НавигационнаяСсылка", НавигационнаяСсылка));
//			
//			БЗ_Пояснение = "Перейти к ";
//			Если ТипЗнч(Структура.Объект) = Тип("СправочникСсылка.БЗ_КомментарииБазыЗнаний") Тогда
//				БЗ_Пояснение = БЗ_Пояснение + "комментарию";
//			ИначеЕсли ТипЗнч(Структура.Объект) = Тип("СправочникСсылка.БЗ_СтатьиБазыЗнаний") Тогда
//				БЗ_Пояснение = БЗ_Пояснение + "статье";
//			КонецЕсли;
//			
//			ПоказатьОповещениеПользователя(Структура.Описание, НавигационнаяСсылка, БЗ_Пояснение, БиблиотекаКартинок.Информация, СтатусОповещенияПользователя.Важное);
//			Идентификаторы.Добавить(Структура.Идентификатор);
//		КонецЦикла;
//		
//		БЗ_БазаЗнанийВызовСервера.УдалитьОповещенияПользователя(ТекущийПользователь, 1, Идентификаторы);
//	КонецЕсли;
//	
//	ПодключитьОбработчикОжидания("ОбработатьОповещенияПользователя", 5, Ложь);
//	
//КонецПроцедуры

&НаКлиенте
Процедура БЗ_ПерейтиПоНавигационнойСсылке(ДополнительныеПараметры) Экспорт
	ПерейтиПоНавигационнойСсылке(ДополнительныеПараметры.НавигационнаяСсылка);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ МЕТОДЫ

&НаКлиенте
Процедура ОткрытьВнешнююСсылкуВыполнить(Результат, ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗапуститьПриложение(ДопПараметры.Адрес);
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("СтрокаHTML", ДопПараметры.Адрес);
		ПараметрыФормы.Вставить("Заголовок"	, ДопПараметры.Адрес);
		
		ОткрытьФорму("Справочник.БЗ_СтатьиБазыЗнаний.Форма.ПросмотрHTML", ПараметрыФормы, ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеИзмененияДанныхКатегории(Результат, ДопПараметры) Экспорт
	
	ТекущаяСсылка = ПолучитьТекущуюСсылку(Объект.История, ТекущаяСтраница);
	
	Если ДопПараметры.Свойство("ЭтоНовый") И ДопПараметры.ЭтоНовый Тогда
		ОбновитьСтраницу(Неопределено);
	ИначеЕсли ДопПараметры.Свойство("Категория") И ДопПараметры.Категория = ТекущаяСсылка Тогда
		ОбновитьСтраницу(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеИзмененияДанныхСтатьи(Результат, ДопПараметры) Экспорт
	
	ТекущаяСсылка = ПолучитьТекущуюСсылку(Объект.История, ТекущаяСтраница);
	
	Если ДопПараметры.Свойство("ЭтоНовый") И ДопПараметры.ЭтоНовый Тогда
		ОбновитьСтраницу(Неопределено);
	ИначеЕсли ДопПараметры.Свойство("Статья") И ДопПараметры.Статья = ТекущаяСсылка Тогда
		ОбновитьСтраницу(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеИзмененияДанныхКомментария(Результат, ДопПараметры) Экспорт
	
	ТекущаяСсылка = ПолучитьТекущуюСсылку(Объект.История, ТекущаяСтраница);
	
	КомментарийСсылка	= ?(ДопПараметры.Свойство("Ссылка"), ДопПараметры.Ссылка, Неопределено);
	СтатьяСсылка		= ?(ДопПараметры.Свойство("Статья"), ДопПараметры.Статья, Неопределено);
	
	Если ЗначениеЗаполнено(КомментарийСсылка) Тогда
		Объект.Область = "comment_" + Строка(КомментарийСсылка.УникальныйИдентификатор());
	Иначе 
		Объект.Область = "comments";
	КонецЕсли;
	
	Если СтатьяСсылка = ТекущаяСсылка Тогда
		ПараметрыСсылки = Новый Структура("name, article",
			"comments",
			Строка(СтатьяСсылка.УникальныйИдентификатор()));
		ДанныеСсылки	= Новый Структура("Команда, Параметры", "refresh", ПараметрыСсылки);
		ОбработатьАдресСсылки_refresh(ДанныеСсылки);
	Иначе 
		ОбновитьСтраницу(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеИзмененияДанныхПодписки(Результат, ДопПараметры) Экспорт
	
	// ничего делать не будем пока
	
КонецПроцедуры

&НаСервере
Процедура ПриЗакрытииНаСервере()
	БЗ_БазаЗнаний.ЗавершитьСессииПользователя(КлючСессии);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УдалитьКомментарийНаСервере(КомментарийСсылка)
	Справочники.БЗ_КомментарииБазыЗнаний.УдалитьКомментарий(КомментарийСсылка);
КонецПроцедуры

&НаСервереБезКонтекста
Функция РазобратьАдресСсылкиНаСервере(АдресСсылки)
	
	Возврат БЗ_БазаЗнанийAPIКлиентСервер.РазобратьАдресСсылки(АдресСсылки);
	
КонецФункции

&НаСервереБезКонтекста
Функция КонструкторСсылки_page(ИмяСтраницы, Параметры)
	
	Возврат БЗ_БазаЗнанийAPIКлиентСервер.КонструкторСсылки_page(ИмяСтраницы, Параметры);
	
КонецФункции

// Основное окно портала

&НаКлиенте
Функция ВыбратьМестоСохранения(Каталог)
	
	Если Каталог Тогда
		Режим = РежимДиалогаВыбораФайла.ВыборКаталога;
	Иначе 
		Режим = РежимДиалогаВыбораФайла.Сохранение;
	КонецЕсли;
	
	ДиалогВыбора = Новый ДиалогВыбораФайла(Режим);
	Если ДиалогВыбора.Выбрать() Тогда
		Возврат ДиалогВыбора.Каталог;
	Иначе 
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьТекущуюСсылку(ТаблицаИстория, ТекущаяСтрока)
	
	Если ТекущаяСтрока <= 0 ИЛИ ТекущаяСтрока > ТаблицаИстория.Количество() Тогда
		ТекущаяСтрока = ТаблицаИстория.Количество();
	КонецЕсли;
	
	Если ТекущаяСтрока = 0 Тогда
		Возврат "";
	Иначе 
		Возврат ТаблицаИстория[ТекущаяСтрока - 1].СсылкаСтраницы;
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьТекущийАдресСсылки(ТаблицаИстория, ТекущаяСтрока)
	
	Если ТекущаяСтрока <= 0 ИЛИ ТекущаяСтрока > ТаблицаИстория.Количество() Тогда
		ТекущаяСтрока = ТаблицаИстория.Количество();
	КонецЕсли;
	
	Если ТекущаяСтрока = 0 Тогда
		Возврат "";
	Иначе 
		Возврат ТаблицаИстория[ТекущаяСтрока - 1].АдресСсылки;
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УдалитьПоследующиеСтрокиИстории(ТекСтраница, История)
	
	МассивСтрок = Новый Массив;
	Для Каждого СтрокаИстории Из История Цикл
		Если СтрокаИстории.НомерСтроки > ТекСтраница Тогда
			МассивСтрок.Добавить(СтрокаИстории);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаТаблицы Из МассивСтрок Цикл
		История.Удалить(СтрокаТаблицы);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ДобавитьКлючевыеСловаПоСтрокеПоиска(КлючевыеСлова, ЗначениеСтроки)
	ОператорыПП = Новый Массив;
	ОператорыПП.Добавить("И");
	ОператорыПП.Добавить("AND");
	ОператорыПП.Добавить("#");
	ОператорыПП.Добавить("ИЛИ");
	ОператорыПП.Добавить("OR");
	ОператорыПП.Добавить("|");
	ОператорыПП.Добавить("НЕ");
	ОператорыПП.Добавить("NOT");
	ОператорыПП.Добавить("~");
	
	МассивСлов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ЗначениеСтроки, " ");
	Для Каждого Слово Из МассивСлов Цикл
		Если ОператорыПП.Найти(Слово) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Слово = СокрЛП(Слово);
		
		Если Лев(Слово, 5) = "РЯДОМ" ИЛИ Лев(Слово, 4) = "NEAR" Тогда
			Продолжить;
		ИначеЕсли Лев(Слово, 1) = "/" И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Сред(Слово, 2, 1)) Тогда
			Продолжить;
		ИначеЕсли Слово = "(" ИЛИ Слово = ")" Тогда
			Продолжить;
		ИначеЕсли Лев(Слово, 1) = "#" Тогда
			Слово = Сред(Слово, 2);
		ИначеЕсли Найти(Слово, "#") Тогда
			Позиция = Найти(Слово, "#");
			Слово	= Лев(Слово, Позиция - 1);
		ИначеЕсли Лев(Слово, 1) = "!" Тогда
			Слово = Сред(Слово, 2);
		ИначеЕсли Прав(Слово, 1) = "*" Тогда
			Слово = Лев(Слово, СтрДлина(Слово) - 1);
		КонецЕсли;
		
		КлючевыеСлова.Добавить(Слово);
	КонецЦикла;
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСсылкуПоИдентификатору(ВидСправочника, Идентификатор)
	
	Если НЕ ЗначениеЗаполнено(Идентификатор) Тогда
		Возврат Справочники[ВидСправочника].ПустаяСсылка();
	КонецЕсли;
	
	УникальныйИдентификатор = Новый УникальныйИдентификатор(Идентификатор);
	Возврат Справочники[ВидСправочника].ПолучитьСсылку(УникальныйИдентификатор);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьКонтактыПоEMailНаСервере(ПочтовыйАдрес, Представление = "")
	
	Массив = Новый Массив;
	МассивАдресов = Новый Массив;
	МассивАдресов.Добавить(ПочтовыйАдрес);
	ТаблицаКонтактов	= БЗ_Взаимодействия.ПолучитьВсеКонтактыПоСпискуEmail(МассивАдресов);
	Для Каждого СтрокаТаблицы Из ТаблицаКонтактов Цикл
		Массив.Добавить(
			Новый Структура("Адрес, Представление, Контакт",
				ПочтовыйАдрес, СтрокаТаблицы.Наименование, СтрокаТаблицы.Контакт));
	КонецЦикла;
	
	Если Массив.Количество() = 0 Тогда
		Массив.Добавить(
			Новый Структура("Адрес, Представление, Контакт",
				ПочтовыйАдрес, ?(ПустаяСтрока(Представление), ПочтовыйАдрес, Представление), Неопределено));
	КонецЕсли;
	
	Возврат Массив;
	
КонецФункции

&НаСервереБезКонтекста
Функция ДобавитьИнформациюОПросмотреНаСервере(ЭлементСсылка, ТекущийПользователь = Неопределено)
	
	ТипСсылки = ТипЗнч(ЭлементСсылка);
	Если ТипСсылки = Тип("СправочникСсылка.БЗ_СтатьиБазыЗнаний") Тогда
		БЗ_БазаЗнаний.ДобавитьПросмотрСтатьи(ЭлементСсылка);
	ИначеЕсли ТипСсылки = Тип("СправочникСсылка.БЗ_НовостиБазыЗнаний") Тогда
		БЗ_БазаЗнаний.ДобавитьПросмотрНовости(ЭлементСсылка, ТекущийПользователь);
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ПерейтиНаСтраницу(знач ДанныеСсылки, знач ПараметрыВывода = Неопределено)
	
	Если ТипЗнч(ДанныеСсылки) = Тип("Строка") Тогда
		ДанныеСсылки = РазобратьАдресСсылкиНаСервере(АдресСтраницы);
	КонецЕсли;
	
	ПараметрыСсылки = ДанныеСсылки.Параметры;
	Если НЕ ПараметрыСсылки.Свойство("name") Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ТипЗнч(ПараметрыВывода) = Тип("Структура") Тогда
		ПараметрыВывода = Новый Структура;
	КонецЕсли;
	
	Обновление				= ?(ПараметрыВывода.Свойство("Обновление"), ПараметрыВывода.Обновление, Ложь);
	ВыделятьКлючевыеСлова	= ?(ПараметрыВывода.Свойство("ВыделятьКлючевыеСлова"), ПараметрыВывода.ВыделятьКлючевыеСлова, Ложь);
	
	ТекущийАдрес = ПолучитьТекущийАдресСсылки(Объект.История, ТекущаяСтраница);
	Если ТекущийАдрес = АдресСтраницы И НЕ Обновление Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыСсылки.name = "article" Тогда
		Идентификатор	= ПараметрыСсылки.id;
		ЭлементСсылка	= ПолучитьСсылкуПоИдентификатору("БЗ_СтатьиБазыЗнаний", Идентификатор);
		ТекущаяСсылка	= ПолучитьТекущуюСсылку(Объект.История, ТекущаяСтраница);
		
		РазделИд = ?(ПараметрыСсылки.Свойство("section"), ПараметрыСсылки.section, "");
		Если ЭлементСсылка = ТекущаяСсылка И ЗначениеЗаполнено(РазделИд) Тогда
			ПерейтиНаОбластьСтраницы(РазделИд);
			
			Объект.СтатьяБазыЗнаний = Неопределено;
			Объект.Область			= "";
			
			Возврат;
		КонецЕсли;
		
		Объект.СтатьяБазыЗнаний = ЭлементСсылка;
		Объект.Область			= РазделИд;
		
		ПараметрыВывода.Вставить("ВыделятьКлючевыеСлова", ВыделятьКлючевыеСлова);

		ДобавитьИнформациюОПросмотреНаСервере(ЭлементСсылка);
	ИначеЕсли ПараметрыСсылки.name = "category" Тогда
		Идентификатор	= ПараметрыСсылки.id;
		ЭлементСсылка	= ПолучитьСсылкуПоИдентификатору("БЗ_КатегорииБазыЗнаний", Идентификатор);
	ИначеЕсли ПараметрыСсылки.name = "tag" Тогда
		Идентификатор	= ПараметрыСсылки.id;
		ЭлементСсылка	= ПолучитьСсылкуПоИдентификатору("БЗ_КлючевыеСловаБазыЗнаний", Идентификатор);
	ИначеЕсли ПараметрыСсылки.name = "news_item" Тогда
		Идентификатор	= ПараметрыСсылки.id;
		ЭлементСсылка	= ПолучитьСсылкуПоИдентификатору("БЗ_НовостиБазыЗнаний", Идентификатор);

		ДобавитьИнформациюОПросмотреНаСервере(ЭлементСсылка, ТекущийПользователь);
	Иначе 
		ЭлементСсылка	= Неопределено;
	КонецЕсли;
	
	Если ТекущаяСтраница > 0 Тогда
		УдалитьПоследующиеСтрокиИстории(ТекущаяСтраница, Объект.История);
	КонецЕсли;
	
	ЭтотОбъект.ДокументHTML = БЗ_БазаЗнанийHTMLКлиент.ПолучитьТекстСтраницы(ДанныеСсылки);
	
	Если ТекущийАдрес <> АдресСтраницы Тогда
		НоваяСтрока = Объект.История.Добавить();
		НоваяСтрока.ТекстСтраницы	= ЭтотОбъект.ДокументHTML;
		НоваяСтрока.АдресСсылки		= АдресСтраницы;
		НоваяСтрока.СсылкаСтраницы	= ЭлементСсылка;
	КонецЕсли;
	
	ЭтотОбъект.ТекущаяСтраница	= Объект.История.Количество();
	
	лСсылкаНаСтраницу = Объект.СтатьяБазыЗнаний; //На всякий, чтобы не потерялось в типовом коде (но не должно)
	
	//Видимость кнопки "Пометки на удаление"
	//Если ЗначениеЗаполнено(ТекущаяСсылка) Тогда //Иногда вместо статьи является категорией
	//	Элементы.УстановитьСнятьПометкуУдаления.Видимость 	= ТипЗнч(ТекущаяСсылка) = Тип("СправочникСсылка.СтатьиБазыЗнаний"); 
	Если ЗначениеЗаполнено(АдресСтраницы) Тогда
		лЭтоСтраницаСтатьи = СтрНайти(АдресСтраницы, "name=article") > 0;
		Элементы.УстановитьСнятьПометкуУдаления.Видимость	= лЭтоСтраницаСтатьи;
		Элементы.ПрикрепленныеФайлы.Видимость 				= лЭтоСтраницаСтатьи;
		Элементы.ПечатьОтчётаИзучения.Видимость             = лЭтоСтраницаСтатьи; 
		//+++ АйТи Шарикова ТЗ№ ИС00-001414 e1cib/data/Документ.ЗаданиеНаРаботу?ref=a915fc3497141b3f11ec993f63c1c4a3
		Элементы.СкачатьФайлы.Видимость						= лЭтоСтраницаСтатьи;
		//--- АйТи Шарикова ТЗ№ ИС00-001414 e1cib/data/Документ.ЗаданиеНаРаботу?ref=a915fc3497141b3f11ec993f63c1c4a3
		лФайлКол 	= 0;
		Если лЭтоСтраницаСтатьи Тогда
			лФайлКол 	= ПолучитьКоличествоФайлов(лСсылкаНаСтраницу);
		КонецЕсли;
		
		Элементы.ПрикрепленныеФайлы.ЦветФона 	= ?(лФайлКол > 0, WebЦвета.БледноЗеленый, Новый Цвет());
		
		Если лЭтоСтраницаСтатьи Тогда
			УдалитьОповещенияПользователя(лСсылкаНаСтраницу);
		КонецЕсли;
	КонецЕсли;
	//+++ АйТи Горячёв В.С. 16.04.2021
	Если ТипЗнч(ДанныеСсылки) = Тип("Строка") Тогда
		ДанныеСсылки = РазобратьАдресСсылкиНаСервере(АдресСтраницы);
	КонецЕсли;
	//--- АйТи Горячёв В.С. 16.04.2021
	ОбработатьСтатьюИзЗадания(, ДанныеСсылки);
	
КонецПроцедуры   

//+++ АйТи КучеровРМ 29.08.2019
&НаСервереБезКонтекста
Функция ПолучитьКоличествоФайлов(пВладелец)
	
	лРезультат 	= 0;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	КОЛИЧЕСТВО(БЗ_СтатьиБазыЗнанийПрисоединенныеФайлы.Ссылка) КАК ФайлКол
	|ИЗ
	|	Справочник.БЗ_СтатьиБазыЗнанийПрисоединенныеФайлы КАК БЗ_СтатьиБазыЗнанийПрисоединенныеФайлы
	|ГДЕ
	|	БЗ_СтатьиБазыЗнанийПрисоединенныеФайлы.ВладелецФайла = &ВладелецФайла";
	
	Запрос.УстановитьПараметр("ВладелецФайла"	, пВладелец);
	
	РезультатЗапроса 	= Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		лВыборка 	= РезультатЗапроса.Выбрать();
		Если лВыборка.Следующий() Тогда
			лРезультат 	= лВыборка.ФайлКол;
		КонецЕсли;
	КонецЕсли;
	
	Возврат лРезультат;
	
КонецФункции // ПолучитьКоличествоФайлов() //--- АйТи КучеровРМ 29.08.2019

&НаСервереБезКонтекста
Процедура УдалитьОповещенияПользователя(СсылкаСтатья) Экспорт
	
	НаборЗаписей = РегистрыСведений.БЗ_ОповещенияБазыЗнаний.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Пользователь.Установить(ПараметрыСеанса.ТекущийПользователь);
	НаборЗаписей.Отбор.ВидОповещения.Установить(1);
	НаборЗаписей.Прочитать();
	
	ЕстьИзменения = Ложь;
	Для Каждого ЗаписьРегистра Из НаборЗаписей Цикл
		Если ЗаписьРегистра.Объект.Владелец = СсылкаСтатья Тогда
			НаборЗаписей.Удалить(ЗаписьРегистра);
			ЕстьИзменения = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьИзменения Тогда
		НаборЗаписей.Записать(Истина);
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Функция ОбработатьСтатьюИзЗадания(пЕстьСтатьяОткрытаИзЗадания = Ложь, ДанныеСсылки = Неопределено)
	//+++ АйТи Горячёв В.С. 15.04.21
	Если ДанныеСсылки <> Неопределено И ДанныеСсылки.Свойство("Параметры") И ДанныеСсылки.Параметры.Свойство("name") И ДанныеСсылки.Параметры.name = "article" Тогда
		НаборЗаписей = РегистрыСведений.БЗ_СостояниеСтатейБазыЗнаний.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Пользователь.Установить(ПараметрыСеанса.ТекущийПользователь);
		НаборЗаписей.Отбор.СтатьяБазыЗнаний.Установить(Объект.СтатьяБазыЗнаний);
		НаборЗаписей.Прочитать();
		
		Если ЗначениеЗаполнено(НаборЗаписей) Тогда
			Для каждого ЭлементНабораЗаписей Из НаборЗаписей Цикл
				Если НЕ ЗначениеЗаполнено(ЭлементНабораЗаписей.БылаОткрыта) Тогда
					ЭлементНабораЗаписей.БылаОткрыта = ТекущаяДата();
				КонецЕсли;
			КонецЦикла;
		Иначе
			ЭлементНабораЗаписей = НаборЗаписей.Добавить();
			ЭлементНабораЗаписей.Пользователь = ПараметрыСеанса.ТекущийПользователь;
			ЭлементНабораЗаписей.СтатьяБазыЗнаний = Объект.СтатьяБазыЗнаний;
			ЭлементНабораЗаписей.БылаОткрыта = ТекущаяДата();
		КонецЕсли;
		
		Если НаборЗаписей.Модифицированность() Тогда
			НаборЗаписей.Записать();
		КонецЕсли;
	КонецЕсли;
    //--- АйТи Горячёв В.С. 15.04.21
	лРезультат = Ложь;
	
	Если пЕстьСтатьяОткрытаИзЗадания ИЛИ Элементы.ГруппаИсточникОткрытия.Видимость Тогда //"ИЛИ Элементы.ГруппаСтатьиЗадания.Видимость" т.к. мы могли открыть форму и пойти гулять по ссылками
		
		Если ЗначениеЗаполнено(ИсточникОткрытия) Тогда
			НаборЗаписей 	= РегистрыСведений.БЗ_СтатьиБазыЗнанийПоЗадаче.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Объект.Установить(ИсточникОткрытия); 
			НаборЗаписей.Отбор.СтатьяБазыЗнаний.Установить(Объект.СтатьяБазыЗнаний); 
			
			НаборЗаписей.Прочитать();
			
			лЕстьСтатья 	= НЕ НаборЗаписей.Количество() = 0;
			СтатьяПомогла 	= лЕстьСтатья;
			
			лРезультат = Истина;	
		КонецЕсли; 
		
	КонецЕсли;
	
	Элементы.ГруппаИсточникОткрытия.Видимость 	= пЕстьСтатьяОткрытаИзЗадания ИЛИ Элементы.ГруппаИсточникОткрытия.Видимость;
	
	Возврат лРезультат;
	
КонецФункции // ОбработатьСтатьюИзЗадания()

&НаКлиенте
Процедура ПерейтиНаОбластьСтраницы(ОбластьПерехода);
	//+++ Иванов Метод не работает.
	//Элементы.ДокументHTML.Документ.parentWindow.eval("scroller.goto('#" + ОбластьПерехода + "');");
	Элементы.ДокументHTML.Документ.getElementById(ОбластьПерехода).scrollIntoView(Истина);
КонецПроцедуры

// Полнотекстовый поиск

&НаКлиенте
Процедура ВыполнитьПоиск(Направление)
	
	Если ПустаяСтрока(СтрокаПоиска) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Введите значение, которое необходимо найти.'"), , "СтрокаПоиска");
		Возврат;
	КонецЕсли;
	
	ТекстСостояния = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Выполняется поиск ""%1""...'"),
		СтрокаПоиска);
	Состояние(ТекстСостояния, , , БиблиотекаКартинок.Лупа);
	
	Результат = ВыполнитьПолнотекстовыйПоискНаСервере(Направление, ТекущаяПозицияПоиска, СтрокаПоиска);
	
	РезультатыПоиска		= Результат.РезультатПоиска;
	HTMLТекст				= Результат.HTMLТекст;
	ТекущаяПозицияПоиска	= Результат.ТекущаяПозиция;
	ПолноеКоличество		= Результат.ПолноеКоличество;
	КлючевыеСлова.ЗагрузитьЗначения(Результат.КлючевыеСлова);
	
	Если РезультатыПоиска.Количество() > 0 Тогда
		
		ПоказаныРезультатыСПо = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Показаны %1 - %2 из %3'"),
			Формат(ТекущаяПозицияПоиска + 1, "ЧН=0; ЧГ="),
			Формат(ТекущаяПозицияПоиска + РезультатыПоиска.Количество(), "ЧН=0; ЧГ="),
			Формат(ПолноеКоличество, "ЧН=0; ЧГ="));
		
		Элементы.СледующаяСтраницаПоиска.Доступность	= (ПолноеКоличество - ТекущаяПозицияПоиска) > РезультатыПоиска.Количество();
		Элементы.ПредыдущаяСтраницаПоиска.Доступность	= (ТекущаяПозицияПоиска > 0);
		
		Если Направление = 0 И Результат.ТекущаяПозиция = 0 И Результат.СлишкомМногоРезультатов Тогда
			Предупреждение(НСтр("ru = 'Слишком много результатов, уточните запрос.'"));
		КонецЕсли;
		
	Иначе
		
		ПоказаныРезультатыСПо = НСтр("ru = 'Не найдено'");
		
		Элементы.СледующаяСтраницаПоиска.Доступность	= Ложь;
		Элементы.ПредыдущаяСтраницаПоиска.Доступность	= Ложь;
		
		ТекстПоиска = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Комбинация слов ""%1"" нигде не встречается.<br><br>
			|<b>Рекомендации:</b>
			|<li>Убедитесь, что все слова написаны без ошибок.
			|<li>Попробуйте использовать другие ключевые слова.
			|<li>Попробуйте уменьшить количество искомых слов.'"),
			СокрЛП(СтрокаПоиска));
		
		HTMLТекст = 
		"<html>
		|<head>
		|</head>
		|<body>
		|" + ТекстПоиска + "
		|</body>
		|</html>";
		
	КонецЕсли;
	
	РезультатПоискаHTML = БЗ_БазаЗнанийКлиент.ОбработатьРезультатПолнотекстовогоПоиска(HTMLТекст, РезультатыПоиска);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВыполнитьПолнотекстовыйПоискНаСервере(Направление, ТекущаяПозиция, СтрокаПоиска)
	
	ОбластьПоиска = Новый Массив;
	ОбластьПоиска.Добавить(Метаданные.Справочники.БЗ_СтатьиБазыЗнаний);
	
//{{MRG[ <-> ]
	СписокПоиска = ПолнотекстовыйПоиск.СоздатьСписок(СтрокаПоиска + "*", 1000);
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//	СписокПоиска = ПолнотекстовыйПоиск.СоздатьСписок(СтрокаПоиска + "*", 10);
//}}MRG[ <-> ]
	СписокПоиска.ОбластьПоиска = ОбластьПоиска;
	
	Если Направление = 0 Тогда
		СписокПоиска.ПерваяЧасть();
	ИначеЕсли Направление = -1 Тогда
		СписокПоиска.ПредыдущаяЧасть(ТекущаяПозиция);
	ИначеЕсли Направление = 1 Тогда
		СписокПоиска.СледующаяЧасть(ТекущаяПозиция);
	КонецЕсли;
//{{MRG[ <-> ]
//	
//	// Массив значений
//	МассивЭлементов = Новый Массив;
//	Для Каждого ЭлементСписка Из СписокПоиска Цикл
//		Если ЭлементСписка.Значение.ПометкаУдаления Тогда
//			Продолжить;
//		КонецЕсли;     
//		
//		МассивЭлементов.Добавить(ЭлементСписка.Значение);
//	КонецЦикла;
//}}MRG[ <-> ]
	
	// Ключевые слова
	КлючевыеСлова = Новый Массив;
	ДобавитьКлючевыеСловаПоСтрокеПоиска(КлючевыеСлова, СтрокаПоиска);
	
	ЧтениеXML	= СписокПоиска.ПолучитьОтображение(ВидОтображенияПолнотекстовогоПоиска.XML);
	Результат	= ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	ВсеСвойства	= Результат.Свойства();
	Если НЕ ВсеСвойства.Получить("item") = Неопределено Тогда
		Если ТипЗнч(Результат.item) = Тип("СписокXDTO") Тогда
			ОбработатьСписокXDTOПоиска(КлючевыеСлова, Результат.item);
		ИначеЕсли ТипЗнч(Результат.item) = Тип("ОбъектXDTO") Тогда
			ОбработатьОбъектXDTOПоиска(КлючевыеСлова, Результат.item);
		КонецЕсли;
	КонецЕсли;
	
	// Прочие данные поиска
	HTMLТекст 				= СписокПоиска.ПолучитьОтображение(ВидОтображенияПолнотекстовогоПоиска.HTMLТекст);
	//ПолноеКоличество		= СписокПоиска.ПолноеКоличество();
	ТекущаяПозиция			= СписокПоиска.НачальнаяПозиция();
//{{MRG[ <-> ]
//	ПолноеКоличество		= СписокПоиска.ПолноеКоличество();
//}}MRG[ <-> ]
	СлишкомМногоРезультатов	= СписокПоиска.СлишкомМногоРезультатов();
	
	// Массив значений
	Счетчик = 0;
	МассивЭлементов = Новый Массив;
	Для Каждого ЭлементСписка Из СписокПоиска Цикл
		Если ЭлементСписка.Значение.ПометкаУдаления Тогда
			ПодстрокаПоиска	= "href=""#"" sel_num=""" + Формат(Счетчик, "ЧДЦ=; ЧН=0; ЧГ=") + """";
			
			НачальнаяПозицияПоиска = СтрНайти(HTMLТекст, ПодстрокаПоиска);
			
			НачалоБлока = СтрНайти(HTMLТекст, "<div class=""presentation"">", НаправлениеПоиска.СКонца, НачальнаяПозицияПоиска);
			
			КонецБлока = СтрНайти(HTMLТекст, "<div class=""textPortion"">", НаправлениеПоиска.СНачала, НачальнаяПозицияПоиска);
			КонецБлока = СтрНайти(HTMLТекст, "</div>", НаправлениеПоиска.СНачала, КонецБлока) + 5;
			
			ТекстБлокаЭлемента = Сред(HTMLТекст, НачалоБлока, КонецБлока - НачалоБлока);
			
			HTMLТекст = СтрЗаменить(HTMLТекст, ТекстБлокаЭлемента, "");
		КонецЕсли;
		
		МассивЭлементов.Добавить(ЭлементСписка.Значение);
		Счетчик = Счетчик + 1;
	КонецЦикла;
	ПолноеКоличество		= МассивЭлементов.Количество();
	
	//МассивЭлементов = Новый Массив;
	//Для Каждого ЭлементСписка Из СписокПоиска Цикл
	//	Если ЭлементСписка.Значение.ПометкаУдаления Тогда
	//		Продолжить;
	//	КонецЕсли;     
	//	
	//	МассивЭлементов.Добавить(ЭлементСписка.Значение);
	//КонецЦикла;
	
	Результат = Новый Структура;
	Результат.Вставить("РезультатПоиска"		, МассивЭлементов);
	Результат.Вставить("КлючевыеСлова"			, КлючевыеСлова);
	Результат.Вставить("ТекущаяПозиция"			, ТекущаяПозиция);
	Результат.Вставить("ПолноеКоличество"		, ПолноеКоличество);
	Результат.Вставить("HTMLТекст"				, HTMLТекст);
	Результат.Вставить("СлишкомМногоРезультатов", СлишкомМногоРезультатов);
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ОбработатьОбъектXDTOСловоПоиска(СписокСлов, ОбъектXDTO)
	Если ТипЗнч(ОбъектXDTO) <> Тип("ОбъектXDTO") Тогда
		Возврат;
	КонецЕсли;
	
	СвойстваОбъекта	= ОбъектXDTO.Свойства();
	СвойствоСлово	= СвойстваОбъекта.Получить("foundWord");
	Если СвойствоСлово = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СловоПоиска = ОбъектXDTO.foundWord;
	Если ТипЗнч(СловоПоиска) = Тип("СписокXDTO") Тогда
		Для Каждого ЭлементСписка Из СловоПоиска Цикл
			Если ТипЗнч(ЭлементСписка) = Тип("Строка") Тогда
				Если СписокСлов.Найти(ЭлементСписка) = Неопределено Тогда
					СписокСлов.Добавить(ЭлементСписка);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ТипЗнч(СловоПоиска) = Тип("Строка") Тогда
		Если СписокСлов.Найти(СловоПоиска) = Неопределено Тогда
			СписокСлов.Добавить(СловоПоиска);
		КонецЕсли;
	КонецЕсли;		
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбработатьСписокXDTOПоиска(СписокСлов, СписокXDTO)
	Для Каждого ОбъектXDTO Из СписокXDTO Цикл
		ОбработатьОбъектXDTOПоиска(СписокСлов, ОбъектXDTO);
	КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбработатьОбъектXDTOПоиска(СписокСлов, ОбъектXDTO)
	СвойстваОбъекта = ОбъектXDTO.Свойства();
	
	СвойствоТекст = СвойстваОбъекта.Получить("textPortion");
	Если СвойствоТекст = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗначениеСвойства = ОбъектXDTO.textPortion;
	Если ТипЗнч(ЗначениеСвойства) = Тип("СписокXDTO") Тогда
		Для Каждого ОбъектСписка Из ЗначениеСвойства Цикл
			ОбработатьОбъектXDTOСловоПоиска(СписокСлов, ОбъектСписка);
		КонецЦикла;
	ИначеЕсли ТипЗнч(ЗначениеСвойства) = Тип("ОбъектXDTO") Тогда
		ОбработатьОбъектXDTOСловоПоиска(СписокСлов, ЗначениеСвойства);
	КонецЕсли;		
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Если НЕ ЗавершениеРаботы Тогда
		ПриЗакрытииНаСервере();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиПоСсылке(Команда)
	
	АдресСсылки = ПолучитьТекстБуфераОбмена();
	Если НЕ СтрНачинаетсяС(АдресСсылки, "kb://api/page") Тогда
		АдресСсылки = "";
	КонецЕсли; 
	Подсказка = "Вставьте адрес ссылки базы знаний (начинается с kb://api/page)";
	Если ВвестиСтроку(АдресСсылки, Подсказка) Тогда
		ПерейтиПоУказаннойСылке(АдресСсылки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиПоУказаннойСылке(Ссылка)
	
	ПараметрСсылки 		= Ссылка;
	СсылкаНаСтраницу 	= ПараметрСсылки;
	
	//ПерейтиНаСтраницу(СсылкаНаСтраницу);
	Если Лев(ПараметрСсылки, 7) = "mailto:" Тогда
		НавигационнаяСсылка_mailto(ПараметрСсылки);
	ИначеЕсли Лев(ПараметрСсылки, 9) = "kb://api/" Тогда
		НавигационнаяСсылка_kbapi(ПараметрСсылки);
	ИначеЕсли Лев(ПараметрСсылки, 5) = "file:" Тогда
		НавигационнаяСсылка_file(ПараметрСсылки);
	ИначеЕсли Лев(ПараметрСсылки, 4) = "http" Тогда
		ОткрытьВнешнююСсылку(ПараметрСсылки);
	ИначеЕсли Лев(ПараметрСсылки, 6) = "e1c://" Тогда
		//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Ссылки внутри документа не обрабатываются. Приносим извинения за причиненные неудобства.");
	Иначе
		Сообщить(ПараметрСсылки);
	КонецЕсли;
	
	УстановитьДоступность();
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьТекстБуфераОбмена() Экспорт
	#Если Клиент Тогда
		htmlfileОбъект = Новый COMОбъект("htmlfile");
		Возврат htmlfileОбъект.ParentWindow.ClipboardData.Getdata("Text");
	#КонецЕсли
КонецФункции

//+++ АйТи Власенко А.П. 15.09.2021 ТЗ № ИС00-003848 >> e1cib/data/Документ.ЗаданиеНаРаботу?ref=81c732336337376211ec0bc57cf6df32
#Если НЕ МобильноеПриложениеСервер Тогда
&НаКлиенте
Процедура ВывестиСписокСтатей(Команда)
	Категория = Элементы.КатегорииБазыЗнаний.ТекущаяСтрока;
	
	ПоляДляВывода = Новый СписокЗначений;
	
	ПоляДляВывода.Добавить("Дата создания");
	ПоляДляВывода.Добавить("Описание");
	ПоляДляВывода.Добавить("Ответственный");
	
	ОповещениеПослеВыбора = Новый ОписаниеОповещения("ВыводСписка", ЭтаФорма, Категория);
	
	ПоляДляВывода.ПоказатьОтметкуЭлементов(ОповещениеПослеВыбора, "Дополнительные поля: ");
КонецПроцедуры  

&НаКлиенте
Процедура ВыводСписка(Элементы, Параметры) Экспорт
	
	ТабДокумент = АйТи_ВывестиСписокСтатейПослеНаСервере(Элементы, Параметры);
	
	Если Элементы = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	ТабДокумент.Показать();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция АйТи_ВывестиСписокСтатейПослеНаСервере(ВыбранныеЗначения, Категория)
	
	ТабДокумент = Новый ТабличныйДокумент;
	Построитель = Новый ПостроительОтчета;
	
	Макет = Обработки.БЗ_БазаЗнаний.ПолучитьМакет("МакетДляСпискаСтатей");
	
	Построитель.Макет = Макет;
	
	Построитель.МакетЗаголовкаОтчета = Макет.ПолучитьОбласть("Заголовок");
	Построитель.МакетЗаголовкаОтчета.Параметры.Категория = Категория;
	Построитель.МакетШапкиТаблицы = Макет.ПолучитьОбласть("Шапка");
	Построитель.МакетДетальныхЗаписей = Макет.ПолучитьОбласть("МакетДетальныхЗаписей");
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	| БЗ_СтатьиБазыЗнаний.Представление КАК Статья,
	|ИЗ
	| Справочник.БЗ_СтатьиБазыЗнаний.Категории КАК СтатьиБазыЗнанийКатегории
	| ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БЗ_СтатьиБазыЗнаний КАК БЗ_СтатьиБазыЗнаний
	| ПО СтатьиБазыЗнанийКатегории.Ссылка = БЗ_СтатьиБазыЗнаний.Ссылка
	|ГДЕ
	| СтатьиБазыЗнанийКатегории.Категория В ИЕРАРХИИ(&Категория)
	| И НЕ БЗ_СтатьиБазыЗнаний.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	| БЗ_СтатьиБазыЗнаний.ДатаСоздания
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Сдвиг = 0;
	Если НЕ ВыбранныеЗначения = Неопределено Тогда
		Если ВыбранныеЗначения.НайтиПоЗначению("Описание").Пометка Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "БЗ_СтатьиБазыЗнаний.Представление КАК Статья,",
			"БЗ_СтатьиБазыЗнаний.Представление КАК Статья,
			|БЗ_СтатьиБазыЗнаний.КраткоеОписание КАК Описание,");
		Иначе
			Построитель.МакетЗаголовкаОтчета.УдалитьОбласть(Построитель.МакетЗаголовкаОтчета.Область("C2"),ТипСмещенияТабличногоДокумента.ПоГоризонтали);
			Построитель.МакетШапкиТаблицы.УдалитьОбласть(Построитель.МакетШапкиТаблицы.Область("C2"),ТипСмещенияТабличногоДокумента.ПоГоризонтали);
			Построитель.МакетДетальныхЗаписей.УдалитьОбласть(Построитель.МакетДетальныхЗаписей.Область("C2"),ТипСмещенияТабличногоДокумента.ПоГоризонтали);
			Построитель.Макет.УдалитьОбласть(Построитель.Макет.Область("C2"),ТипСмещенияТабличногоДокумента.ПоГоризонтали);
			Сдвиг = Сдвиг + 1;
		КонецЕсли;
		
		Если ВыбранныеЗначения.НайтиПоЗначению("Дата создания").Пометка Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "БЗ_СтатьиБазыЗнаний.Представление КАК Статья,",
			"БЗ_СтатьиБазыЗнаний.Представление КАК Статья,
			|БЗ_СтатьиБазыЗнаний.ДатаСоздания КАК ДатаСоздания,");
		Иначе
			Построитель.МакетЗаголовкаОтчета.УдалитьОбласть(Построитель.МакетЗаголовкаОтчета.Область("C"+Строка(3-Сдвиг)),ТипСмещенияТабличногоДокумента.ПоГоризонтали);
			Построитель.МакетШапкиТаблицы.УдалитьОбласть(Построитель.МакетШапкиТаблицы.Область("C"+Строка(3-Сдвиг)),ТипСмещенияТабличногоДокумента.ПоГоризонтали);
			Построитель.МакетДетальныхЗаписей.УдалитьОбласть(Построитель.МакетДетальныхЗаписей.Область("C"+Строка(3-Сдвиг)),ТипСмещенияТабличногоДокумента.ПоГоризонтали);
			Построитель.Макет.УдалитьОбласть(Построитель.Макет.Область("C"+Строка(3-Сдвиг)),ТипСмещенияТабличногоДокумента.ПоГоризонтали);
			Сдвиг = Сдвиг + 1;
		КонецЕсли;
		
		Если ВыбранныеЗначения.НайтиПоЗначению("Ответственный").Пометка Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "БЗ_СтатьиБазыЗнаний.Представление КАК Статья,",
			"БЗ_СтатьиБазыЗнаний.Представление КАК Статья,
			|БЗ_СтатьиБазыЗнаний.Ответственный КАК Ответственный,");
		Иначе
			Построитель.МакетЗаголовкаОтчета.УдалитьОбласть(Построитель.МакетЗаголовкаОтчета.Область("C"+Строка(4-Сдвиг)),ТипСмещенияТабличногоДокумента.ПоГоризонтали);
			Построитель.МакетШапкиТаблицы.УдалитьОбласть(Построитель.МакетШапкиТаблицы.Область("C"+Строка(4-Сдвиг)),ТипСмещенияТабличногоДокумента.ПоГоризонтали);
			Построитель.МакетДетальныхЗаписей.УдалитьОбласть(Построитель.МакетДетальныхЗаписей.Область("C"+Строка(4-Сдвиг)),ТипСмещенияТабличногоДокумента.ПоГоризонтали);
			Построитель.Макет.УдалитьОбласть(Построитель.Макет.Область("C"+Строка(4-Сдвиг)),ТипСмещенияТабличногоДокумента.ПоГоризонтали);
		КонецЕсли;
	Иначе
		Построитель.МакетЗаголовкаОтчета.УдалитьОбласть(Построитель.МакетЗаголовкаОтчета.Область("C2"),ТипСмещенияТабличногоДокумента.ПоГоризонтали);
		Построитель.МакетШапкиТаблицы.УдалитьОбласть(Построитель.МакетШапкиТаблицы.Область("C2"),ТипСмещенияТабличногоДокумента.ПоГоризонтали);
		Построитель.МакетДетальныхЗаписей.УдалитьОбласть(Построитель.МакетДетальныхЗаписей.Область("C2"),ТипСмещенияТабличногоДокумента.ПоГоризонтали);
		Построитель.Макет.УдалитьОбласть(Построитель.Макет.Область("C2"),ТипСмещенияТабличногоДокумента.ПоГоризонтали);
		Построитель.МакетЗаголовкаОтчета.УдалитьОбласть(Построитель.МакетЗаголовкаОтчета.Область("C"+Строка(3)),ТипСмещенияТабличногоДокумента.ПоГоризонтали);
		Построитель.МакетШапкиТаблицы.УдалитьОбласть(Построитель.МакетШапкиТаблицы.Область("C"+Строка(3)),ТипСмещенияТабличногоДокумента.ПоГоризонтали);
		Построитель.МакетДетальныхЗаписей.УдалитьОбласть(Построитель.МакетДетальныхЗаписей.Область("C"+Строка(3)),ТипСмещенияТабличногоДокумента.ПоГоризонтали);
		Построитель.Макет.УдалитьОбласть(Построитель.Макет.Область("C"+Строка(3)),ТипСмещенияТабличногоДокумента.ПоГоризонтали);
		Построитель.МакетЗаголовкаОтчета.УдалитьОбласть(Построитель.МакетЗаголовкаОтчета.Область("C"+Строка(2)),ТипСмещенияТабличногоДокумента.ПоГоризонтали);
		Построитель.МакетШапкиТаблицы.УдалитьОбласть(Построитель.МакетШапкиТаблицы.Область("C"+Строка(2)),ТипСмещенияТабличногоДокумента.ПоГоризонтали);
		Построитель.МакетДетальныхЗаписей.УдалитьОбласть(Построитель.МакетДетальныхЗаписей.Область("C"+Строка(2)),ТипСмещенияТабличногоДокумента.ПоГоризонтали);
		Построитель.Макет.УдалитьОбласть(Построитель.Макет.Область("C"+Строка(2)),ТипСмещенияТабличногоДокумента.ПоГоризонтали);
	КонецЕсли;	
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
	",
	|ИЗ", "
	|ИЗ");
	
	Запрос.УстановитьПараметр("Категория", Категория);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Построитель.ИсточникДанных = Новый ОписаниеИсточникаДанных(РезультатЗапроса);
	
	Построитель.Вывести(ТабДокумент);
	
	Возврат ТабДокумент;
	
КонецФункции
#КонецЕсли

//--- АйТи Власенко А.П. 15.09.2021 ТЗ № ИС00-003848 >> e1cib/data/Документ.ЗаданиеНаРаботу?ref=81c732336337376211ec0bc57cf6df32

&НаКлиенте
Процедура НоваяСтатьяБазыЗнаний(Команда)
	
	ТекНавигационнаяКатегория 	= Элементы.КатегорииБазыЗнаний.ТекущаяСтрока.УникальныйИдентификатор();
	НавигационнаяСсылка 		= БЗ_ОбщиеФункцииКлиент.СоздатьСсылкуБазыЗнаний(ТекНавигационнаяКатегория);
	
	НавигационнаяСсылка_kbapi(НавигационнаяСсылка);
	
КонецПроцедуры

&НаКлиенте
Процедура НоваяКатегорияБазыЗнаний(Команда)
	
	ТекНавигационнаяКатегория 	= Элементы.КатегорииБазыЗнаний.ТекущаяСтрока.УникальныйИдентификатор();
	НавигационнаяСсылка 		= БЗ_ОбщиеФункцииКлиент.СоздатьСсылкуБазыЗнаний(ТекНавигационнаяКатегория, Истина);
	
	НавигационнаяСсылка_kbapi(НавигационнаяСсылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрикрепленныеФайлы(Команда)
	
	ПараметрКоманды = Объект.СтатьяБазыЗнаний;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВладелецФайла"	,  ПараметрКоманды);

	ПараметрыФормы.Вставить("ТолькоВложения",	Истина);
	//ПараметрыФормы.ТолькоПросмотр = Ложь;
	
	ОткрытьФорму("Обработка.БЗ_РаботаСФайлами.Форма.ПрисоединенныеФайлы", ПараметрыФормы, ЭтаФорма, Истина, Неопределено,,Новый ОписаниеОповещения("ОткрытьПрисоединенныеФайлыПослеЗакрытия",ЭтаФорма)); //ОткрытьФорму("ОбщаяФорма.ПрисоединенныеФайлы", ПараметрыФормы, ЭтаФорма, Истина, Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПрисоединенныеФайлыПослеЗакрытия(Результат, ДополнительныеПараметры) Экспорт
	ОбновитьСтраницу(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура СкачатьФайлы(Команда)
	
	ПрикрепленныеФайлы = Новый Массив;

	ПрикрепленныеФайлы = БЗ_СкачатьФайлыПослеНаСервере(Объект.СтатьяБазыЗнаний); 

	Для каждого ПрикрепленныйФайл Из ПрикрепленныеФайлы Цикл
	
		ДанныеФайла = РаботаСФайламиСлужебныйВызовСервера.ДанныеФайлаДляСохранения(ПрикрепленныйФайл);
    	РаботаСФайламиСлужебныйКлиент.СохранитьКак(Неопределено, ДанныеФайла, Неопределено);

	КонецЦикла;
	
КонецПроцедуры

//+++ АйТи Шарикова ТЗ№ ИС00-001414 e1cib/data/Документ.ЗаданиеНаРаботу?ref=a915fc3497141b3f11ec993f63c1c4a3
&НаСервереБезКонтекста
Функция БЗ_СкачатьФайлыПослеНаСервере(Ссылка)
	
	ПрикрепленныеФайлыМассив = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	БЗ_СтатьиБазыЗнанийПрисоединенныеФайлы.Ссылка КАК Ссылка,
		|	БЗ_СтатьиБазыЗнанийПрисоединенныеФайлы.Наименование КАК Наименование,
		|	БЗ_СтатьиБазыЗнанийПрисоединенныеФайлы.Расширение КАК Расширение,
		|	БЗ_СтатьиБазыЗнанийПрисоединенныеФайлы.ИндексКартинки КАК ИндексКартинки
		|ИЗ
		|	Справочник.БЗ_СтатьиБазыЗнанийПрисоединенныеФайлы КАК БЗ_СтатьиБазыЗнанийПрисоединенныеФайлы
		|ГДЕ
		|	БЗ_СтатьиБазыЗнанийПрисоединенныеФайлы.ВладелецФайла = &ВладелецФайла
		|	И НЕ БЗ_СтатьиБазыЗнанийПрисоединенныеФайлы.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("ВладелецФайла", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить(); 
	
	ПрикрепленныеФайлыМассив = РезультатЗапроса.ВыгрузитьКолонку("Ссылка");
	
	Возврат ПрикрепленныеФайлыМассив; 

КонецФункции //--- АйТи Шарикова ТЗ№ ИС00-001414 e1cib/data/Документ.ЗаданиеНаРаботу?ref=a915fc3497141b3f11ec993f63c1c4a3

&НаКлиенте
Процедура УстановитьСнятьПометкуУдаления(Команда)
	
	БЗ_УстановитьСнятьПометкуУдаления(Объект.СтатьяБазыЗнаний)
	
КонецПроцедуры

&НаКлиенте
Процедура БЗ_УстановитьСнятьПометкуУдаления(пСсылка, пЗначение = Неопределено)
	
	Если ЗначениеЗаполнено(пСсылка) Тогда
		Если пЗначение = Неопределено Тогда
			лОбъектПометкаУдаления 	= БЗ_ПолучитьПометкуУдаленияНаСервере(пСсылка);
			лВопросСостояние 		= ?(НЕ лОбъектПометкаУдаления, "Установить", "Снять");
			ПоказатьВопрос(Новый ОписаниеОповещения("ПослеВопросаОПометкеНаУдаление", ЭтотОбъект, Новый Структура("СсылкаНаОбъект", пСсылка)), лВопросСостояние + " пометку на удаление?",РежимДиалогаВопрос.ДаНет); 
		Иначе
			БЗ_УстановитьСнятьПометкуУдаленияНаСервере(пСсылка, пЗначение);
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры // БЗ_УстановитьСнятьПометкуУдаления()

&НаКлиенте
Процедура ПослеВопросаОПометкеНаУдаление(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		БЗ_УстановитьСнятьПометкуУдаленияНаСервере(ДополнительныеПараметры.СсылкаНаОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция БЗ_ПолучитьПометкуУдаленияНаСервере(пСсылка)
	
	Возврат пСсылка.ПометкаУдаления;
	
КонецФункции // ПолучитьПометкуУдаленияНаСервере()

&НаСервереБезКонтекста
Процедура БЗ_УстановитьСнятьПометкуУдаленияНаСервере(пСсылка, пЗначение = Неопределено)
	
	лОбъект 	= пСсылка.ПолучитьОбъект();
	Если пЗначение = Неопределено Тогда
		лОбъект.УстановитьПометкуУдаления(НЕ лОбъект.ПометкаУдаления);
	Иначе
		лОбъект.УстановитьПометкуУдаления(пЗначение);
	КонецЕсли; 
	
КонецПроцедуры // УстановитьСнятьПометкуУдаленияНаСервере()

//+++ АйТи Смирнов Д.В. 02.11.2021
&НаКлиенте
Процедура ПечатьОтчётаИзучения(Команда)
	
	Таб = ПолучениеОтчётаСостоянияСтатей();
	Таб.Показать("Отчет по обучению статьям");
	
КонецПроцедуры                           

&НаСервере
Функция ПолучениеОтчётаСостоянияСтатей()
	
	ТабДок = Новый ТабличныйДокумент;
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|БЗ_СостояниеСтатейБазыЗнаний.СтатьяБазыЗнаний КАК СтатьяБазыЗнаний,
	|БЗ_СостояниеСтатейБазыЗнаний.ВыдалНаИзучение КАК ВыдалНаИзучение,
	|БЗ_СостояниеСтатейБазыЗнаний.ВыданаНаИзучение КАК ВыданаНаИзучение,
	|БЗ_СостояниеСтатейБазыЗнаний.Пользователь КАК Пользователь,
	|БЗ_СостояниеСтатейБазыЗнаний.Изучена КАК Изучена
	|	ИЗ
	|РегистрСведений.БЗ_СостояниеСтатейБазыЗнаний КАК БЗ_СостояниеСтатейБазыЗнаний
	|	ГДЕ
	|БЗ_СостояниеСтатейБазыЗнаний.СтатьяБазыЗнаний = &СтатьяБазыЗнаний
	|И БЗ_СостояниеСтатейБазыЗнаний.ВыданаНаИзучение <> ДАТАВРЕМЯ(1, 1, 1)";
	
	Запрос.УстановитьПараметр("СтатьяБазыЗнаний",ЭтотОбъект.Объект.СтатьяБазыЗнаний);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Макет = Обработки.БЗ_БазаЗнаний.ПолучитьМакет("МакетОтчетИзучения");
	
	ОбластьШапки  = Макет.ПолучитьОбласть("Шапка");
 	ОбластьТаблицы = Макет.ПолучитьОбласть("ТаблицаУчеников");
	Отступ = Макет.ПолучитьОбласть("Отступ");
	ОбластьИмёнТаблицы = Макет.ПолучитьОбласть("НазваниеГруппы");
	
	ОбластьШапки.Параметры.Организация = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиПользователя", "Организация");
	ОбластьШапки.Параметры.СтатьяБазы = ЭтотОбъект.Объект.СтатьяБазыЗнаний;
	ОбластьШапки.Параметры.Преподаватель = " ";
	
	ТабДок.Вывести(ОбластьШапки);
	ТабДок.Вывести(Отступ);
	ТабДок.Вывести(ОбластьИмёнТаблицы);
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ОбластьТаблицы.Параметры.ДатаВыдачи = ВыборкаДетальныеЗаписи.ВыданаНаИзучение;
		ОбластьТаблицы.Параметры.Ученик = ВыборкаДетальныеЗаписи.Пользователь;
		Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Изучена) Тогда
			ОбластьТаблицы.Параметры.Подпись = "+ " + ВыборкаДетальныеЗаписи.Изучена;
		Иначе
			ОбластьТаблицы.Параметры.Подпись = " ";
		КонецЕсли;
		ТабДок.Вывести(ОбластьТаблицы);
	КонецЦикла;
	ТабДок.ПолеСлева  = 5;
	ТабДок.ПолеСправа = 5;
	ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
	Возврат ТабДок;
	 
КонецФункции  

//--- АйТи Смирнов Д.В. 02.11.2021

&НаКлиенте
Процедура СтатьяПомоглаПриИзменении(Элемент)
	
	//АдресСтраницы 	= ПолучитьТекущийАдресСсылки(Объект.История, ТекущаяСтраница);
	//ДанныеСсылки 	= РазобратьАдресСсылкиНаСервере(АдресСтраницы);
	//ПараметрыСсылки = ДанныеСсылки.Параметры;
	//Идентификатор	= ПараметрыСсылки.id;
	//ЭлементСсылка	= ПолучитьСсылкуПоИдентификатору("СтатьиБазыЗнаний", Идентификатор);
	
	Если ЗначениеЗаполнено(ИсточникОткрытия) Тогда
		лСтатьяБазыЗнаний = Объект.СтатьяБазыЗнаний; // Это не то, чтобы было открыто из задания, а та страница, на которой остановились в итоге. Аккуратно
		
		Если ЗначениеЗаполнено(лСтатьяБазыЗнаний) Тогда
			БЗ_ОбщиеФункцииСервер.ЗаписатьСтатьиБазыЗнаний(ИсточникОткрытия, лСтатьяБазыЗнаний, НЕ СтатьяПомогла);
			Оповестить("ОбновитьСтатьиБазыЗнаний",, ЭтаФорма);	
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьРезультатПоиска(Команда)
	
	Элементы.ГруппаРезультатПоиска.Показать();
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоиска1ОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	СтрокаПоиска = Текст;
	
	ВыполнитьПоиск(0);
	
	Элементы.ГруппаРезультатПоиска.Показать();
	
КонецПроцедуры

&НаКлиенте
Процедура СтатьиДляИзучения(Команда)
	
	ОткрытьФорму("Обработка.БЗ_ВыдачаСтатейНаИзучение.Форма.СтатьиДляИзучения"); 
	
КонецПроцедуры

&НаКлиенте
Процедура БЗ_РезультатПоискаHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	РезультатПоискаHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка);
КонецПроцедуры

&НаСерверебезКонтекста
Функция ИспользуетсяПолнотекстовыйПоиск()
	
	ЗначениеКонстанты = Константы.ИспользоватьПолнотекстовыйПоиск.Получить();
	
	Возврат ЗначениеКонстанты = Истина;
	
КонецФункции

&НаКлиенте
Процедура СписокВсехСтатейБЗ(Команда)
	ОткрытьФорму("Справочник.БЗ_СтатьиБазыЗнаний.Форма.ФормаСписка",,ЭтаФорма);
КонецПроцедуры
